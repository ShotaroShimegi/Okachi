
Okachi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005338  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080054c4  080054c4  000064c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800550c  0800550c  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  0800550c  0800550c  0000650c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005514  08005514  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005514  08005514  00006514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005518  08005518  00006518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800551c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  2000000c  08005528  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08005528  00007320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012952  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028c2  00000000  00000000  0001998e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  0001c250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d8d  00000000  00000000  0001d3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000222a3  00000000  00000000  0001e14d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015502  00000000  00000000  000403f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d650f  00000000  00000000  000558f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012be01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048ec  00000000  00000000  0012be44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00130730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080054ac 	.word	0x080054ac

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080054ac 	.word	0x080054ac

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96a 	b.w	80004b8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	460c      	mov	r4, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14e      	bne.n	80002a6 <__udivmoddi4+0xaa>
 8000208:	4694      	mov	ip, r2
 800020a:	458c      	cmp	ip, r1
 800020c:	4686      	mov	lr, r0
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	d962      	bls.n	80002da <__udivmoddi4+0xde>
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0320 	rsb	r3, r2, #32
 800021a:	4091      	lsls	r1, r2
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	fa0c fc02 	lsl.w	ip, ip, r2
 8000224:	4319      	orrs	r1, r3
 8000226:	fa00 fe02 	lsl.w	lr, r0, r2
 800022a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022e:	fa1f f68c 	uxth.w	r6, ip
 8000232:	fbb1 f4f7 	udiv	r4, r1, r7
 8000236:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023a:	fb07 1114 	mls	r1, r7, r4, r1
 800023e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000242:	fb04 f106 	mul.w	r1, r4, r6
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000252:	f080 8112 	bcs.w	800047a <__udivmoddi4+0x27e>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 810f 	bls.w	800047a <__udivmoddi4+0x27e>
 800025c:	3c02      	subs	r4, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a59      	subs	r1, r3, r1
 8000262:	fa1f f38e 	uxth.w	r3, lr
 8000266:	fbb1 f0f7 	udiv	r0, r1, r7
 800026a:	fb07 1110 	mls	r1, r7, r0, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb00 f606 	mul.w	r6, r0, r6
 8000276:	429e      	cmp	r6, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x94>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000282:	f080 80fc 	bcs.w	800047e <__udivmoddi4+0x282>
 8000286:	429e      	cmp	r6, r3
 8000288:	f240 80f9 	bls.w	800047e <__udivmoddi4+0x282>
 800028c:	4463      	add	r3, ip
 800028e:	3802      	subs	r0, #2
 8000290:	1b9b      	subs	r3, r3, r6
 8000292:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa6>
 800029a:	40d3      	lsrs	r3, r2
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xba>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb4>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x150>
 80002be:	42a3      	cmp	r3, r4
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xcc>
 80002c2:	4290      	cmp	r0, r2
 80002c4:	f0c0 80f0 	bcc.w	80004a8 <__udivmoddi4+0x2ac>
 80002c8:	1a86      	subs	r6, r0, r2
 80002ca:	eb64 0303 	sbc.w	r3, r4, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	2d00      	cmp	r5, #0
 80002d2:	d0e6      	beq.n	80002a2 <__udivmoddi4+0xa6>
 80002d4:	e9c5 6300 	strd	r6, r3, [r5]
 80002d8:	e7e3      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002da:	2a00      	cmp	r2, #0
 80002dc:	f040 8090 	bne.w	8000400 <__udivmoddi4+0x204>
 80002e0:	eba1 040c 	sub.w	r4, r1, ip
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	fa1f f78c 	uxth.w	r7, ip
 80002ec:	2101      	movs	r1, #1
 80002ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	fb08 4416 	mls	r4, r8, r6, r4
 80002fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fe:	fb07 f006 	mul.w	r0, r7, r6
 8000302:	4298      	cmp	r0, r3
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0x11c>
 8000306:	eb1c 0303 	adds.w	r3, ip, r3
 800030a:	f106 34ff 	add.w	r4, r6, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x11a>
 8000310:	4298      	cmp	r0, r3
 8000312:	f200 80cd 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 8000316:	4626      	mov	r6, r4
 8000318:	1a1c      	subs	r4, r3, r0
 800031a:	fa1f f38e 	uxth.w	r3, lr
 800031e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000322:	fb08 4410 	mls	r4, r8, r0, r4
 8000326:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032a:	fb00 f707 	mul.w	r7, r0, r7
 800032e:	429f      	cmp	r7, r3
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x148>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f100 34ff 	add.w	r4, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x146>
 800033c:	429f      	cmp	r7, r3
 800033e:	f200 80b0 	bhi.w	80004a2 <__udivmoddi4+0x2a6>
 8000342:	4620      	mov	r0, r4
 8000344:	1bdb      	subs	r3, r3, r7
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x9c>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa20 fc06 	lsr.w	ip, r0, r6
 800035c:	fa04 f301 	lsl.w	r3, r4, r1
 8000360:	ea43 030c 	orr.w	r3, r3, ip
 8000364:	40f4      	lsrs	r4, r6
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	0c38      	lsrs	r0, r7, #16
 800036c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000370:	fbb4 fef0 	udiv	lr, r4, r0
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fb00 441e 	mls	r4, r0, lr, r4
 800037c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000380:	fb0e f90c 	mul.w	r9, lr, ip
 8000384:	45a1      	cmp	r9, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x1a6>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000392:	f080 8084 	bcs.w	800049e <__udivmoddi4+0x2a2>
 8000396:	45a1      	cmp	r9, r4
 8000398:	f240 8081 	bls.w	800049e <__udivmoddi4+0x2a2>
 800039c:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a0:	443c      	add	r4, r7
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	fa1f f983 	uxth.w	r9, r3
 80003aa:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ae:	fb00 4413 	mls	r4, r0, r3, r4
 80003b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ba:	45a4      	cmp	ip, r4
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x1d2>
 80003be:	193c      	adds	r4, r7, r4
 80003c0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c4:	d267      	bcs.n	8000496 <__udivmoddi4+0x29a>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d965      	bls.n	8000496 <__udivmoddi4+0x29a>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d2:	fba0 9302 	umull	r9, r3, r0, r2
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	429c      	cmp	r4, r3
 80003dc:	46ce      	mov	lr, r9
 80003de:	469c      	mov	ip, r3
 80003e0:	d351      	bcc.n	8000486 <__udivmoddi4+0x28a>
 80003e2:	d04e      	beq.n	8000482 <__udivmoddi4+0x286>
 80003e4:	b155      	cbz	r5, 80003fc <__udivmoddi4+0x200>
 80003e6:	ebb8 030e 	subs.w	r3, r8, lr
 80003ea:	eb64 040c 	sbc.w	r4, r4, ip
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	431e      	orrs	r6, r3
 80003f6:	40cc      	lsrs	r4, r1
 80003f8:	e9c5 6400 	strd	r6, r4, [r5]
 80003fc:	2100      	movs	r1, #0
 80003fe:	e750      	b.n	80002a2 <__udivmoddi4+0xa6>
 8000400:	f1c2 0320 	rsb	r3, r2, #32
 8000404:	fa20 f103 	lsr.w	r1, r0, r3
 8000408:	fa0c fc02 	lsl.w	ip, ip, r2
 800040c:	fa24 f303 	lsr.w	r3, r4, r3
 8000410:	4094      	lsls	r4, r2
 8000412:	430c      	orrs	r4, r1
 8000414:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000418:	fa00 fe02 	lsl.w	lr, r0, r2
 800041c:	fa1f f78c 	uxth.w	r7, ip
 8000420:	fbb3 f0f8 	udiv	r0, r3, r8
 8000424:	fb08 3110 	mls	r1, r8, r0, r3
 8000428:	0c23      	lsrs	r3, r4, #16
 800042a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042e:	fb00 f107 	mul.w	r1, r0, r7
 8000432:	4299      	cmp	r1, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x24c>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 36ff 	add.w	r6, r0, #4294967295
 800043e:	d22c      	bcs.n	800049a <__udivmoddi4+0x29e>
 8000440:	4299      	cmp	r1, r3
 8000442:	d92a      	bls.n	800049a <__udivmoddi4+0x29e>
 8000444:	3802      	subs	r0, #2
 8000446:	4463      	add	r3, ip
 8000448:	1a5b      	subs	r3, r3, r1
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000450:	fb08 3311 	mls	r3, r8, r1, r3
 8000454:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000458:	fb01 f307 	mul.w	r3, r1, r7
 800045c:	42a3      	cmp	r3, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x276>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f101 36ff 	add.w	r6, r1, #4294967295
 8000468:	d213      	bcs.n	8000492 <__udivmoddi4+0x296>
 800046a:	42a3      	cmp	r3, r4
 800046c:	d911      	bls.n	8000492 <__udivmoddi4+0x296>
 800046e:	3902      	subs	r1, #2
 8000470:	4464      	add	r4, ip
 8000472:	1ae4      	subs	r4, r4, r3
 8000474:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000478:	e739      	b.n	80002ee <__udivmoddi4+0xf2>
 800047a:	4604      	mov	r4, r0
 800047c:	e6f0      	b.n	8000260 <__udivmoddi4+0x64>
 800047e:	4608      	mov	r0, r1
 8000480:	e706      	b.n	8000290 <__udivmoddi4+0x94>
 8000482:	45c8      	cmp	r8, r9
 8000484:	d2ae      	bcs.n	80003e4 <__udivmoddi4+0x1e8>
 8000486:	ebb9 0e02 	subs.w	lr, r9, r2
 800048a:	eb63 0c07 	sbc.w	ip, r3, r7
 800048e:	3801      	subs	r0, #1
 8000490:	e7a8      	b.n	80003e4 <__udivmoddi4+0x1e8>
 8000492:	4631      	mov	r1, r6
 8000494:	e7ed      	b.n	8000472 <__udivmoddi4+0x276>
 8000496:	4603      	mov	r3, r0
 8000498:	e799      	b.n	80003ce <__udivmoddi4+0x1d2>
 800049a:	4630      	mov	r0, r6
 800049c:	e7d4      	b.n	8000448 <__udivmoddi4+0x24c>
 800049e:	46d6      	mov	lr, sl
 80004a0:	e77f      	b.n	80003a2 <__udivmoddi4+0x1a6>
 80004a2:	4463      	add	r3, ip
 80004a4:	3802      	subs	r0, #2
 80004a6:	e74d      	b.n	8000344 <__udivmoddi4+0x148>
 80004a8:	4606      	mov	r6, r0
 80004aa:	4623      	mov	r3, r4
 80004ac:	4608      	mov	r0, r1
 80004ae:	e70f      	b.n	80002d0 <__udivmoddi4+0xd4>
 80004b0:	3e02      	subs	r6, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	e730      	b.n	8000318 <__udivmoddi4+0x11c>
 80004b6:	bf00      	nop

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop

080004bc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004c2:	463b      	mov	r3, r7
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	609a      	str	r2, [r3, #8]
 80004cc:	60da      	str	r2, [r3, #12]
 80004ce:	611a      	str	r2, [r3, #16]
 80004d0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004d2:	4b46      	ldr	r3, [pc, #280]	@ (80005ec <MX_ADC1_Init+0x130>)
 80004d4:	4a46      	ldr	r2, [pc, #280]	@ (80005f0 <MX_ADC1_Init+0x134>)
 80004d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80004d8:	4b44      	ldr	r3, [pc, #272]	@ (80005ec <MX_ADC1_Init+0x130>)
 80004da:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80004de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004e0:	4b42      	ldr	r3, [pc, #264]	@ (80005ec <MX_ADC1_Init+0x130>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004e6:	4b41      	ldr	r3, [pc, #260]	@ (80005ec <MX_ADC1_Init+0x130>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004ec:	4b3f      	ldr	r3, [pc, #252]	@ (80005ec <MX_ADC1_Init+0x130>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80004f2:	4b3e      	ldr	r3, [pc, #248]	@ (80005ec <MX_ADC1_Init+0x130>)
 80004f4:	2208      	movs	r2, #8
 80004f6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004f8:	4b3c      	ldr	r3, [pc, #240]	@ (80005ec <MX_ADC1_Init+0x130>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004fe:	4b3b      	ldr	r3, [pc, #236]	@ (80005ec <MX_ADC1_Init+0x130>)
 8000500:	2200      	movs	r2, #0
 8000502:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 8000504:	4b39      	ldr	r3, [pc, #228]	@ (80005ec <MX_ADC1_Init+0x130>)
 8000506:	2205      	movs	r2, #5
 8000508:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800050a:	4b38      	ldr	r3, [pc, #224]	@ (80005ec <MX_ADC1_Init+0x130>)
 800050c:	2200      	movs	r2, #0
 800050e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000512:	4b36      	ldr	r3, [pc, #216]	@ (80005ec <MX_ADC1_Init+0x130>)
 8000514:	2200      	movs	r2, #0
 8000516:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000518:	4b34      	ldr	r3, [pc, #208]	@ (80005ec <MX_ADC1_Init+0x130>)
 800051a:	2200      	movs	r2, #0
 800051c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800051e:	4b33      	ldr	r3, [pc, #204]	@ (80005ec <MX_ADC1_Init+0x130>)
 8000520:	2201      	movs	r2, #1
 8000522:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000526:	4b31      	ldr	r3, [pc, #196]	@ (80005ec <MX_ADC1_Init+0x130>)
 8000528:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800052c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800052e:	4b2f      	ldr	r3, [pc, #188]	@ (80005ec <MX_ADC1_Init+0x130>)
 8000530:	2200      	movs	r2, #0
 8000532:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000536:	482d      	ldr	r0, [pc, #180]	@ (80005ec <MX_ADC1_Init+0x130>)
 8000538:	f000 fffe 	bl	8001538 <HAL_ADC_Init>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000542:	f000 fa0b 	bl	800095c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000546:	4b2b      	ldr	r3, [pc, #172]	@ (80005f4 <MX_ADC1_Init+0x138>)
 8000548:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800054a:	2306      	movs	r3, #6
 800054c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800054e:	2302      	movs	r3, #2
 8000550:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000552:	237f      	movs	r3, #127	@ 0x7f
 8000554:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000556:	2304      	movs	r3, #4
 8000558:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800055a:	2300      	movs	r3, #0
 800055c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800055e:	463b      	mov	r3, r7
 8000560:	4619      	mov	r1, r3
 8000562:	4822      	ldr	r0, [pc, #136]	@ (80005ec <MX_ADC1_Init+0x130>)
 8000564:	f001 f92a 	bl	80017bc <HAL_ADC_ConfigChannel>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800056e:	f000 f9f5 	bl	800095c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000572:	4b21      	ldr	r3, [pc, #132]	@ (80005f8 <MX_ADC1_Init+0x13c>)
 8000574:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000576:	230c      	movs	r3, #12
 8000578:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800057a:	463b      	mov	r3, r7
 800057c:	4619      	mov	r1, r3
 800057e:	481b      	ldr	r0, [pc, #108]	@ (80005ec <MX_ADC1_Init+0x130>)
 8000580:	f001 f91c 	bl	80017bc <HAL_ADC_ConfigChannel>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800058a:	f000 f9e7 	bl	800095c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800058e:	4b1b      	ldr	r3, [pc, #108]	@ (80005fc <MX_ADC1_Init+0x140>)
 8000590:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000592:	2312      	movs	r3, #18
 8000594:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000596:	463b      	mov	r3, r7
 8000598:	4619      	mov	r1, r3
 800059a:	4814      	ldr	r0, [pc, #80]	@ (80005ec <MX_ADC1_Init+0x130>)
 800059c:	f001 f90e 	bl	80017bc <HAL_ADC_ConfigChannel>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80005a6:	f000 f9d9 	bl	800095c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005aa:	4b15      	ldr	r3, [pc, #84]	@ (8000600 <MX_ADC1_Init+0x144>)
 80005ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80005ae:	2318      	movs	r3, #24
 80005b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b2:	463b      	mov	r3, r7
 80005b4:	4619      	mov	r1, r3
 80005b6:	480d      	ldr	r0, [pc, #52]	@ (80005ec <MX_ADC1_Init+0x130>)
 80005b8:	f001 f900 	bl	80017bc <HAL_ADC_ConfigChannel>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 80005c2:	f000 f9cb 	bl	800095c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80005c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000604 <MX_ADC1_Init+0x148>)
 80005c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80005ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005d0:	463b      	mov	r3, r7
 80005d2:	4619      	mov	r1, r3
 80005d4:	4805      	ldr	r0, [pc, #20]	@ (80005ec <MX_ADC1_Init+0x130>)
 80005d6:	f001 f8f1 	bl	80017bc <HAL_ADC_ConfigChannel>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 80005e0:	f000 f9bc 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005e4:	bf00      	nop
 80005e6:	3718      	adds	r7, #24
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000028 	.word	0x20000028
 80005f0:	50040000 	.word	0x50040000
 80005f4:	14f00020 	.word	0x14f00020
 80005f8:	19200040 	.word	0x19200040
 80005fc:	1d500080 	.word	0x1d500080
 8000600:	21800100 	.word	0x21800100
 8000604:	25b00200 	.word	0x25b00200

08000608 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b09e      	sub	sp, #120	@ 0x78
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000610:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	2254      	movs	r2, #84	@ 0x54
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f004 ff12 	bl	8005452 <memset>
  if(adcHandle->Instance==ADC1)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a3b      	ldr	r2, [pc, #236]	@ (8000720 <HAL_ADC_MspInit+0x118>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d16e      	bne.n	8000716 <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000638:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800063c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800063e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000642:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000644:	2301      	movs	r3, #1
 8000646:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000648:	2301      	movs	r3, #1
 800064a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800064c:	2310      	movs	r3, #16
 800064e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000650:	2307      	movs	r3, #7
 8000652:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000654:	2302      	movs	r3, #2
 8000656:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000658:	2302      	movs	r3, #2
 800065a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800065c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000660:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000662:	f107 0310 	add.w	r3, r7, #16
 8000666:	4618      	mov	r0, r3
 8000668:	f002 ff22 	bl	80034b0 <HAL_RCCEx_PeriphCLKConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000672:	f000 f973 	bl	800095c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000676:	4b2b      	ldr	r3, [pc, #172]	@ (8000724 <HAL_ADC_MspInit+0x11c>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067a:	4a2a      	ldr	r2, [pc, #168]	@ (8000724 <HAL_ADC_MspInit+0x11c>)
 800067c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000680:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000682:	4b28      	ldr	r3, [pc, #160]	@ (8000724 <HAL_ADC_MspInit+0x11c>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000686:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	4b25      	ldr	r3, [pc, #148]	@ (8000724 <HAL_ADC_MspInit+0x11c>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	4a24      	ldr	r2, [pc, #144]	@ (8000724 <HAL_ADC_MspInit+0x11c>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800069a:	4b22      	ldr	r3, [pc, #136]	@ (8000724 <HAL_ADC_MspInit+0x11c>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80006a6:	231f      	movs	r3, #31
 80006a8:	667b      	str	r3, [r7, #100]	@ 0x64
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006aa:	230b      	movs	r3, #11
 80006ac:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80006b6:	4619      	mov	r1, r3
 80006b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006bc:	f001 feda 	bl	8002474 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80006c0:	4b19      	ldr	r3, [pc, #100]	@ (8000728 <HAL_ADC_MspInit+0x120>)
 80006c2:	4a1a      	ldr	r2, [pc, #104]	@ (800072c <HAL_ADC_MspInit+0x124>)
 80006c4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80006c6:	4b18      	ldr	r3, [pc, #96]	@ (8000728 <HAL_ADC_MspInit+0x120>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006cc:	4b16      	ldr	r3, [pc, #88]	@ (8000728 <HAL_ADC_MspInit+0x120>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006d2:	4b15      	ldr	r3, [pc, #84]	@ (8000728 <HAL_ADC_MspInit+0x120>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006d8:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <HAL_ADC_MspInit+0x120>)
 80006da:	2280      	movs	r2, #128	@ 0x80
 80006dc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006de:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <HAL_ADC_MspInit+0x120>)
 80006e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006e4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006e6:	4b10      	ldr	r3, [pc, #64]	@ (8000728 <HAL_ADC_MspInit+0x120>)
 80006e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <HAL_ADC_MspInit+0x120>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <HAL_ADC_MspInit+0x120>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006fa:	480b      	ldr	r0, [pc, #44]	@ (8000728 <HAL_ADC_MspInit+0x120>)
 80006fc:	f001 fd52 	bl	80021a4 <HAL_DMA_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8000706:	f000 f929 	bl	800095c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4a06      	ldr	r2, [pc, #24]	@ (8000728 <HAL_ADC_MspInit+0x120>)
 800070e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000710:	4a05      	ldr	r2, [pc, #20]	@ (8000728 <HAL_ADC_MspInit+0x120>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000716:	bf00      	nop
 8000718:	3778      	adds	r7, #120	@ 0x78
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	50040000 	.word	0x50040000
 8000724:	40021000 	.word	0x40021000
 8000728:	2000008c 	.word	0x2000008c
 800072c:	40020008 	.word	0x40020008

08000730 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000736:	4b14      	ldr	r3, [pc, #80]	@ (8000788 <MX_DMA_Init+0x58>)
 8000738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800073a:	4a13      	ldr	r2, [pc, #76]	@ (8000788 <MX_DMA_Init+0x58>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6493      	str	r3, [r2, #72]	@ 0x48
 8000742:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <MX_DMA_Init+0x58>)
 8000744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	2100      	movs	r1, #0
 8000752:	200b      	movs	r0, #11
 8000754:	f001 fcef 	bl	8002136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000758:	200b      	movs	r0, #11
 800075a:	f001 fd08 	bl	800216e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2100      	movs	r1, #0
 8000762:	200e      	movs	r0, #14
 8000764:	f001 fce7 	bl	8002136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000768:	200e      	movs	r0, #14
 800076a:	f001 fd00 	bl	800216e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	2100      	movs	r1, #0
 8000772:	200f      	movs	r0, #15
 8000774:	f001 fcdf 	bl	8002136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000778:	200f      	movs	r0, #15
 800077a:	f001 fcf8 	bl	800216e <HAL_NVIC_EnableIRQ>

}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40021000 	.word	0x40021000

0800078c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b088      	sub	sp, #32
 8000790:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 030c 	add.w	r3, r7, #12
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	4b37      	ldr	r3, [pc, #220]	@ (8000880 <MX_GPIO_Init+0xf4>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a6:	4a36      	ldr	r2, [pc, #216]	@ (8000880 <MX_GPIO_Init+0xf4>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ae:	4b34      	ldr	r3, [pc, #208]	@ (8000880 <MX_GPIO_Init+0xf4>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	4b31      	ldr	r3, [pc, #196]	@ (8000880 <MX_GPIO_Init+0xf4>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007be:	4a30      	ldr	r2, [pc, #192]	@ (8000880 <MX_GPIO_Init+0xf4>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000880 <MX_GPIO_Init+0xf4>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IR_LED_SET1_Pin|IR_LED_SET2_Pin|R_STEP_DIR_Pin|L_STEP_DIR_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	f44f 518d 	mov.w	r1, #4512	@ 0x11a0
 80007d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007dc:	f001 ffb4 	bl	8002748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IF_LED3_Pin|IF_LED1_Pin|IF_LED2_Pin|MOTOR_EN_Pin, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	21c3      	movs	r1, #195	@ 0xc3
 80007e4:	4827      	ldr	r0, [pc, #156]	@ (8000884 <MX_GPIO_Init+0xf8>)
 80007e6:	f001 ffaf 	bl	8002748 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IR_LED_SET1_Pin|IR_LED_SET2_Pin;
 80007ea:	23a0      	movs	r3, #160	@ 0xa0
 80007ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007f2:	2302      	movs	r3, #2
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	4619      	mov	r1, r3
 8000800:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000804:	f001 fe36 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = IF_LED3_Pin|IF_LED1_Pin|IF_LED2_Pin|MOTOR_EN_Pin;
 8000808:	23c3      	movs	r3, #195	@ 0xc3
 800080a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	2301      	movs	r3, #1
 800080e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	4619      	mov	r1, r3
 800081e:	4819      	ldr	r0, [pc, #100]	@ (8000884 <MX_GPIO_Init+0xf8>)
 8000820:	f001 fe28 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = R_STEP_DIR_Pin|L_STEP_DIR_Pin;
 8000824:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8000828:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	4619      	mov	r1, r3
 800083c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000840:	f001 fe18 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = L_SW_Pin;
 8000844:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000848:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800084e:	2302      	movs	r3, #2
 8000850:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(L_SW_GPIO_Port, &GPIO_InitStruct);
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	4619      	mov	r1, r3
 8000858:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800085c:	f001 fe0a 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = R_SW_Pin|C_SW_Pin;
 8000860:	2330      	movs	r3, #48	@ 0x30
 8000862:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000864:	2300      	movs	r3, #0
 8000866:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000868:	2302      	movs	r3, #2
 800086a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	4619      	mov	r1, r3
 8000872:	4804      	ldr	r0, [pc, #16]	@ (8000884 <MX_GPIO_Init+0xf8>)
 8000874:	f001 fdfe 	bl	8002474 <HAL_GPIO_Init>

}
 8000878:	bf00      	nop
 800087a:	3720      	adds	r7, #32
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40021000 	.word	0x40021000
 8000884:	48000400 	.word	0x48000400

08000888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088c:	f000 fc53 	bl	8001136 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000890:	f000 f812 	bl	80008b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000894:	f7ff ff7a 	bl	800078c <MX_GPIO_Init>
  MX_DMA_Init();
 8000898:	f7ff ff4a 	bl	8000730 <MX_DMA_Init>
  MX_ADC1_Init();
 800089c:	f7ff fe0e 	bl	80004bc <MX_ADC1_Init>
  MX_TIM2_Init();
 80008a0:	f000 f90e 	bl	8000ac0 <MX_TIM2_Init>
  MX_TIM6_Init();
 80008a4:	f000 f984 	bl	8000bb0 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 80008a8:	f000 fb38 	bl	8000f1c <MX_USART1_UART_Init>
  MX_TIM16_Init();
 80008ac:	f000 f9ec 	bl	8000c88 <MX_TIM16_Init>
  MX_TIM7_Init();
 80008b0:	f000 f9b4 	bl	8000c1c <MX_TIM7_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <main+0x2c>

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b096      	sub	sp, #88	@ 0x58
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	2244      	movs	r2, #68	@ 0x44
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f004 fdc3 	bl	8005452 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	463b      	mov	r3, r7
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008da:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80008de:	f001 ff59 	bl	8002794 <HAL_PWREx_ControlVoltageScaling>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008e8:	f000 f838 	bl	800095c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80008ec:	2310      	movs	r3, #16
 80008ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008f0:	2301      	movs	r3, #1
 80008f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008f8:	2360      	movs	r3, #96	@ 0x60
 80008fa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fc:	2302      	movs	r3, #2
 80008fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000900:	2301      	movs	r3, #1
 8000902:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000904:	2301      	movs	r3, #1
 8000906:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000908:	2328      	movs	r3, #40	@ 0x28
 800090a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800090c:	2307      	movs	r3, #7
 800090e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000910:	2302      	movs	r3, #2
 8000912:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000914:	2302      	movs	r3, #2
 8000916:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4618      	mov	r0, r3
 800091e:	f001 ff8f 	bl	8002840 <HAL_RCC_OscConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000928:	f000 f818 	bl	800095c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092c:	230f      	movs	r3, #15
 800092e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000930:	2303      	movs	r3, #3
 8000932:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000934:	2300      	movs	r3, #0
 8000936:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000940:	463b      	mov	r3, r7
 8000942:	2104      	movs	r1, #4
 8000944:	4618      	mov	r0, r3
 8000946:	f002 fb8f 	bl	8003068 <HAL_RCC_ClockConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000950:	f000 f804 	bl	800095c <Error_Handler>
  }
}
 8000954:	bf00      	nop
 8000956:	3758      	adds	r7, #88	@ 0x58
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
}
 8000962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <Error_Handler+0x8>

08000968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096e:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <HAL_MspInit+0x44>)
 8000970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000972:	4a0e      	ldr	r2, [pc, #56]	@ (80009ac <HAL_MspInit+0x44>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6613      	str	r3, [r2, #96]	@ 0x60
 800097a:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <HAL_MspInit+0x44>)
 800097c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	4b09      	ldr	r3, [pc, #36]	@ (80009ac <HAL_MspInit+0x44>)
 8000988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800098a:	4a08      	ldr	r2, [pc, #32]	@ (80009ac <HAL_MspInit+0x44>)
 800098c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000990:	6593      	str	r3, [r2, #88]	@ 0x58
 8000992:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <HAL_MspInit+0x44>)
 8000994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40021000 	.word	0x40021000

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <NMI_Handler+0x4>

080009b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <HardFault_Handler+0x4>

080009c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <MemManage_Handler+0x4>

080009c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <BusFault_Handler+0x4>

080009d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <UsageFault_Handler+0x4>

080009d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a06:	f000 fbeb 	bl	80011e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a14:	4802      	ldr	r0, [pc, #8]	@ (8000a20 <DMA1_Channel1_IRQHandler+0x10>)
 8000a16:	f001 fc7d 	bl	8002314 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	2000008c 	.word	0x2000008c

08000a24 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000a28:	4802      	ldr	r0, [pc, #8]	@ (8000a34 <DMA1_Channel4_IRQHandler+0x10>)
 8000a2a:	f001 fc73 	bl	8002314 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2000028c 	.word	0x2000028c

08000a38 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a3c:	4802      	ldr	r0, [pc, #8]	@ (8000a48 <DMA1_Channel5_IRQHandler+0x10>)
 8000a3e:	f001 fc69 	bl	8002314 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200002d4 	.word	0x200002d4

08000a4c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000a50:	4802      	ldr	r0, [pc, #8]	@ (8000a5c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a52:	f003 f8cd 	bl	8003bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200001b8 	.word	0x200001b8

08000a60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a64:	4802      	ldr	r0, [pc, #8]	@ (8000a70 <TIM2_IRQHandler+0x10>)
 8000a66:	f003 f8c3 	bl	8003bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200000d4 	.word	0x200000d4

08000a74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a78:	4802      	ldr	r0, [pc, #8]	@ (8000a84 <TIM6_DAC_IRQHandler+0x10>)
 8000a7a:	f003 f8b9 	bl	8003bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000120 	.word	0x20000120

08000a88 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000a8c:	4802      	ldr	r0, [pc, #8]	@ (8000a98 <TIM7_IRQHandler+0x10>)
 8000a8e:	f003 f8af 	bl	8003bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	2000016c 	.word	0x2000016c

08000a9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000aa0:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <SystemInit+0x20>)
 8000aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aa6:	4a05      	ldr	r2, [pc, #20]	@ (8000abc <SystemInit+0x20>)
 8000aa8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08e      	sub	sp, #56	@ 0x38
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ac6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
 8000aec:	611a      	str	r2, [r3, #16]
 8000aee:	615a      	str	r2, [r3, #20]
 8000af0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000af2:	4b2e      	ldr	r3, [pc, #184]	@ (8000bac <MX_TIM2_Init+0xec>)
 8000af4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000af8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8000afa:	4b2c      	ldr	r3, [pc, #176]	@ (8000bac <MX_TIM2_Init+0xec>)
 8000afc:	224f      	movs	r2, #79	@ 0x4f
 8000afe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b00:	4b2a      	ldr	r3, [pc, #168]	@ (8000bac <MX_TIM2_Init+0xec>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000b06:	4b29      	ldr	r3, [pc, #164]	@ (8000bac <MX_TIM2_Init+0xec>)
 8000b08:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0e:	4b27      	ldr	r3, [pc, #156]	@ (8000bac <MX_TIM2_Init+0xec>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b14:	4b25      	ldr	r3, [pc, #148]	@ (8000bac <MX_TIM2_Init+0xec>)
 8000b16:	2280      	movs	r2, #128	@ 0x80
 8000b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b1a:	4824      	ldr	r0, [pc, #144]	@ (8000bac <MX_TIM2_Init+0xec>)
 8000b1c:	f002 ffb0 	bl	8003a80 <HAL_TIM_Base_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000b26:	f7ff ff19 	bl	800095c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b30:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b34:	4619      	mov	r1, r3
 8000b36:	481d      	ldr	r0, [pc, #116]	@ (8000bac <MX_TIM2_Init+0xec>)
 8000b38:	f003 fa76 	bl	8004028 <HAL_TIM_ConfigClockSource>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000b42:	f7ff ff0b 	bl	800095c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b46:	4819      	ldr	r0, [pc, #100]	@ (8000bac <MX_TIM2_Init+0xec>)
 8000b48:	f002 fff1 	bl	8003b2e <HAL_TIM_PWM_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000b52:	f7ff ff03 	bl	800095c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b5e:	f107 031c 	add.w	r3, r7, #28
 8000b62:	4619      	mov	r1, r3
 8000b64:	4811      	ldr	r0, [pc, #68]	@ (8000bac <MX_TIM2_Init+0xec>)
 8000b66:	f003 fee3 	bl	8004930 <HAL_TIMEx_MasterConfigSynchronization>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000b70:	f7ff fef4 	bl	800095c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000b74:	2370      	movs	r3, #112	@ 0x70
 8000b76:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500-1;
 8000b78:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8000b7c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b86:	463b      	mov	r3, r7
 8000b88:	2204      	movs	r2, #4
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4807      	ldr	r0, [pc, #28]	@ (8000bac <MX_TIM2_Init+0xec>)
 8000b8e:	f003 f937 	bl	8003e00 <HAL_TIM_PWM_ConfigChannel>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000b98:	f7ff fee0 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b9c:	4803      	ldr	r0, [pc, #12]	@ (8000bac <MX_TIM2_Init+0xec>)
 8000b9e:	f000 f963 	bl	8000e68 <HAL_TIM_MspPostInit>

}
 8000ba2:	bf00      	nop
 8000ba4:	3738      	adds	r7, #56	@ 0x38
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200000d4 	.word	0x200000d4

08000bb0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000bc0:	4b14      	ldr	r3, [pc, #80]	@ (8000c14 <MX_TIM6_Init+0x64>)
 8000bc2:	4a15      	ldr	r2, [pc, #84]	@ (8000c18 <MX_TIM6_Init+0x68>)
 8000bc4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80-1;
 8000bc6:	4b13      	ldr	r3, [pc, #76]	@ (8000c14 <MX_TIM6_Init+0x64>)
 8000bc8:	224f      	movs	r2, #79	@ 0x4f
 8000bca:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <MX_TIM6_Init+0x64>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8000bd2:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <MX_TIM6_Init+0x64>)
 8000bd4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bd8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	@ (8000c14 <MX_TIM6_Init+0x64>)
 8000bdc:	2280      	movs	r2, #128	@ 0x80
 8000bde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000be0:	480c      	ldr	r0, [pc, #48]	@ (8000c14 <MX_TIM6_Init+0x64>)
 8000be2:	f002 ff4d 	bl	8003a80 <HAL_TIM_Base_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000bec:	f7ff feb6 	bl	800095c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4805      	ldr	r0, [pc, #20]	@ (8000c14 <MX_TIM6_Init+0x64>)
 8000bfe:	f003 fe97 	bl	8004930 <HAL_TIMEx_MasterConfigSynchronization>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000c08:	f7ff fea8 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000120 	.word	0x20000120
 8000c18:	40001000 	.word	0x40001000

08000c1c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000c2c:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <MX_TIM7_Init+0x64>)
 8000c2e:	4a15      	ldr	r2, [pc, #84]	@ (8000c84 <MX_TIM7_Init+0x68>)
 8000c30:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000c32:	4b13      	ldr	r3, [pc, #76]	@ (8000c80 <MX_TIM7_Init+0x64>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c38:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <MX_TIM7_Init+0x64>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 80-1;
 8000c3e:	4b10      	ldr	r3, [pc, #64]	@ (8000c80 <MX_TIM7_Init+0x64>)
 8000c40:	224f      	movs	r2, #79	@ 0x4f
 8000c42:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c44:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <MX_TIM7_Init+0x64>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000c4a:	480d      	ldr	r0, [pc, #52]	@ (8000c80 <MX_TIM7_Init+0x64>)
 8000c4c:	f002 ff18 	bl	8003a80 <HAL_TIM_Base_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000c56:	f7ff fe81 	bl	800095c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	4619      	mov	r1, r3
 8000c66:	4806      	ldr	r0, [pc, #24]	@ (8000c80 <MX_TIM7_Init+0x64>)
 8000c68:	f003 fe62 	bl	8004930 <HAL_TIMEx_MasterConfigSynchronization>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000c72:	f7ff fe73 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	2000016c 	.word	0x2000016c
 8000c84:	40001400 	.word	0x40001400

08000c88 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b092      	sub	sp, #72	@ 0x48
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]
 8000c9e:	615a      	str	r2, [r3, #20]
 8000ca0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ca2:	463b      	mov	r3, r7
 8000ca4:	222c      	movs	r2, #44	@ 0x2c
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f004 fbd2 	bl	8005452 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000cae:	4b30      	ldr	r3, [pc, #192]	@ (8000d70 <MX_TIM16_Init+0xe8>)
 8000cb0:	4a30      	ldr	r2, [pc, #192]	@ (8000d74 <MX_TIM16_Init+0xec>)
 8000cb2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 80-1;
 8000cb4:	4b2e      	ldr	r3, [pc, #184]	@ (8000d70 <MX_TIM16_Init+0xe8>)
 8000cb6:	224f      	movs	r2, #79	@ 0x4f
 8000cb8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cba:	4b2d      	ldr	r3, [pc, #180]	@ (8000d70 <MX_TIM16_Init+0xe8>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8000cc0:	4b2b      	ldr	r3, [pc, #172]	@ (8000d70 <MX_TIM16_Init+0xe8>)
 8000cc2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cc6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc8:	4b29      	ldr	r3, [pc, #164]	@ (8000d70 <MX_TIM16_Init+0xe8>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000cce:	4b28      	ldr	r3, [pc, #160]	@ (8000d70 <MX_TIM16_Init+0xe8>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd4:	4b26      	ldr	r3, [pc, #152]	@ (8000d70 <MX_TIM16_Init+0xe8>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000cda:	4825      	ldr	r0, [pc, #148]	@ (8000d70 <MX_TIM16_Init+0xe8>)
 8000cdc:	f002 fed0 	bl	8003a80 <HAL_TIM_Base_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000ce6:	f7ff fe39 	bl	800095c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000cea:	4821      	ldr	r0, [pc, #132]	@ (8000d70 <MX_TIM16_Init+0xe8>)
 8000cec:	f002 ff1f 	bl	8003b2e <HAL_TIM_PWM_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000cf6:	f7ff fe31 	bl	800095c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cfa:	2360      	movs	r3, #96	@ 0x60
 8000cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 500-1;
 8000cfe:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8000d02:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d04:	2300      	movs	r3, #0
 8000d06:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d10:	2300      	movs	r3, #0
 8000d12:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d14:	2300      	movs	r3, #0
 8000d16:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4813      	ldr	r0, [pc, #76]	@ (8000d70 <MX_TIM16_Init+0xe8>)
 8000d22:	f003 f86d 	bl	8003e00 <HAL_TIM_PWM_ConfigChannel>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8000d2c:	f7ff fe16 	bl	800095c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d48:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000d4e:	463b      	mov	r3, r7
 8000d50:	4619      	mov	r1, r3
 8000d52:	4807      	ldr	r0, [pc, #28]	@ (8000d70 <MX_TIM16_Init+0xe8>)
 8000d54:	f003 fe52 	bl	80049fc <HAL_TIMEx_ConfigBreakDeadTime>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 8000d5e:	f7ff fdfd 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000d62:	4803      	ldr	r0, [pc, #12]	@ (8000d70 <MX_TIM16_Init+0xe8>)
 8000d64:	f000 f880 	bl	8000e68 <HAL_TIM_MspPostInit>

}
 8000d68:	bf00      	nop
 8000d6a:	3748      	adds	r7, #72	@ 0x48
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	200001b8 	.word	0x200001b8
 8000d74:	40014400 	.word	0x40014400

08000d78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d88:	d114      	bne.n	8000db4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d8a:	4b33      	ldr	r3, [pc, #204]	@ (8000e58 <HAL_TIM_Base_MspInit+0xe0>)
 8000d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d8e:	4a32      	ldr	r2, [pc, #200]	@ (8000e58 <HAL_TIM_Base_MspInit+0xe0>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d96:	4b30      	ldr	r3, [pc, #192]	@ (8000e58 <HAL_TIM_Base_MspInit+0xe0>)
 8000d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2100      	movs	r1, #0
 8000da6:	201c      	movs	r0, #28
 8000da8:	f001 f9c5 	bl	8002136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dac:	201c      	movs	r0, #28
 8000dae:	f001 f9de 	bl	800216e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000db2:	e04c      	b.n	8000e4e <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM6)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a28      	ldr	r2, [pc, #160]	@ (8000e5c <HAL_TIM_Base_MspInit+0xe4>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d114      	bne.n	8000de8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000dbe:	4b26      	ldr	r3, [pc, #152]	@ (8000e58 <HAL_TIM_Base_MspInit+0xe0>)
 8000dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dc2:	4a25      	ldr	r2, [pc, #148]	@ (8000e58 <HAL_TIM_Base_MspInit+0xe0>)
 8000dc4:	f043 0310 	orr.w	r3, r3, #16
 8000dc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dca:	4b23      	ldr	r3, [pc, #140]	@ (8000e58 <HAL_TIM_Base_MspInit+0xe0>)
 8000dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dce:	f003 0310 	and.w	r3, r3, #16
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2036      	movs	r0, #54	@ 0x36
 8000ddc:	f001 f9ab 	bl	8002136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000de0:	2036      	movs	r0, #54	@ 0x36
 8000de2:	f001 f9c4 	bl	800216e <HAL_NVIC_EnableIRQ>
}
 8000de6:	e032      	b.n	8000e4e <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM7)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a1c      	ldr	r2, [pc, #112]	@ (8000e60 <HAL_TIM_Base_MspInit+0xe8>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d114      	bne.n	8000e1c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000df2:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <HAL_TIM_Base_MspInit+0xe0>)
 8000df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df6:	4a18      	ldr	r2, [pc, #96]	@ (8000e58 <HAL_TIM_Base_MspInit+0xe0>)
 8000df8:	f043 0320 	orr.w	r3, r3, #32
 8000dfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dfe:	4b16      	ldr	r3, [pc, #88]	@ (8000e58 <HAL_TIM_Base_MspInit+0xe0>)
 8000e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e02:	f003 0320 	and.w	r3, r3, #32
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	2037      	movs	r0, #55	@ 0x37
 8000e10:	f001 f991 	bl	8002136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000e14:	2037      	movs	r0, #55	@ 0x37
 8000e16:	f001 f9aa 	bl	800216e <HAL_NVIC_EnableIRQ>
}
 8000e1a:	e018      	b.n	8000e4e <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM16)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a10      	ldr	r2, [pc, #64]	@ (8000e64 <HAL_TIM_Base_MspInit+0xec>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d113      	bne.n	8000e4e <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000e26:	4b0c      	ldr	r3, [pc, #48]	@ (8000e58 <HAL_TIM_Base_MspInit+0xe0>)
 8000e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e2a:	4a0b      	ldr	r2, [pc, #44]	@ (8000e58 <HAL_TIM_Base_MspInit+0xe0>)
 8000e2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e30:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e32:	4b09      	ldr	r3, [pc, #36]	@ (8000e58 <HAL_TIM_Base_MspInit+0xe0>)
 8000e34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2100      	movs	r1, #0
 8000e42:	2019      	movs	r0, #25
 8000e44:	f001 f977 	bl	8002136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000e48:	2019      	movs	r0, #25
 8000e4a:	f001 f990 	bl	800216e <HAL_NVIC_EnableIRQ>
}
 8000e4e:	bf00      	nop
 8000e50:	3718      	adds	r7, #24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40001000 	.word	0x40001000
 8000e60:	40001400 	.word	0x40001400
 8000e64:	40014400 	.word	0x40014400

08000e68 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	@ 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e88:	d11c      	bne.n	8000ec4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8a:	4b21      	ldr	r3, [pc, #132]	@ (8000f10 <HAL_TIM_MspPostInit+0xa8>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8e:	4a20      	ldr	r2, [pc, #128]	@ (8000f10 <HAL_TIM_MspPostInit+0xa8>)
 8000e90:	f043 0302 	orr.w	r3, r3, #2
 8000e94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e96:	4b1e      	ldr	r3, [pc, #120]	@ (8000f10 <HAL_TIM_MspPostInit+0xa8>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = L_STEP_PWM_Pin;
 8000ea2:	2308      	movs	r3, #8
 8000ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(L_STEP_PWM_GPIO_Port, &GPIO_InitStruct);
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4815      	ldr	r0, [pc, #84]	@ (8000f14 <HAL_TIM_MspPostInit+0xac>)
 8000ebe:	f001 fad9 	bl	8002474 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000ec2:	e021      	b.n	8000f08 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM16)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a13      	ldr	r2, [pc, #76]	@ (8000f18 <HAL_TIM_MspPostInit+0xb0>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d11c      	bne.n	8000f08 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ece:	4b10      	ldr	r3, [pc, #64]	@ (8000f10 <HAL_TIM_MspPostInit+0xa8>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed2:	4a0f      	ldr	r2, [pc, #60]	@ (8000f10 <HAL_TIM_MspPostInit+0xa8>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eda:	4b0d      	ldr	r3, [pc, #52]	@ (8000f10 <HAL_TIM_MspPostInit+0xa8>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = R_STEP_PWM_Pin;
 8000ee6:	2340      	movs	r3, #64	@ 0x40
 8000ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8000ef6:	230e      	movs	r3, #14
 8000ef8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(R_STEP_PWM_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	4619      	mov	r1, r3
 8000f00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f04:	f001 fab6 	bl	8002474 <HAL_GPIO_Init>
}
 8000f08:	bf00      	nop
 8000f0a:	3728      	adds	r7, #40	@ 0x28
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40021000 	.word	0x40021000
 8000f14:	48000400 	.word	0x48000400
 8000f18:	40014400 	.word	0x40014400

08000f1c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f20:	4b14      	ldr	r3, [pc, #80]	@ (8000f74 <MX_USART1_UART_Init+0x58>)
 8000f22:	4a15      	ldr	r2, [pc, #84]	@ (8000f78 <MX_USART1_UART_Init+0x5c>)
 8000f24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f26:	4b13      	ldr	r3, [pc, #76]	@ (8000f74 <MX_USART1_UART_Init+0x58>)
 8000f28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2e:	4b11      	ldr	r3, [pc, #68]	@ (8000f74 <MX_USART1_UART_Init+0x58>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f34:	4b0f      	ldr	r3, [pc, #60]	@ (8000f74 <MX_USART1_UART_Init+0x58>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f74 <MX_USART1_UART_Init+0x58>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f40:	4b0c      	ldr	r3, [pc, #48]	@ (8000f74 <MX_USART1_UART_Init+0x58>)
 8000f42:	220c      	movs	r2, #12
 8000f44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f46:	4b0b      	ldr	r3, [pc, #44]	@ (8000f74 <MX_USART1_UART_Init+0x58>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f4c:	4b09      	ldr	r3, [pc, #36]	@ (8000f74 <MX_USART1_UART_Init+0x58>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f52:	4b08      	ldr	r3, [pc, #32]	@ (8000f74 <MX_USART1_UART_Init+0x58>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f58:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <MX_USART1_UART_Init+0x58>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f5e:	4805      	ldr	r0, [pc, #20]	@ (8000f74 <MX_USART1_UART_Init+0x58>)
 8000f60:	f003 fde2 	bl	8004b28 <HAL_UART_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f6a:	f7ff fcf7 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000204 	.word	0x20000204
 8000f78:	40013800 	.word	0x40013800

08000f7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b09e      	sub	sp, #120	@ 0x78
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f94:	f107 0310 	add.w	r3, r7, #16
 8000f98:	2254      	movs	r2, #84	@ 0x54
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f004 fa58 	bl	8005452 <memset>
  if(uartHandle->Instance==USART1)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a49      	ldr	r2, [pc, #292]	@ (80010cc <HAL_UART_MspInit+0x150>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	f040 808a 	bne.w	80010c2 <HAL_UART_MspInit+0x146>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb6:	f107 0310 	add.w	r3, r7, #16
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f002 fa78 	bl	80034b0 <HAL_RCCEx_PeriphCLKConfig>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000fc6:	f7ff fcc9 	bl	800095c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fca:	4b41      	ldr	r3, [pc, #260]	@ (80010d0 <HAL_UART_MspInit+0x154>)
 8000fcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fce:	4a40      	ldr	r2, [pc, #256]	@ (80010d0 <HAL_UART_MspInit+0x154>)
 8000fd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fd4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fd6:	4b3e      	ldr	r3, [pc, #248]	@ (80010d0 <HAL_UART_MspInit+0x154>)
 8000fd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	4b3b      	ldr	r3, [pc, #236]	@ (80010d0 <HAL_UART_MspInit+0x154>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe6:	4a3a      	ldr	r2, [pc, #232]	@ (80010d0 <HAL_UART_MspInit+0x154>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fee:	4b38      	ldr	r3, [pc, #224]	@ (80010d0 <HAL_UART_MspInit+0x154>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ffa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ffe:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001008:	2303      	movs	r3, #3
 800100a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800100c:	2307      	movs	r3, #7
 800100e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001010:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001014:	4619      	mov	r1, r3
 8001016:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800101a:	f001 fa2b 	bl	8002474 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800101e:	4b2d      	ldr	r3, [pc, #180]	@ (80010d4 <HAL_UART_MspInit+0x158>)
 8001020:	4a2d      	ldr	r2, [pc, #180]	@ (80010d8 <HAL_UART_MspInit+0x15c>)
 8001022:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8001024:	4b2b      	ldr	r3, [pc, #172]	@ (80010d4 <HAL_UART_MspInit+0x158>)
 8001026:	2202      	movs	r2, #2
 8001028:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800102a:	4b2a      	ldr	r3, [pc, #168]	@ (80010d4 <HAL_UART_MspInit+0x158>)
 800102c:	2210      	movs	r2, #16
 800102e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001030:	4b28      	ldr	r3, [pc, #160]	@ (80010d4 <HAL_UART_MspInit+0x158>)
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001036:	4b27      	ldr	r3, [pc, #156]	@ (80010d4 <HAL_UART_MspInit+0x158>)
 8001038:	2280      	movs	r2, #128	@ 0x80
 800103a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800103c:	4b25      	ldr	r3, [pc, #148]	@ (80010d4 <HAL_UART_MspInit+0x158>)
 800103e:	2200      	movs	r2, #0
 8001040:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001042:	4b24      	ldr	r3, [pc, #144]	@ (80010d4 <HAL_UART_MspInit+0x158>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001048:	4b22      	ldr	r3, [pc, #136]	@ (80010d4 <HAL_UART_MspInit+0x158>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800104e:	4b21      	ldr	r3, [pc, #132]	@ (80010d4 <HAL_UART_MspInit+0x158>)
 8001050:	2200      	movs	r2, #0
 8001052:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001054:	481f      	ldr	r0, [pc, #124]	@ (80010d4 <HAL_UART_MspInit+0x158>)
 8001056:	f001 f8a5 	bl	80021a4 <HAL_DMA_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8001060:	f7ff fc7c 	bl	800095c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a1b      	ldr	r2, [pc, #108]	@ (80010d4 <HAL_UART_MspInit+0x158>)
 8001068:	671a      	str	r2, [r3, #112]	@ 0x70
 800106a:	4a1a      	ldr	r2, [pc, #104]	@ (80010d4 <HAL_UART_MspInit+0x158>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001070:	4b1a      	ldr	r3, [pc, #104]	@ (80010dc <HAL_UART_MspInit+0x160>)
 8001072:	4a1b      	ldr	r2, [pc, #108]	@ (80010e0 <HAL_UART_MspInit+0x164>)
 8001074:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001076:	4b19      	ldr	r3, [pc, #100]	@ (80010dc <HAL_UART_MspInit+0x160>)
 8001078:	2202      	movs	r2, #2
 800107a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800107c:	4b17      	ldr	r3, [pc, #92]	@ (80010dc <HAL_UART_MspInit+0x160>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001082:	4b16      	ldr	r3, [pc, #88]	@ (80010dc <HAL_UART_MspInit+0x160>)
 8001084:	2200      	movs	r2, #0
 8001086:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001088:	4b14      	ldr	r3, [pc, #80]	@ (80010dc <HAL_UART_MspInit+0x160>)
 800108a:	2280      	movs	r2, #128	@ 0x80
 800108c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800108e:	4b13      	ldr	r3, [pc, #76]	@ (80010dc <HAL_UART_MspInit+0x160>)
 8001090:	2200      	movs	r2, #0
 8001092:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001094:	4b11      	ldr	r3, [pc, #68]	@ (80010dc <HAL_UART_MspInit+0x160>)
 8001096:	2200      	movs	r2, #0
 8001098:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800109a:	4b10      	ldr	r3, [pc, #64]	@ (80010dc <HAL_UART_MspInit+0x160>)
 800109c:	2200      	movs	r2, #0
 800109e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010a0:	4b0e      	ldr	r3, [pc, #56]	@ (80010dc <HAL_UART_MspInit+0x160>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80010a6:	480d      	ldr	r0, [pc, #52]	@ (80010dc <HAL_UART_MspInit+0x160>)
 80010a8:	f001 f87c 	bl	80021a4 <HAL_DMA_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80010b2:	f7ff fc53 	bl	800095c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a08      	ldr	r2, [pc, #32]	@ (80010dc <HAL_UART_MspInit+0x160>)
 80010ba:	675a      	str	r2, [r3, #116]	@ 0x74
 80010bc:	4a07      	ldr	r2, [pc, #28]	@ (80010dc <HAL_UART_MspInit+0x160>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80010c2:	bf00      	nop
 80010c4:	3778      	adds	r7, #120	@ 0x78
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40013800 	.word	0x40013800
 80010d0:	40021000 	.word	0x40021000
 80010d4:	2000028c 	.word	0x2000028c
 80010d8:	40020044 	.word	0x40020044
 80010dc:	200002d4 	.word	0x200002d4
 80010e0:	40020058 	.word	0x40020058

080010e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800111c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010e8:	f7ff fcd8 	bl	8000a9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010ec:	480c      	ldr	r0, [pc, #48]	@ (8001120 <LoopForever+0x6>)
  ldr r1, =_edata
 80010ee:	490d      	ldr	r1, [pc, #52]	@ (8001124 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001128 <LoopForever+0xe>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f4:	e002      	b.n	80010fc <LoopCopyDataInit>

080010f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fa:	3304      	adds	r3, #4

080010fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001100:	d3f9      	bcc.n	80010f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001102:	4a0a      	ldr	r2, [pc, #40]	@ (800112c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001104:	4c0a      	ldr	r4, [pc, #40]	@ (8001130 <LoopForever+0x16>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001108:	e001      	b.n	800110e <LoopFillZerobss>

0800110a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800110c:	3204      	adds	r2, #4

0800110e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001110:	d3fb      	bcc.n	800110a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001112:	f004 f9a7 	bl	8005464 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001116:	f7ff fbb7 	bl	8000888 <main>

0800111a <LoopForever>:

LoopForever:
    b LoopForever
 800111a:	e7fe      	b.n	800111a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800111c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001120:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001124:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001128:	0800551c 	.word	0x0800551c
  ldr r2, =_sbss
 800112c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001130:	20000320 	.word	0x20000320

08001134 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001134:	e7fe      	b.n	8001134 <ADC1_IRQHandler>

08001136 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800113c:	2300      	movs	r3, #0
 800113e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001140:	2003      	movs	r0, #3
 8001142:	f000 ffed 	bl	8002120 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001146:	200f      	movs	r0, #15
 8001148:	f000 f80e 	bl	8001168 <HAL_InitTick>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d002      	beq.n	8001158 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	71fb      	strb	r3, [r7, #7]
 8001156:	e001      	b.n	800115c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001158:	f7ff fc06 	bl	8000968 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800115c:	79fb      	ldrb	r3, [r7, #7]
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001170:	2300      	movs	r3, #0
 8001172:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001174:	4b17      	ldr	r3, [pc, #92]	@ (80011d4 <HAL_InitTick+0x6c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d023      	beq.n	80011c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800117c:	4b16      	ldr	r3, [pc, #88]	@ (80011d8 <HAL_InitTick+0x70>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <HAL_InitTick+0x6c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4619      	mov	r1, r3
 8001186:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800118a:	fbb3 f3f1 	udiv	r3, r3, r1
 800118e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f000 fff9 	bl	800218a <HAL_SYSTICK_Config>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d10f      	bne.n	80011be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b0f      	cmp	r3, #15
 80011a2:	d809      	bhi.n	80011b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a4:	2200      	movs	r2, #0
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f000 ffc3 	bl	8002136 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011b0:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <HAL_InitTick+0x74>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	e007      	b.n	80011c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	73fb      	strb	r3, [r7, #15]
 80011bc:	e004      	b.n	80011c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	73fb      	strb	r3, [r7, #15]
 80011c2:	e001      	b.n	80011c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000008 	.word	0x20000008
 80011d8:	20000000 	.word	0x20000000
 80011dc:	20000004 	.word	0x20000004

080011e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011e4:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <HAL_IncTick+0x20>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <HAL_IncTick+0x24>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	4a04      	ldr	r2, [pc, #16]	@ (8001204 <HAL_IncTick+0x24>)
 80011f2:	6013      	str	r3, [r2, #0]
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000008 	.word	0x20000008
 8001204:	2000031c 	.word	0x2000031c

08001208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return uwTick;
 800120c:	4b03      	ldr	r3, [pc, #12]	@ (800121c <HAL_GetTick+0x14>)
 800120e:	681b      	ldr	r3, [r3, #0]
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	2000031c 	.word	0x2000031c

08001220 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	431a      	orrs	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	609a      	str	r2, [r3, #8]
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
 800124e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	431a      	orrs	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	609a      	str	r2, [r3, #8]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800127c:	4618      	mov	r0, r3
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001288:	b480      	push	{r7}
 800128a:	b087      	sub	sp, #28
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
 8001294:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	3360      	adds	r3, #96	@ 0x60
 800129a:	461a      	mov	r2, r3
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b08      	ldr	r3, [pc, #32]	@ (80012cc <LL_ADC_SetOffset+0x44>)
 80012aa:	4013      	ands	r3, r2
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	430a      	orrs	r2, r1
 80012b6:	4313      	orrs	r3, r2
 80012b8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80012c0:	bf00      	nop
 80012c2:	371c      	adds	r7, #28
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	03fff000 	.word	0x03fff000

080012d0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	3360      	adds	r3, #96	@ 0x60
 80012de:	461a      	mov	r2, r3
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b087      	sub	sp, #28
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	3360      	adds	r3, #96	@ 0x60
 800130c:	461a      	mov	r2, r3
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	431a      	orrs	r2, r3
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001326:	bf00      	nop
 8001328:	371c      	adds	r7, #28
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001332:	b480      	push	{r7}
 8001334:	b087      	sub	sp, #28
 8001336:	af00      	add	r7, sp, #0
 8001338:	60f8      	str	r0, [r7, #12]
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	3330      	adds	r3, #48	@ 0x30
 8001342:	461a      	mov	r2, r3
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	0a1b      	lsrs	r3, r3, #8
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	f003 030c 	and.w	r3, r3, #12
 800134e:	4413      	add	r3, r2
 8001350:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	f003 031f 	and.w	r3, r3, #31
 800135c:	211f      	movs	r1, #31
 800135e:	fa01 f303 	lsl.w	r3, r1, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	401a      	ands	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	0e9b      	lsrs	r3, r3, #26
 800136a:	f003 011f 	and.w	r1, r3, #31
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	f003 031f 	and.w	r3, r3, #31
 8001374:	fa01 f303 	lsl.w	r3, r1, r3
 8001378:	431a      	orrs	r2, r3
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800137e:	bf00      	nop
 8001380:	371c      	adds	r7, #28
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800138a:	b480      	push	{r7}
 800138c:	b087      	sub	sp, #28
 800138e:	af00      	add	r7, sp, #0
 8001390:	60f8      	str	r0, [r7, #12]
 8001392:	60b9      	str	r1, [r7, #8]
 8001394:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	3314      	adds	r3, #20
 800139a:	461a      	mov	r2, r3
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	0e5b      	lsrs	r3, r3, #25
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	4413      	add	r3, r2
 80013a8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	0d1b      	lsrs	r3, r3, #20
 80013b2:	f003 031f 	and.w	r3, r3, #31
 80013b6:	2107      	movs	r1, #7
 80013b8:	fa01 f303 	lsl.w	r3, r1, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	401a      	ands	r2, r3
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	0d1b      	lsrs	r3, r3, #20
 80013c4:	f003 031f 	and.w	r3, r3, #31
 80013c8:	6879      	ldr	r1, [r7, #4]
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	431a      	orrs	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013d4:	bf00      	nop
 80013d6:	371c      	adds	r7, #28
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013f8:	43db      	mvns	r3, r3
 80013fa:	401a      	ands	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f003 0318 	and.w	r3, r3, #24
 8001402:	4908      	ldr	r1, [pc, #32]	@ (8001424 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001404:	40d9      	lsrs	r1, r3
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	400b      	ands	r3, r1
 800140a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800140e:	431a      	orrs	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001416:	bf00      	nop
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	0007ffff 	.word	0x0007ffff

08001428 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001438:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	6093      	str	r3, [r2, #8]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800145c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001460:	d101      	bne.n	8001466 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001462:	2301      	movs	r3, #1
 8001464:	e000      	b.n	8001468 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001484:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001488:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80014b0:	d101      	bne.n	80014b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014b2:	2301      	movs	r3, #1
 80014b4:	e000      	b.n	80014b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d101      	bne.n	80014dc <LL_ADC_IsEnabled+0x18>
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <LL_ADC_IsEnabled+0x1a>
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	d101      	bne.n	8001502 <LL_ADC_REG_IsConversionOngoing+0x18>
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 0308 	and.w	r3, r3, #8
 8001520:	2b08      	cmp	r3, #8
 8001522:	d101      	bne.n	8001528 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001524:	2301      	movs	r3, #1
 8001526:	e000      	b.n	800152a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e126      	b.n	80017a0 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800155c:	2b00      	cmp	r3, #0
 800155e:	d109      	bne.n	8001574 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff f851 	bl	8000608 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff67 	bl	800144c <LL_ADC_IsDeepPowerDownEnabled>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d004      	beq.n	800158e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff4d 	bl	8001428 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff ff82 	bl	800149c <LL_ADC_IsInternalRegulatorEnabled>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d115      	bne.n	80015ca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff ff66 	bl	8001474 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015a8:	4b7f      	ldr	r3, [pc, #508]	@ (80017a8 <HAL_ADC_Init+0x270>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	099b      	lsrs	r3, r3, #6
 80015ae:	4a7f      	ldr	r2, [pc, #508]	@ (80017ac <HAL_ADC_Init+0x274>)
 80015b0:	fba2 2303 	umull	r2, r3, r2, r3
 80015b4:	099b      	lsrs	r3, r3, #6
 80015b6:	3301      	adds	r3, #1
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015bc:	e002      	b.n	80015c4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f9      	bne.n	80015be <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff ff64 	bl	800149c <LL_ADC_IsInternalRegulatorEnabled>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10d      	bne.n	80015f6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015de:	f043 0210 	orr.w	r2, r3, #16
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ea:	f043 0201 	orr.w	r2, r3, #1
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff ff75 	bl	80014ea <LL_ADC_REG_IsConversionOngoing>
 8001600:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001606:	f003 0310 	and.w	r3, r3, #16
 800160a:	2b00      	cmp	r3, #0
 800160c:	f040 80bf 	bne.w	800178e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	2b00      	cmp	r3, #0
 8001614:	f040 80bb 	bne.w	800178e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800161c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001620:	f043 0202 	orr.w	r2, r3, #2
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff49 	bl	80014c4 <LL_ADC_IsEnabled>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d10b      	bne.n	8001650 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001638:	485d      	ldr	r0, [pc, #372]	@ (80017b0 <HAL_ADC_Init+0x278>)
 800163a:	f7ff ff43 	bl	80014c4 <LL_ADC_IsEnabled>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d105      	bne.n	8001650 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	4619      	mov	r1, r3
 800164a:	485a      	ldr	r0, [pc, #360]	@ (80017b4 <HAL_ADC_Init+0x27c>)
 800164c:	f7ff fde8 	bl	8001220 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	7e5b      	ldrb	r3, [r3, #25]
 8001654:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800165a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001660:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001666:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800166e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 3020 	ldrb.w	r3, [r3, #32]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d106      	bne.n	800168c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001682:	3b01      	subs	r3, #1
 8001684:	045b      	lsls	r3, r3, #17
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001690:	2b00      	cmp	r3, #0
 8001692:	d009      	beq.n	80016a8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001698:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68da      	ldr	r2, [r3, #12]
 80016ae:	4b42      	ldr	r3, [pc, #264]	@ (80017b8 <HAL_ADC_Init+0x280>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6812      	ldr	r2, [r2, #0]
 80016b6:	69b9      	ldr	r1, [r7, #24]
 80016b8:	430b      	orrs	r3, r1
 80016ba:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff25 	bl	8001510 <LL_ADC_INJ_IsConversionOngoing>
 80016c6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d13d      	bne.n	800174a <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d13a      	bne.n	800174a <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016d8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80016e0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80016f0:	f023 0302 	bic.w	r3, r3, #2
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	6812      	ldr	r2, [r2, #0]
 80016f8:	69b9      	ldr	r1, [r7, #24]
 80016fa:	430b      	orrs	r3, r1
 80016fc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001704:	2b01      	cmp	r3, #1
 8001706:	d118      	bne.n	800173a <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001712:	f023 0304 	bic.w	r3, r3, #4
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800171e:	4311      	orrs	r1, r2
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001724:	4311      	orrs	r1, r2
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800172a:	430a      	orrs	r2, r1
 800172c:	431a      	orrs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f042 0201 	orr.w	r2, r2, #1
 8001736:	611a      	str	r2, [r3, #16]
 8001738:	e007      	b.n	800174a <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	691a      	ldr	r2, [r3, #16]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 0201 	bic.w	r2, r2, #1
 8001748:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d10c      	bne.n	800176c <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001758:	f023 010f 	bic.w	r1, r3, #15
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69db      	ldr	r3, [r3, #28]
 8001760:	1e5a      	subs	r2, r3, #1
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	430a      	orrs	r2, r1
 8001768:	631a      	str	r2, [r3, #48]	@ 0x30
 800176a:	e007      	b.n	800177c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 020f 	bic.w	r2, r2, #15
 800177a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001780:	f023 0303 	bic.w	r3, r3, #3
 8001784:	f043 0201 	orr.w	r2, r3, #1
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	655a      	str	r2, [r3, #84]	@ 0x54
 800178c:	e007      	b.n	800179e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001792:	f043 0210 	orr.w	r2, r3, #16
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800179e:	7ffb      	ldrb	r3, [r7, #31]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3720      	adds	r7, #32
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20000000 	.word	0x20000000
 80017ac:	053e2d63 	.word	0x053e2d63
 80017b0:	50040000 	.word	0x50040000
 80017b4:	50040300 	.word	0x50040300
 80017b8:	fff0c007 	.word	0xfff0c007

080017bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b0b6      	sub	sp, #216	@ 0xd8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d101      	bne.n	80017de <HAL_ADC_ConfigChannel+0x22>
 80017da:	2302      	movs	r3, #2
 80017dc:	e3bb      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x79a>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fe7d 	bl	80014ea <LL_ADC_REG_IsConversionOngoing>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f040 83a0 	bne.w	8001f38 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b05      	cmp	r3, #5
 8001806:	d824      	bhi.n	8001852 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	3b02      	subs	r3, #2
 800180e:	2b03      	cmp	r3, #3
 8001810:	d81b      	bhi.n	800184a <HAL_ADC_ConfigChannel+0x8e>
 8001812:	a201      	add	r2, pc, #4	@ (adr r2, 8001818 <HAL_ADC_ConfigChannel+0x5c>)
 8001814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001818:	08001829 	.word	0x08001829
 800181c:	08001831 	.word	0x08001831
 8001820:	08001839 	.word	0x08001839
 8001824:	08001841 	.word	0x08001841
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001828:	230c      	movs	r3, #12
 800182a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800182e:	e010      	b.n	8001852 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001830:	2312      	movs	r3, #18
 8001832:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001836:	e00c      	b.n	8001852 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001838:	2318      	movs	r3, #24
 800183a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800183e:	e008      	b.n	8001852 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001840:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001844:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001848:	e003      	b.n	8001852 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800184a:	2306      	movs	r3, #6
 800184c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001850:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6818      	ldr	r0, [r3, #0]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	461a      	mov	r2, r3
 800185c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001860:	f7ff fd67 	bl	8001332 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fe3e 	bl	80014ea <LL_ADC_REG_IsConversionOngoing>
 800186e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fe4a 	bl	8001510 <LL_ADC_INJ_IsConversionOngoing>
 800187c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001880:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001884:	2b00      	cmp	r3, #0
 8001886:	f040 81a4 	bne.w	8001bd2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800188a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800188e:	2b00      	cmp	r3, #0
 8001890:	f040 819f 	bne.w	8001bd2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6818      	ldr	r0, [r3, #0]
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	6819      	ldr	r1, [r3, #0]
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	461a      	mov	r2, r3
 80018a2:	f7ff fd72 	bl	800138a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	695a      	ldr	r2, [r3, #20]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	08db      	lsrs	r3, r3, #3
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	2b04      	cmp	r3, #4
 80018c6:	d00a      	beq.n	80018de <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6818      	ldr	r0, [r3, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	6919      	ldr	r1, [r3, #16]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80018d8:	f7ff fcd6 	bl	8001288 <LL_ADC_SetOffset>
 80018dc:	e179      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2100      	movs	r1, #0
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fcf3 	bl	80012d0 <LL_ADC_GetOffsetChannel>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d10a      	bne.n	800190a <HAL_ADC_ConfigChannel+0x14e>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fce8 	bl	80012d0 <LL_ADC_GetOffsetChannel>
 8001900:	4603      	mov	r3, r0
 8001902:	0e9b      	lsrs	r3, r3, #26
 8001904:	f003 021f 	and.w	r2, r3, #31
 8001908:	e01e      	b.n	8001948 <HAL_ADC_ConfigChannel+0x18c>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2100      	movs	r1, #0
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fcdd 	bl	80012d0 <LL_ADC_GetOffsetChannel>
 8001916:	4603      	mov	r3, r0
 8001918:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001920:	fa93 f3a3 	rbit	r3, r3
 8001924:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001928:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800192c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001930:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001938:	2320      	movs	r3, #32
 800193a:	e004      	b.n	8001946 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800193c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001940:	fab3 f383 	clz	r3, r3
 8001944:	b2db      	uxtb	r3, r3
 8001946:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001950:	2b00      	cmp	r3, #0
 8001952:	d105      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x1a4>
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	0e9b      	lsrs	r3, r3, #26
 800195a:	f003 031f 	and.w	r3, r3, #31
 800195e:	e018      	b.n	8001992 <HAL_ADC_ConfigChannel+0x1d6>
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001968:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800196c:	fa93 f3a3 	rbit	r3, r3
 8001970:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001974:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001978:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800197c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001984:	2320      	movs	r3, #32
 8001986:	e004      	b.n	8001992 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001988:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800198c:	fab3 f383 	clz	r3, r3
 8001990:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001992:	429a      	cmp	r2, r3
 8001994:	d106      	bne.n	80019a4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2200      	movs	r2, #0
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fcac 	bl	80012fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2101      	movs	r1, #1
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fc90 	bl	80012d0 <LL_ADC_GetOffsetChannel>
 80019b0:	4603      	mov	r3, r0
 80019b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10a      	bne.n	80019d0 <HAL_ADC_ConfigChannel+0x214>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2101      	movs	r1, #1
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fc85 	bl	80012d0 <LL_ADC_GetOffsetChannel>
 80019c6:	4603      	mov	r3, r0
 80019c8:	0e9b      	lsrs	r3, r3, #26
 80019ca:	f003 021f 	and.w	r2, r3, #31
 80019ce:	e01e      	b.n	8001a0e <HAL_ADC_ConfigChannel+0x252>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2101      	movs	r1, #1
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fc7a 	bl	80012d0 <LL_ADC_GetOffsetChannel>
 80019dc:	4603      	mov	r3, r0
 80019de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80019e6:	fa93 f3a3 	rbit	r3, r3
 80019ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80019ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80019f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80019f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80019fe:	2320      	movs	r3, #32
 8001a00:	e004      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001a02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001a06:	fab3 f383 	clz	r3, r3
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d105      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x26a>
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	0e9b      	lsrs	r3, r3, #26
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	e018      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x29c>
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001a32:	fa93 f3a3 	rbit	r3, r3
 8001a36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001a3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a3e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001a42:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001a4a:	2320      	movs	r3, #32
 8001a4c:	e004      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001a4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a52:	fab3 f383 	clz	r3, r3
 8001a56:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d106      	bne.n	8001a6a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2200      	movs	r2, #0
 8001a62:	2101      	movs	r1, #1
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fc49 	bl	80012fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2102      	movs	r1, #2
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fc2d 	bl	80012d0 <LL_ADC_GetOffsetChannel>
 8001a76:	4603      	mov	r3, r0
 8001a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d10a      	bne.n	8001a96 <HAL_ADC_ConfigChannel+0x2da>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2102      	movs	r1, #2
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fc22 	bl	80012d0 <LL_ADC_GetOffsetChannel>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	0e9b      	lsrs	r3, r3, #26
 8001a90:	f003 021f 	and.w	r2, r3, #31
 8001a94:	e01e      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x318>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2102      	movs	r1, #2
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fc17 	bl	80012d0 <LL_ADC_GetOffsetChannel>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001aac:	fa93 f3a3 	rbit	r3, r3
 8001ab0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001ab4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ab8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001abc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001ac4:	2320      	movs	r3, #32
 8001ac6:	e004      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001ac8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001acc:	fab3 f383 	clz	r3, r3
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d105      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x330>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	0e9b      	lsrs	r3, r3, #26
 8001ae6:	f003 031f 	and.w	r3, r3, #31
 8001aea:	e014      	b.n	8001b16 <HAL_ADC_ConfigChannel+0x35a>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001af4:	fa93 f3a3 	rbit	r3, r3
 8001af8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001afa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001afc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001b00:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001b08:	2320      	movs	r3, #32
 8001b0a:	e004      	b.n	8001b16 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001b0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b10:	fab3 f383 	clz	r3, r3
 8001b14:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d106      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2102      	movs	r1, #2
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff fbea 	bl	80012fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2103      	movs	r1, #3
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fbce 	bl	80012d0 <LL_ADC_GetOffsetChannel>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d10a      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x398>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2103      	movs	r1, #3
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fbc3 	bl	80012d0 <LL_ADC_GetOffsetChannel>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	0e9b      	lsrs	r3, r3, #26
 8001b4e:	f003 021f 	and.w	r2, r3, #31
 8001b52:	e017      	b.n	8001b84 <HAL_ADC_ConfigChannel+0x3c8>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2103      	movs	r1, #3
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fbb8 	bl	80012d0 <LL_ADC_GetOffsetChannel>
 8001b60:	4603      	mov	r3, r0
 8001b62:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b66:	fa93 f3a3 	rbit	r3, r3
 8001b6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001b6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b6e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001b70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001b76:	2320      	movs	r3, #32
 8001b78:	e003      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001b7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b7c:	fab3 f383 	clz	r3, r3
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d105      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x3e0>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	0e9b      	lsrs	r3, r3, #26
 8001b96:	f003 031f 	and.w	r3, r3, #31
 8001b9a:	e011      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x404>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ba4:	fa93 f3a3 	rbit	r3, r3
 8001ba8:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001baa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001bac:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001bae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001bb4:	2320      	movs	r3, #32
 8001bb6:	e003      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001bb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001bba:	fab3 f383 	clz	r3, r3
 8001bbe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d106      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2103      	movs	r1, #3
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff fb95 	bl	80012fc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fc74 	bl	80014c4 <LL_ADC_IsEnabled>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f040 8140 	bne.w	8001e64 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6818      	ldr	r0, [r3, #0]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	6819      	ldr	r1, [r3, #0]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	f7ff fbf5 	bl	80013e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	4a8f      	ldr	r2, [pc, #572]	@ (8001e38 <HAL_ADC_ConfigChannel+0x67c>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	f040 8131 	bne.w	8001e64 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10b      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x46e>
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	0e9b      	lsrs	r3, r3, #26
 8001c18:	3301      	adds	r3, #1
 8001c1a:	f003 031f 	and.w	r3, r3, #31
 8001c1e:	2b09      	cmp	r3, #9
 8001c20:	bf94      	ite	ls
 8001c22:	2301      	movls	r3, #1
 8001c24:	2300      	movhi	r3, #0
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	e019      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x4a2>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c32:	fa93 f3a3 	rbit	r3, r3
 8001c36:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001c38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001c3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001c42:	2320      	movs	r3, #32
 8001c44:	e003      	b.n	8001c4e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001c46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c48:	fab3 f383 	clz	r3, r3
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	3301      	adds	r3, #1
 8001c50:	f003 031f 	and.w	r3, r3, #31
 8001c54:	2b09      	cmp	r3, #9
 8001c56:	bf94      	ite	ls
 8001c58:	2301      	movls	r3, #1
 8001c5a:	2300      	movhi	r3, #0
 8001c5c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d079      	beq.n	8001d56 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d107      	bne.n	8001c7e <HAL_ADC_ConfigChannel+0x4c2>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	0e9b      	lsrs	r3, r3, #26
 8001c74:	3301      	adds	r3, #1
 8001c76:	069b      	lsls	r3, r3, #26
 8001c78:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c7c:	e015      	b.n	8001caa <HAL_ADC_ConfigChannel+0x4ee>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c86:	fa93 f3a3 	rbit	r3, r3
 8001c8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001c8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c8e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001c90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001c96:	2320      	movs	r3, #32
 8001c98:	e003      	b.n	8001ca2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001c9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c9c:	fab3 f383 	clz	r3, r3
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	069b      	lsls	r3, r3, #26
 8001ca6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d109      	bne.n	8001cca <HAL_ADC_ConfigChannel+0x50e>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	0e9b      	lsrs	r3, r3, #26
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	f003 031f 	and.w	r3, r3, #31
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc8:	e017      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x53e>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cd2:	fa93 f3a3 	rbit	r3, r3
 8001cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001cd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cda:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001cdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001ce2:	2320      	movs	r3, #32
 8001ce4:	e003      	b.n	8001cee <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001ce6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ce8:	fab3 f383 	clz	r3, r3
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	3301      	adds	r3, #1
 8001cf0:	f003 031f 	and.w	r3, r3, #31
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfa:	ea42 0103 	orr.w	r1, r2, r3
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10a      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x564>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	0e9b      	lsrs	r3, r3, #26
 8001d10:	3301      	adds	r3, #1
 8001d12:	f003 021f 	and.w	r2, r3, #31
 8001d16:	4613      	mov	r3, r2
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	4413      	add	r3, r2
 8001d1c:	051b      	lsls	r3, r3, #20
 8001d1e:	e018      	b.n	8001d52 <HAL_ADC_ConfigChannel+0x596>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d28:	fa93 f3a3 	rbit	r3, r3
 8001d2c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d30:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001d38:	2320      	movs	r3, #32
 8001d3a:	e003      	b.n	8001d44 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d3e:	fab3 f383 	clz	r3, r3
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	3301      	adds	r3, #1
 8001d46:	f003 021f 	and.w	r2, r3, #31
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	4413      	add	r3, r2
 8001d50:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d52:	430b      	orrs	r3, r1
 8001d54:	e081      	b.n	8001e5a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d107      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x5b6>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	0e9b      	lsrs	r3, r3, #26
 8001d68:	3301      	adds	r3, #1
 8001d6a:	069b      	lsls	r3, r3, #26
 8001d6c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d70:	e015      	b.n	8001d9e <HAL_ADC_ConfigChannel+0x5e2>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d7a:	fa93 f3a3 	rbit	r3, r3
 8001d7e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001d8a:	2320      	movs	r3, #32
 8001d8c:	e003      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d90:	fab3 f383 	clz	r3, r3
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	3301      	adds	r3, #1
 8001d98:	069b      	lsls	r3, r3, #26
 8001d9a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d109      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x602>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	0e9b      	lsrs	r3, r3, #26
 8001db0:	3301      	adds	r3, #1
 8001db2:	f003 031f 	and.w	r3, r3, #31
 8001db6:	2101      	movs	r1, #1
 8001db8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbc:	e017      	b.n	8001dee <HAL_ADC_ConfigChannel+0x632>
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	61bb      	str	r3, [r7, #24]
  return result;
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001dd0:	6a3b      	ldr	r3, [r7, #32]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001dd6:	2320      	movs	r3, #32
 8001dd8:	e003      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001dda:	6a3b      	ldr	r3, [r7, #32]
 8001ddc:	fab3 f383 	clz	r3, r3
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	3301      	adds	r3, #1
 8001de4:	f003 031f 	and.w	r3, r3, #31
 8001de8:	2101      	movs	r1, #1
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	ea42 0103 	orr.w	r1, r2, r3
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10d      	bne.n	8001e1a <HAL_ADC_ConfigChannel+0x65e>
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	0e9b      	lsrs	r3, r3, #26
 8001e04:	3301      	adds	r3, #1
 8001e06:	f003 021f 	and.w	r2, r3, #31
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	4413      	add	r3, r2
 8001e10:	3b1e      	subs	r3, #30
 8001e12:	051b      	lsls	r3, r3, #20
 8001e14:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e18:	e01e      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x69c>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	fa93 f3a3 	rbit	r3, r3
 8001e26:	60fb      	str	r3, [r7, #12]
  return result;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d104      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001e32:	2320      	movs	r3, #32
 8001e34:	e006      	b.n	8001e44 <HAL_ADC_ConfigChannel+0x688>
 8001e36:	bf00      	nop
 8001e38:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	fab3 f383 	clz	r3, r3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	3301      	adds	r3, #1
 8001e46:	f003 021f 	and.w	r2, r3, #31
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4413      	add	r3, r2
 8001e50:	3b1e      	subs	r3, #30
 8001e52:	051b      	lsls	r3, r3, #20
 8001e54:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e58:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f7ff fa93 	bl	800138a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4b3d      	ldr	r3, [pc, #244]	@ (8001f60 <HAL_ADC_ConfigChannel+0x7a4>)
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d06c      	beq.n	8001f4a <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e70:	483c      	ldr	r0, [pc, #240]	@ (8001f64 <HAL_ADC_ConfigChannel+0x7a8>)
 8001e72:	f7ff f9fb 	bl	800126c <LL_ADC_GetCommonPathInternalCh>
 8001e76:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a3a      	ldr	r2, [pc, #232]	@ (8001f68 <HAL_ADC_ConfigChannel+0x7ac>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d127      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d121      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a35      	ldr	r2, [pc, #212]	@ (8001f6c <HAL_ADC_ConfigChannel+0x7b0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d157      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e9e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	482f      	ldr	r0, [pc, #188]	@ (8001f64 <HAL_ADC_ConfigChannel+0x7a8>)
 8001ea6:	f7ff f9ce 	bl	8001246 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001eaa:	4b31      	ldr	r3, [pc, #196]	@ (8001f70 <HAL_ADC_ConfigChannel+0x7b4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	099b      	lsrs	r3, r3, #6
 8001eb0:	4a30      	ldr	r2, [pc, #192]	@ (8001f74 <HAL_ADC_ConfigChannel+0x7b8>)
 8001eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb6:	099b      	lsrs	r3, r3, #6
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	4613      	mov	r3, r2
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	4413      	add	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001ec4:	e002      	b.n	8001ecc <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f9      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ed2:	e03a      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a27      	ldr	r2, [pc, #156]	@ (8001f78 <HAL_ADC_ConfigChannel+0x7bc>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d113      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ede:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ee2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10d      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a1f      	ldr	r2, [pc, #124]	@ (8001f6c <HAL_ADC_ConfigChannel+0x7b0>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d12a      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ef4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ef8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001efc:	4619      	mov	r1, r3
 8001efe:	4819      	ldr	r0, [pc, #100]	@ (8001f64 <HAL_ADC_ConfigChannel+0x7a8>)
 8001f00:	f7ff f9a1 	bl	8001246 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f04:	e021      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a1c      	ldr	r2, [pc, #112]	@ (8001f7c <HAL_ADC_ConfigChannel+0x7c0>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d11c      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d116      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a12      	ldr	r2, [pc, #72]	@ (8001f6c <HAL_ADC_ConfigChannel+0x7b0>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d111      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f2a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f2e:	4619      	mov	r1, r3
 8001f30:	480c      	ldr	r0, [pc, #48]	@ (8001f64 <HAL_ADC_ConfigChannel+0x7a8>)
 8001f32:	f7ff f988 	bl	8001246 <LL_ADC_SetCommonPathInternalCh>
 8001f36:	e008      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f3c:	f043 0220 	orr.w	r2, r3, #32
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001f52:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	37d8      	adds	r7, #216	@ 0xd8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	80080000 	.word	0x80080000
 8001f64:	50040300 	.word	0x50040300
 8001f68:	c7520000 	.word	0xc7520000
 8001f6c:	50040000 	.word	0x50040000
 8001f70:	20000000 	.word	0x20000000
 8001f74:	053e2d63 	.word	0x053e2d63
 8001f78:	cb840000 	.word	0xcb840000
 8001f7c:	80000001 	.word	0x80000001

08001f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f90:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fb2:	4a04      	ldr	r2, [pc, #16]	@ (8001fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	60d3      	str	r3, [r2, #12]
}
 8001fb8:	bf00      	nop
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fcc:	4b04      	ldr	r3, [pc, #16]	@ (8001fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	0a1b      	lsrs	r3, r3, #8
 8001fd2:	f003 0307 	and.w	r3, r3, #7
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	db0b      	blt.n	800200e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	f003 021f 	and.w	r2, r3, #31
 8001ffc:	4907      	ldr	r1, [pc, #28]	@ (800201c <__NVIC_EnableIRQ+0x38>)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	095b      	lsrs	r3, r3, #5
 8002004:	2001      	movs	r0, #1
 8002006:	fa00 f202 	lsl.w	r2, r0, r2
 800200a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	e000e100 	.word	0xe000e100

08002020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	6039      	str	r1, [r7, #0]
 800202a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800202c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002030:	2b00      	cmp	r3, #0
 8002032:	db0a      	blt.n	800204a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	b2da      	uxtb	r2, r3
 8002038:	490c      	ldr	r1, [pc, #48]	@ (800206c <__NVIC_SetPriority+0x4c>)
 800203a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203e:	0112      	lsls	r2, r2, #4
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	440b      	add	r3, r1
 8002044:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002048:	e00a      	b.n	8002060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	b2da      	uxtb	r2, r3
 800204e:	4908      	ldr	r1, [pc, #32]	@ (8002070 <__NVIC_SetPriority+0x50>)
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	3b04      	subs	r3, #4
 8002058:	0112      	lsls	r2, r2, #4
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	440b      	add	r3, r1
 800205e:	761a      	strb	r2, [r3, #24]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000e100 	.word	0xe000e100
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002074:	b480      	push	{r7}
 8002076:	b089      	sub	sp, #36	@ 0x24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f1c3 0307 	rsb	r3, r3, #7
 800208e:	2b04      	cmp	r3, #4
 8002090:	bf28      	it	cs
 8002092:	2304      	movcs	r3, #4
 8002094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3304      	adds	r3, #4
 800209a:	2b06      	cmp	r3, #6
 800209c:	d902      	bls.n	80020a4 <NVIC_EncodePriority+0x30>
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3b03      	subs	r3, #3
 80020a2:	e000      	b.n	80020a6 <NVIC_EncodePriority+0x32>
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a8:	f04f 32ff 	mov.w	r2, #4294967295
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43da      	mvns	r2, r3
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	401a      	ands	r2, r3
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020bc:	f04f 31ff 	mov.w	r1, #4294967295
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	fa01 f303 	lsl.w	r3, r1, r3
 80020c6:	43d9      	mvns	r1, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020cc:	4313      	orrs	r3, r2
         );
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3724      	adds	r7, #36	@ 0x24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
	...

080020dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020ec:	d301      	bcc.n	80020f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ee:	2301      	movs	r3, #1
 80020f0:	e00f      	b.n	8002112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020f2:	4a0a      	ldr	r2, [pc, #40]	@ (800211c <SysTick_Config+0x40>)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020fa:	210f      	movs	r1, #15
 80020fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002100:	f7ff ff8e 	bl	8002020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002104:	4b05      	ldr	r3, [pc, #20]	@ (800211c <SysTick_Config+0x40>)
 8002106:	2200      	movs	r2, #0
 8002108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800210a:	4b04      	ldr	r3, [pc, #16]	@ (800211c <SysTick_Config+0x40>)
 800210c:	2207      	movs	r2, #7
 800210e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	e000e010 	.word	0xe000e010

08002120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff ff29 	bl	8001f80 <__NVIC_SetPriorityGrouping>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b086      	sub	sp, #24
 800213a:	af00      	add	r7, sp, #0
 800213c:	4603      	mov	r3, r0
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	607a      	str	r2, [r7, #4]
 8002142:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002148:	f7ff ff3e 	bl	8001fc8 <__NVIC_GetPriorityGrouping>
 800214c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	6978      	ldr	r0, [r7, #20]
 8002154:	f7ff ff8e 	bl	8002074 <NVIC_EncodePriority>
 8002158:	4602      	mov	r2, r0
 800215a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800215e:	4611      	mov	r1, r2
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ff5d 	bl	8002020 <__NVIC_SetPriority>
}
 8002166:	bf00      	nop
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	4603      	mov	r3, r0
 8002176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff31 	bl	8001fe4 <__NVIC_EnableIRQ>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff ffa2 	bl	80020dc <SysTick_Config>
 8002198:	4603      	mov	r3, r0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e098      	b.n	80022e8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	461a      	mov	r2, r3
 80021bc:	4b4d      	ldr	r3, [pc, #308]	@ (80022f4 <HAL_DMA_Init+0x150>)
 80021be:	429a      	cmp	r2, r3
 80021c0:	d80f      	bhi.n	80021e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	4b4b      	ldr	r3, [pc, #300]	@ (80022f8 <HAL_DMA_Init+0x154>)
 80021ca:	4413      	add	r3, r2
 80021cc:	4a4b      	ldr	r2, [pc, #300]	@ (80022fc <HAL_DMA_Init+0x158>)
 80021ce:	fba2 2303 	umull	r2, r3, r2, r3
 80021d2:	091b      	lsrs	r3, r3, #4
 80021d4:	009a      	lsls	r2, r3, #2
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a48      	ldr	r2, [pc, #288]	@ (8002300 <HAL_DMA_Init+0x15c>)
 80021de:	641a      	str	r2, [r3, #64]	@ 0x40
 80021e0:	e00e      	b.n	8002200 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	4b46      	ldr	r3, [pc, #280]	@ (8002304 <HAL_DMA_Init+0x160>)
 80021ea:	4413      	add	r3, r2
 80021ec:	4a43      	ldr	r2, [pc, #268]	@ (80022fc <HAL_DMA_Init+0x158>)
 80021ee:	fba2 2303 	umull	r2, r3, r2, r3
 80021f2:	091b      	lsrs	r3, r3, #4
 80021f4:	009a      	lsls	r2, r3, #2
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a42      	ldr	r2, [pc, #264]	@ (8002308 <HAL_DMA_Init+0x164>)
 80021fe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2202      	movs	r2, #2
 8002204:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800221a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002224:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002230:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800223c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	4313      	orrs	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800225a:	d039      	beq.n	80022d0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002260:	4a27      	ldr	r2, [pc, #156]	@ (8002300 <HAL_DMA_Init+0x15c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d11a      	bne.n	800229c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002266:	4b29      	ldr	r3, [pc, #164]	@ (800230c <HAL_DMA_Init+0x168>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226e:	f003 031c 	and.w	r3, r3, #28
 8002272:	210f      	movs	r1, #15
 8002274:	fa01 f303 	lsl.w	r3, r1, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	4924      	ldr	r1, [pc, #144]	@ (800230c <HAL_DMA_Init+0x168>)
 800227c:	4013      	ands	r3, r2
 800227e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002280:	4b22      	ldr	r3, [pc, #136]	@ (800230c <HAL_DMA_Init+0x168>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6859      	ldr	r1, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228c:	f003 031c 	and.w	r3, r3, #28
 8002290:	fa01 f303 	lsl.w	r3, r1, r3
 8002294:	491d      	ldr	r1, [pc, #116]	@ (800230c <HAL_DMA_Init+0x168>)
 8002296:	4313      	orrs	r3, r2
 8002298:	600b      	str	r3, [r1, #0]
 800229a:	e019      	b.n	80022d0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800229c:	4b1c      	ldr	r3, [pc, #112]	@ (8002310 <HAL_DMA_Init+0x16c>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a4:	f003 031c 	and.w	r3, r3, #28
 80022a8:	210f      	movs	r1, #15
 80022aa:	fa01 f303 	lsl.w	r3, r1, r3
 80022ae:	43db      	mvns	r3, r3
 80022b0:	4917      	ldr	r1, [pc, #92]	@ (8002310 <HAL_DMA_Init+0x16c>)
 80022b2:	4013      	ands	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80022b6:	4b16      	ldr	r3, [pc, #88]	@ (8002310 <HAL_DMA_Init+0x16c>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6859      	ldr	r1, [r3, #4]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c2:	f003 031c 	and.w	r3, r3, #28
 80022c6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ca:	4911      	ldr	r1, [pc, #68]	@ (8002310 <HAL_DMA_Init+0x16c>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	40020407 	.word	0x40020407
 80022f8:	bffdfff8 	.word	0xbffdfff8
 80022fc:	cccccccd 	.word	0xcccccccd
 8002300:	40020000 	.word	0x40020000
 8002304:	bffdfbf8 	.word	0xbffdfbf8
 8002308:	40020400 	.word	0x40020400
 800230c:	400200a8 	.word	0x400200a8
 8002310:	400204a8 	.word	0x400204a8

08002314 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002330:	f003 031c 	and.w	r3, r3, #28
 8002334:	2204      	movs	r2, #4
 8002336:	409a      	lsls	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4013      	ands	r3, r2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d026      	beq.n	800238e <HAL_DMA_IRQHandler+0x7a>
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f003 0304 	and.w	r3, r3, #4
 8002346:	2b00      	cmp	r3, #0
 8002348:	d021      	beq.n	800238e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0320 	and.w	r3, r3, #32
 8002354:	2b00      	cmp	r3, #0
 8002356:	d107      	bne.n	8002368 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0204 	bic.w	r2, r2, #4
 8002366:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236c:	f003 021c 	and.w	r2, r3, #28
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002374:	2104      	movs	r1, #4
 8002376:	fa01 f202 	lsl.w	r2, r1, r2
 800237a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002380:	2b00      	cmp	r3, #0
 8002382:	d071      	beq.n	8002468 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800238c:	e06c      	b.n	8002468 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002392:	f003 031c 	and.w	r3, r3, #28
 8002396:	2202      	movs	r2, #2
 8002398:	409a      	lsls	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	4013      	ands	r3, r2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d02e      	beq.n	8002400 <HAL_DMA_IRQHandler+0xec>
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d029      	beq.n	8002400 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0320 	and.w	r3, r3, #32
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10b      	bne.n	80023d2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 020a 	bic.w	r2, r2, #10
 80023c8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d6:	f003 021c 	and.w	r2, r3, #28
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023de:	2102      	movs	r1, #2
 80023e0:	fa01 f202 	lsl.w	r2, r1, r2
 80023e4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d038      	beq.n	8002468 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80023fe:	e033      	b.n	8002468 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002404:	f003 031c 	and.w	r3, r3, #28
 8002408:	2208      	movs	r2, #8
 800240a:	409a      	lsls	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4013      	ands	r3, r2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d02a      	beq.n	800246a <HAL_DMA_IRQHandler+0x156>
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d025      	beq.n	800246a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 020e 	bic.w	r2, r2, #14
 800242c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002432:	f003 021c 	and.w	r2, r3, #28
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243a:	2101      	movs	r1, #1
 800243c:	fa01 f202 	lsl.w	r2, r1, r2
 8002440:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800245c:	2b00      	cmp	r3, #0
 800245e:	d004      	beq.n	800246a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002468:	bf00      	nop
 800246a:	bf00      	nop
}
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002474:	b480      	push	{r7}
 8002476:	b087      	sub	sp, #28
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002482:	e148      	b.n	8002716 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	2101      	movs	r1, #1
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	fa01 f303 	lsl.w	r3, r1, r3
 8002490:	4013      	ands	r3, r2
 8002492:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 813a 	beq.w	8002710 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d005      	beq.n	80024b4 <HAL_GPIO_Init+0x40>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 0303 	and.w	r3, r3, #3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d130      	bne.n	8002516 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	2203      	movs	r2, #3
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4013      	ands	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	4313      	orrs	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024ea:	2201      	movs	r2, #1
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4013      	ands	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	091b      	lsrs	r3, r3, #4
 8002500:	f003 0201 	and.w	r2, r3, #1
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	2b03      	cmp	r3, #3
 8002520:	d017      	beq.n	8002552 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	2203      	movs	r2, #3
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43db      	mvns	r3, r3
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4013      	ands	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d123      	bne.n	80025a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	08da      	lsrs	r2, r3, #3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3208      	adds	r2, #8
 8002566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800256a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	220f      	movs	r2, #15
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43db      	mvns	r3, r3
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	4013      	ands	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	4313      	orrs	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	08da      	lsrs	r2, r3, #3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3208      	adds	r2, #8
 80025a0:	6939      	ldr	r1, [r7, #16]
 80025a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	2203      	movs	r2, #3
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4013      	ands	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f003 0203 	and.w	r2, r3, #3
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 8094 	beq.w	8002710 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e8:	4b52      	ldr	r3, [pc, #328]	@ (8002734 <HAL_GPIO_Init+0x2c0>)
 80025ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025ec:	4a51      	ldr	r2, [pc, #324]	@ (8002734 <HAL_GPIO_Init+0x2c0>)
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	6613      	str	r3, [r2, #96]	@ 0x60
 80025f4:	4b4f      	ldr	r3, [pc, #316]	@ (8002734 <HAL_GPIO_Init+0x2c0>)
 80025f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002600:	4a4d      	ldr	r2, [pc, #308]	@ (8002738 <HAL_GPIO_Init+0x2c4>)
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	089b      	lsrs	r3, r3, #2
 8002606:	3302      	adds	r3, #2
 8002608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800260c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	220f      	movs	r2, #15
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4013      	ands	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800262a:	d00d      	beq.n	8002648 <HAL_GPIO_Init+0x1d4>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a43      	ldr	r2, [pc, #268]	@ (800273c <HAL_GPIO_Init+0x2c8>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d007      	beq.n	8002644 <HAL_GPIO_Init+0x1d0>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a42      	ldr	r2, [pc, #264]	@ (8002740 <HAL_GPIO_Init+0x2cc>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d101      	bne.n	8002640 <HAL_GPIO_Init+0x1cc>
 800263c:	2302      	movs	r3, #2
 800263e:	e004      	b.n	800264a <HAL_GPIO_Init+0x1d6>
 8002640:	2307      	movs	r3, #7
 8002642:	e002      	b.n	800264a <HAL_GPIO_Init+0x1d6>
 8002644:	2301      	movs	r3, #1
 8002646:	e000      	b.n	800264a <HAL_GPIO_Init+0x1d6>
 8002648:	2300      	movs	r3, #0
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	f002 0203 	and.w	r2, r2, #3
 8002650:	0092      	lsls	r2, r2, #2
 8002652:	4093      	lsls	r3, r2
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800265a:	4937      	ldr	r1, [pc, #220]	@ (8002738 <HAL_GPIO_Init+0x2c4>)
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	089b      	lsrs	r3, r3, #2
 8002660:	3302      	adds	r3, #2
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002668:	4b36      	ldr	r3, [pc, #216]	@ (8002744 <HAL_GPIO_Init+0x2d0>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	43db      	mvns	r3, r3
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4013      	ands	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	4313      	orrs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800268c:	4a2d      	ldr	r2, [pc, #180]	@ (8002744 <HAL_GPIO_Init+0x2d0>)
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002692:	4b2c      	ldr	r3, [pc, #176]	@ (8002744 <HAL_GPIO_Init+0x2d0>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	43db      	mvns	r3, r3
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	4013      	ands	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026b6:	4a23      	ldr	r2, [pc, #140]	@ (8002744 <HAL_GPIO_Init+0x2d0>)
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026bc:	4b21      	ldr	r3, [pc, #132]	@ (8002744 <HAL_GPIO_Init+0x2d0>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4013      	ands	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026e0:	4a18      	ldr	r2, [pc, #96]	@ (8002744 <HAL_GPIO_Init+0x2d0>)
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80026e6:	4b17      	ldr	r3, [pc, #92]	@ (8002744 <HAL_GPIO_Init+0x2d0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	43db      	mvns	r3, r3
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4013      	ands	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4313      	orrs	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800270a:	4a0e      	ldr	r2, [pc, #56]	@ (8002744 <HAL_GPIO_Init+0x2d0>)
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	3301      	adds	r3, #1
 8002714:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	fa22 f303 	lsr.w	r3, r2, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	f47f aeaf 	bne.w	8002484 <HAL_GPIO_Init+0x10>
  }
}
 8002726:	bf00      	nop
 8002728:	bf00      	nop
 800272a:	371c      	adds	r7, #28
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	40021000 	.word	0x40021000
 8002738:	40010000 	.word	0x40010000
 800273c:	48000400 	.word	0x48000400
 8002740:	48000800 	.word	0x48000800
 8002744:	40010400 	.word	0x40010400

08002748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	807b      	strh	r3, [r7, #2]
 8002754:	4613      	mov	r3, r2
 8002756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002758:	787b      	ldrb	r3, [r7, #1]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800275e:	887a      	ldrh	r2, [r7, #2]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002764:	e002      	b.n	800276c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002766:	887a      	ldrh	r2, [r7, #2]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800277c:	4b04      	ldr	r3, [pc, #16]	@ (8002790 <HAL_PWREx_GetVoltageRange+0x18>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002784:	4618      	mov	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40007000 	.word	0x40007000

08002794 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027a2:	d130      	bne.n	8002806 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80027a4:	4b23      	ldr	r3, [pc, #140]	@ (8002834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80027ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027b0:	d038      	beq.n	8002824 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027b2:	4b20      	ldr	r3, [pc, #128]	@ (8002834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80027ba:	4a1e      	ldr	r2, [pc, #120]	@ (8002834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002838 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2232      	movs	r2, #50	@ 0x32
 80027c8:	fb02 f303 	mul.w	r3, r2, r3
 80027cc:	4a1b      	ldr	r2, [pc, #108]	@ (800283c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027ce:	fba2 2303 	umull	r2, r3, r2, r3
 80027d2:	0c9b      	lsrs	r3, r3, #18
 80027d4:	3301      	adds	r3, #1
 80027d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027d8:	e002      	b.n	80027e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	3b01      	subs	r3, #1
 80027de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027e0:	4b14      	ldr	r3, [pc, #80]	@ (8002834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027ec:	d102      	bne.n	80027f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1f2      	bne.n	80027da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002800:	d110      	bne.n	8002824 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e00f      	b.n	8002826 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002806:	4b0b      	ldr	r3, [pc, #44]	@ (8002834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800280e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002812:	d007      	beq.n	8002824 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002814:	4b07      	ldr	r3, [pc, #28]	@ (8002834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800281c:	4a05      	ldr	r2, [pc, #20]	@ (8002834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800281e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002822:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	40007000 	.word	0x40007000
 8002838:	20000000 	.word	0x20000000
 800283c:	431bde83 	.word	0x431bde83

08002840 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d102      	bne.n	8002854 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	f000 bc02 	b.w	8003058 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002854:	4b96      	ldr	r3, [pc, #600]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 030c 	and.w	r3, r3, #12
 800285c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800285e:	4b94      	ldr	r3, [pc, #592]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0310 	and.w	r3, r3, #16
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 80e4 	beq.w	8002a3e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d007      	beq.n	800288c <HAL_RCC_OscConfig+0x4c>
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	2b0c      	cmp	r3, #12
 8002880:	f040 808b 	bne.w	800299a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	2b01      	cmp	r3, #1
 8002888:	f040 8087 	bne.w	800299a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800288c:	4b88      	ldr	r3, [pc, #544]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d005      	beq.n	80028a4 <HAL_RCC_OscConfig+0x64>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e3d9      	b.n	8003058 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a1a      	ldr	r2, [r3, #32]
 80028a8:	4b81      	ldr	r3, [pc, #516]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d004      	beq.n	80028be <HAL_RCC_OscConfig+0x7e>
 80028b4:	4b7e      	ldr	r3, [pc, #504]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028bc:	e005      	b.n	80028ca <HAL_RCC_OscConfig+0x8a>
 80028be:	4b7c      	ldr	r3, [pc, #496]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 80028c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d223      	bcs.n	8002916 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 fd8c 	bl	80033f0 <RCC_SetFlashLatencyFromMSIRange>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e3ba      	b.n	8003058 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028e2:	4b73      	ldr	r3, [pc, #460]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a72      	ldr	r2, [pc, #456]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 80028e8:	f043 0308 	orr.w	r3, r3, #8
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	4b70      	ldr	r3, [pc, #448]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	496d      	ldr	r1, [pc, #436]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002900:	4b6b      	ldr	r3, [pc, #428]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	021b      	lsls	r3, r3, #8
 800290e:	4968      	ldr	r1, [pc, #416]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002910:	4313      	orrs	r3, r2
 8002912:	604b      	str	r3, [r1, #4]
 8002914:	e025      	b.n	8002962 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002916:	4b66      	ldr	r3, [pc, #408]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a65      	ldr	r2, [pc, #404]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 800291c:	f043 0308 	orr.w	r3, r3, #8
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	4b63      	ldr	r3, [pc, #396]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	4960      	ldr	r1, [pc, #384]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002930:	4313      	orrs	r3, r2
 8002932:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002934:	4b5e      	ldr	r3, [pc, #376]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	021b      	lsls	r3, r3, #8
 8002942:	495b      	ldr	r1, [pc, #364]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002944:	4313      	orrs	r3, r2
 8002946:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d109      	bne.n	8002962 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	4618      	mov	r0, r3
 8002954:	f000 fd4c 	bl	80033f0 <RCC_SetFlashLatencyFromMSIRange>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e37a      	b.n	8003058 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002962:	f000 fc81 	bl	8003268 <HAL_RCC_GetSysClockFreq>
 8002966:	4602      	mov	r2, r0
 8002968:	4b51      	ldr	r3, [pc, #324]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	091b      	lsrs	r3, r3, #4
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	4950      	ldr	r1, [pc, #320]	@ (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002974:	5ccb      	ldrb	r3, [r1, r3]
 8002976:	f003 031f 	and.w	r3, r3, #31
 800297a:	fa22 f303 	lsr.w	r3, r2, r3
 800297e:	4a4e      	ldr	r2, [pc, #312]	@ (8002ab8 <HAL_RCC_OscConfig+0x278>)
 8002980:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002982:	4b4e      	ldr	r3, [pc, #312]	@ (8002abc <HAL_RCC_OscConfig+0x27c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f7fe fbee 	bl	8001168 <HAL_InitTick>
 800298c:	4603      	mov	r3, r0
 800298e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d052      	beq.n	8002a3c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	e35e      	b.n	8003058 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d032      	beq.n	8002a08 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029a2:	4b43      	ldr	r3, [pc, #268]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a42      	ldr	r2, [pc, #264]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029ae:	f7fe fc2b 	bl	8001208 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029b6:	f7fe fc27 	bl	8001208 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e347      	b.n	8003058 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029c8:	4b39      	ldr	r3, [pc, #228]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f0      	beq.n	80029b6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029d4:	4b36      	ldr	r3, [pc, #216]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a35      	ldr	r2, [pc, #212]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 80029da:	f043 0308 	orr.w	r3, r3, #8
 80029de:	6013      	str	r3, [r2, #0]
 80029e0:	4b33      	ldr	r3, [pc, #204]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	4930      	ldr	r1, [pc, #192]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029f2:	4b2f      	ldr	r3, [pc, #188]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	021b      	lsls	r3, r3, #8
 8002a00:	492b      	ldr	r1, [pc, #172]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	604b      	str	r3, [r1, #4]
 8002a06:	e01a      	b.n	8002a3e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a08:	4b29      	ldr	r3, [pc, #164]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a28      	ldr	r2, [pc, #160]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002a0e:	f023 0301 	bic.w	r3, r3, #1
 8002a12:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a14:	f7fe fbf8 	bl	8001208 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a1c:	f7fe fbf4 	bl	8001208 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e314      	b.n	8003058 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a2e:	4b20      	ldr	r3, [pc, #128]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x1dc>
 8002a3a:	e000      	b.n	8002a3e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a3c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d073      	beq.n	8002b32 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d005      	beq.n	8002a5c <HAL_RCC_OscConfig+0x21c>
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	2b0c      	cmp	r3, #12
 8002a54:	d10e      	bne.n	8002a74 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	d10b      	bne.n	8002a74 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5c:	4b14      	ldr	r3, [pc, #80]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d063      	beq.n	8002b30 <HAL_RCC_OscConfig+0x2f0>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d15f      	bne.n	8002b30 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e2f1      	b.n	8003058 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a7c:	d106      	bne.n	8002a8c <HAL_RCC_OscConfig+0x24c>
 8002a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a0b      	ldr	r2, [pc, #44]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002a84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	e025      	b.n	8002ad8 <HAL_RCC_OscConfig+0x298>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a94:	d114      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x280>
 8002a96:	4b06      	ldr	r3, [pc, #24]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a05      	ldr	r2, [pc, #20]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002a9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	4b03      	ldr	r3, [pc, #12]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a02      	ldr	r2, [pc, #8]	@ (8002ab0 <HAL_RCC_OscConfig+0x270>)
 8002aa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aac:	6013      	str	r3, [r2, #0]
 8002aae:	e013      	b.n	8002ad8 <HAL_RCC_OscConfig+0x298>
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	080054c4 	.word	0x080054c4
 8002ab8:	20000000 	.word	0x20000000
 8002abc:	20000004 	.word	0x20000004
 8002ac0:	4ba0      	ldr	r3, [pc, #640]	@ (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a9f      	ldr	r2, [pc, #636]	@ (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002ac6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	4b9d      	ldr	r3, [pc, #628]	@ (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a9c      	ldr	r2, [pc, #624]	@ (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002ad2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d013      	beq.n	8002b08 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae0:	f7fe fb92 	bl	8001208 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae8:	f7fe fb8e 	bl	8001208 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b64      	cmp	r3, #100	@ 0x64
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e2ae      	b.n	8003058 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002afa:	4b92      	ldr	r3, [pc, #584]	@ (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f0      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x2a8>
 8002b06:	e014      	b.n	8002b32 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b08:	f7fe fb7e 	bl	8001208 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b10:	f7fe fb7a 	bl	8001208 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	@ 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e29a      	b.n	8003058 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b22:	4b88      	ldr	r3, [pc, #544]	@ (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x2d0>
 8002b2e:	e000      	b.n	8002b32 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d060      	beq.n	8002c00 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d005      	beq.n	8002b50 <HAL_RCC_OscConfig+0x310>
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	2b0c      	cmp	r3, #12
 8002b48:	d119      	bne.n	8002b7e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d116      	bne.n	8002b7e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b50:	4b7c      	ldr	r3, [pc, #496]	@ (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d005      	beq.n	8002b68 <HAL_RCC_OscConfig+0x328>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e277      	b.n	8003058 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b68:	4b76      	ldr	r3, [pc, #472]	@ (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	061b      	lsls	r3, r3, #24
 8002b76:	4973      	ldr	r1, [pc, #460]	@ (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b7c:	e040      	b.n	8002c00 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d023      	beq.n	8002bce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b86:	4b6f      	ldr	r3, [pc, #444]	@ (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a6e      	ldr	r2, [pc, #440]	@ (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002b8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b92:	f7fe fb39 	bl	8001208 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b9a:	f7fe fb35 	bl	8001208 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e255      	b.n	8003058 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bac:	4b65      	ldr	r3, [pc, #404]	@ (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0f0      	beq.n	8002b9a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb8:	4b62      	ldr	r3, [pc, #392]	@ (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	061b      	lsls	r3, r3, #24
 8002bc6:	495f      	ldr	r1, [pc, #380]	@ (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	604b      	str	r3, [r1, #4]
 8002bcc:	e018      	b.n	8002c00 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bce:	4b5d      	ldr	r3, [pc, #372]	@ (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a5c      	ldr	r2, [pc, #368]	@ (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002bd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002bd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bda:	f7fe fb15 	bl	8001208 <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002be0:	e008      	b.n	8002bf4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be2:	f7fe fb11 	bl	8001208 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e231      	b.n	8003058 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bf4:	4b53      	ldr	r3, [pc, #332]	@ (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1f0      	bne.n	8002be2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d03c      	beq.n	8002c86 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d01c      	beq.n	8002c4e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c14:	4b4b      	ldr	r3, [pc, #300]	@ (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c1a:	4a4a      	ldr	r2, [pc, #296]	@ (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c24:	f7fe faf0 	bl	8001208 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c2c:	f7fe faec 	bl	8001208 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e20c      	b.n	8003058 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c3e:	4b41      	ldr	r3, [pc, #260]	@ (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0ef      	beq.n	8002c2c <HAL_RCC_OscConfig+0x3ec>
 8002c4c:	e01b      	b.n	8002c86 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c4e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c54:	4a3b      	ldr	r2, [pc, #236]	@ (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002c56:	f023 0301 	bic.w	r3, r3, #1
 8002c5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5e:	f7fe fad3 	bl	8001208 <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c66:	f7fe facf 	bl	8001208 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e1ef      	b.n	8003058 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c78:	4b32      	ldr	r3, [pc, #200]	@ (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1ef      	bne.n	8002c66 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 80a6 	beq.w	8002de0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c94:	2300      	movs	r3, #0
 8002c96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c98:	4b2a      	ldr	r3, [pc, #168]	@ (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10d      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ca4:	4b27      	ldr	r3, [pc, #156]	@ (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca8:	4a26      	ldr	r2, [pc, #152]	@ (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002caa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cae:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cb0:	4b24      	ldr	r3, [pc, #144]	@ (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cc0:	4b21      	ldr	r3, [pc, #132]	@ (8002d48 <HAL_RCC_OscConfig+0x508>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d118      	bne.n	8002cfe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ccc:	4b1e      	ldr	r3, [pc, #120]	@ (8002d48 <HAL_RCC_OscConfig+0x508>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a1d      	ldr	r2, [pc, #116]	@ (8002d48 <HAL_RCC_OscConfig+0x508>)
 8002cd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cd6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cd8:	f7fe fa96 	bl	8001208 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce0:	f7fe fa92 	bl	8001208 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e1b2      	b.n	8003058 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cf2:	4b15      	ldr	r3, [pc, #84]	@ (8002d48 <HAL_RCC_OscConfig+0x508>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0f0      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d108      	bne.n	8002d18 <HAL_RCC_OscConfig+0x4d8>
 8002d06:	4b0f      	ldr	r3, [pc, #60]	@ (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d16:	e029      	b.n	8002d6c <HAL_RCC_OscConfig+0x52c>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2b05      	cmp	r3, #5
 8002d1e:	d115      	bne.n	8002d4c <HAL_RCC_OscConfig+0x50c>
 8002d20:	4b08      	ldr	r3, [pc, #32]	@ (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d26:	4a07      	ldr	r2, [pc, #28]	@ (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002d28:	f043 0304 	orr.w	r3, r3, #4
 8002d2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d30:	4b04      	ldr	r3, [pc, #16]	@ (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d36:	4a03      	ldr	r2, [pc, #12]	@ (8002d44 <HAL_RCC_OscConfig+0x504>)
 8002d38:	f043 0301 	orr.w	r3, r3, #1
 8002d3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d40:	e014      	b.n	8002d6c <HAL_RCC_OscConfig+0x52c>
 8002d42:	bf00      	nop
 8002d44:	40021000 	.word	0x40021000
 8002d48:	40007000 	.word	0x40007000
 8002d4c:	4b9a      	ldr	r3, [pc, #616]	@ (8002fb8 <HAL_RCC_OscConfig+0x778>)
 8002d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d52:	4a99      	ldr	r2, [pc, #612]	@ (8002fb8 <HAL_RCC_OscConfig+0x778>)
 8002d54:	f023 0301 	bic.w	r3, r3, #1
 8002d58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d5c:	4b96      	ldr	r3, [pc, #600]	@ (8002fb8 <HAL_RCC_OscConfig+0x778>)
 8002d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d62:	4a95      	ldr	r2, [pc, #596]	@ (8002fb8 <HAL_RCC_OscConfig+0x778>)
 8002d64:	f023 0304 	bic.w	r3, r3, #4
 8002d68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d016      	beq.n	8002da2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d74:	f7fe fa48 	bl	8001208 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d7a:	e00a      	b.n	8002d92 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d7c:	f7fe fa44 	bl	8001208 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e162      	b.n	8003058 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d92:	4b89      	ldr	r3, [pc, #548]	@ (8002fb8 <HAL_RCC_OscConfig+0x778>)
 8002d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0ed      	beq.n	8002d7c <HAL_RCC_OscConfig+0x53c>
 8002da0:	e015      	b.n	8002dce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da2:	f7fe fa31 	bl	8001208 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002da8:	e00a      	b.n	8002dc0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002daa:	f7fe fa2d 	bl	8001208 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e14b      	b.n	8003058 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dc0:	4b7d      	ldr	r3, [pc, #500]	@ (8002fb8 <HAL_RCC_OscConfig+0x778>)
 8002dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1ed      	bne.n	8002daa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dce:	7ffb      	ldrb	r3, [r7, #31]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d105      	bne.n	8002de0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd4:	4b78      	ldr	r3, [pc, #480]	@ (8002fb8 <HAL_RCC_OscConfig+0x778>)
 8002dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd8:	4a77      	ldr	r2, [pc, #476]	@ (8002fb8 <HAL_RCC_OscConfig+0x778>)
 8002dda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dde:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0320 	and.w	r3, r3, #32
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d03c      	beq.n	8002e66 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d01c      	beq.n	8002e2e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002df4:	4b70      	ldr	r3, [pc, #448]	@ (8002fb8 <HAL_RCC_OscConfig+0x778>)
 8002df6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002dfa:	4a6f      	ldr	r2, [pc, #444]	@ (8002fb8 <HAL_RCC_OscConfig+0x778>)
 8002dfc:	f043 0301 	orr.w	r3, r3, #1
 8002e00:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e04:	f7fe fa00 	bl	8001208 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e0c:	f7fe f9fc 	bl	8001208 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e11c      	b.n	8003058 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e1e:	4b66      	ldr	r3, [pc, #408]	@ (8002fb8 <HAL_RCC_OscConfig+0x778>)
 8002e20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0ef      	beq.n	8002e0c <HAL_RCC_OscConfig+0x5cc>
 8002e2c:	e01b      	b.n	8002e66 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e2e:	4b62      	ldr	r3, [pc, #392]	@ (8002fb8 <HAL_RCC_OscConfig+0x778>)
 8002e30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e34:	4a60      	ldr	r2, [pc, #384]	@ (8002fb8 <HAL_RCC_OscConfig+0x778>)
 8002e36:	f023 0301 	bic.w	r3, r3, #1
 8002e3a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3e:	f7fe f9e3 	bl	8001208 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e44:	e008      	b.n	8002e58 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e46:	f7fe f9df 	bl	8001208 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e0ff      	b.n	8003058 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e58:	4b57      	ldr	r3, [pc, #348]	@ (8002fb8 <HAL_RCC_OscConfig+0x778>)
 8002e5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1ef      	bne.n	8002e46 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 80f3 	beq.w	8003056 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	f040 80c9 	bne.w	800300c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e7a:	4b4f      	ldr	r3, [pc, #316]	@ (8002fb8 <HAL_RCC_OscConfig+0x778>)
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f003 0203 	and.w	r2, r3, #3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d12c      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d123      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eaa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d11b      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d113      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eca:	085b      	lsrs	r3, r3, #1
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d109      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ede:	085b      	lsrs	r3, r3, #1
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d06b      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	2b0c      	cmp	r3, #12
 8002eec:	d062      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002eee:	4b32      	ldr	r3, [pc, #200]	@ (8002fb8 <HAL_RCC_OscConfig+0x778>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e0ac      	b.n	8003058 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002efe:	4b2e      	ldr	r3, [pc, #184]	@ (8002fb8 <HAL_RCC_OscConfig+0x778>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a2d      	ldr	r2, [pc, #180]	@ (8002fb8 <HAL_RCC_OscConfig+0x778>)
 8002f04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f08:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f0a:	f7fe f97d 	bl	8001208 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f12:	f7fe f979 	bl	8001208 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e099      	b.n	8003058 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f24:	4b24      	ldr	r3, [pc, #144]	@ (8002fb8 <HAL_RCC_OscConfig+0x778>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1f0      	bne.n	8002f12 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f30:	4b21      	ldr	r3, [pc, #132]	@ (8002fb8 <HAL_RCC_OscConfig+0x778>)
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	4b21      	ldr	r3, [pc, #132]	@ (8002fbc <HAL_RCC_OscConfig+0x77c>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002f40:	3a01      	subs	r2, #1
 8002f42:	0112      	lsls	r2, r2, #4
 8002f44:	4311      	orrs	r1, r2
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002f4a:	0212      	lsls	r2, r2, #8
 8002f4c:	4311      	orrs	r1, r2
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f52:	0852      	lsrs	r2, r2, #1
 8002f54:	3a01      	subs	r2, #1
 8002f56:	0552      	lsls	r2, r2, #21
 8002f58:	4311      	orrs	r1, r2
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002f5e:	0852      	lsrs	r2, r2, #1
 8002f60:	3a01      	subs	r2, #1
 8002f62:	0652      	lsls	r2, r2, #25
 8002f64:	4311      	orrs	r1, r2
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002f6a:	06d2      	lsls	r2, r2, #27
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	4912      	ldr	r1, [pc, #72]	@ (8002fb8 <HAL_RCC_OscConfig+0x778>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f74:	4b10      	ldr	r3, [pc, #64]	@ (8002fb8 <HAL_RCC_OscConfig+0x778>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a0f      	ldr	r2, [pc, #60]	@ (8002fb8 <HAL_RCC_OscConfig+0x778>)
 8002f7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f7e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f80:	4b0d      	ldr	r3, [pc, #52]	@ (8002fb8 <HAL_RCC_OscConfig+0x778>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	4a0c      	ldr	r2, [pc, #48]	@ (8002fb8 <HAL_RCC_OscConfig+0x778>)
 8002f86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f8a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f8c:	f7fe f93c 	bl	8001208 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f94:	f7fe f938 	bl	8001208 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e058      	b.n	8003058 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fa6:	4b04      	ldr	r3, [pc, #16]	@ (8002fb8 <HAL_RCC_OscConfig+0x778>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0f0      	beq.n	8002f94 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fb2:	e050      	b.n	8003056 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e04f      	b.n	8003058 <HAL_RCC_OscConfig+0x818>
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fc0:	4b27      	ldr	r3, [pc, #156]	@ (8003060 <HAL_RCC_OscConfig+0x820>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d144      	bne.n	8003056 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002fcc:	4b24      	ldr	r3, [pc, #144]	@ (8003060 <HAL_RCC_OscConfig+0x820>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a23      	ldr	r2, [pc, #140]	@ (8003060 <HAL_RCC_OscConfig+0x820>)
 8002fd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fd6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fd8:	4b21      	ldr	r3, [pc, #132]	@ (8003060 <HAL_RCC_OscConfig+0x820>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	4a20      	ldr	r2, [pc, #128]	@ (8003060 <HAL_RCC_OscConfig+0x820>)
 8002fde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fe2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fe4:	f7fe f910 	bl	8001208 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fec:	f7fe f90c 	bl	8001208 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e02c      	b.n	8003058 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ffe:	4b18      	ldr	r3, [pc, #96]	@ (8003060 <HAL_RCC_OscConfig+0x820>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0f0      	beq.n	8002fec <HAL_RCC_OscConfig+0x7ac>
 800300a:	e024      	b.n	8003056 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	2b0c      	cmp	r3, #12
 8003010:	d01f      	beq.n	8003052 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003012:	4b13      	ldr	r3, [pc, #76]	@ (8003060 <HAL_RCC_OscConfig+0x820>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a12      	ldr	r2, [pc, #72]	@ (8003060 <HAL_RCC_OscConfig+0x820>)
 8003018:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800301c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301e:	f7fe f8f3 	bl	8001208 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003026:	f7fe f8ef 	bl	8001208 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e00f      	b.n	8003058 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003038:	4b09      	ldr	r3, [pc, #36]	@ (8003060 <HAL_RCC_OscConfig+0x820>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1f0      	bne.n	8003026 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003044:	4b06      	ldr	r3, [pc, #24]	@ (8003060 <HAL_RCC_OscConfig+0x820>)
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	4905      	ldr	r1, [pc, #20]	@ (8003060 <HAL_RCC_OscConfig+0x820>)
 800304a:	4b06      	ldr	r3, [pc, #24]	@ (8003064 <HAL_RCC_OscConfig+0x824>)
 800304c:	4013      	ands	r3, r2
 800304e:	60cb      	str	r3, [r1, #12]
 8003050:	e001      	b.n	8003056 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3720      	adds	r7, #32
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40021000 	.word	0x40021000
 8003064:	feeefffc 	.word	0xfeeefffc

08003068 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e0e7      	b.n	800324c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800307c:	4b75      	ldr	r3, [pc, #468]	@ (8003254 <HAL_RCC_ClockConfig+0x1ec>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d910      	bls.n	80030ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308a:	4b72      	ldr	r3, [pc, #456]	@ (8003254 <HAL_RCC_ClockConfig+0x1ec>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f023 0207 	bic.w	r2, r3, #7
 8003092:	4970      	ldr	r1, [pc, #448]	@ (8003254 <HAL_RCC_ClockConfig+0x1ec>)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	4313      	orrs	r3, r2
 8003098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800309a:	4b6e      	ldr	r3, [pc, #440]	@ (8003254 <HAL_RCC_ClockConfig+0x1ec>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d001      	beq.n	80030ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e0cf      	b.n	800324c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d010      	beq.n	80030da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	4b66      	ldr	r3, [pc, #408]	@ (8003258 <HAL_RCC_ClockConfig+0x1f0>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d908      	bls.n	80030da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030c8:	4b63      	ldr	r3, [pc, #396]	@ (8003258 <HAL_RCC_ClockConfig+0x1f0>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	4960      	ldr	r1, [pc, #384]	@ (8003258 <HAL_RCC_ClockConfig+0x1f0>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d04c      	beq.n	8003180 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	d107      	bne.n	80030fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ee:	4b5a      	ldr	r3, [pc, #360]	@ (8003258 <HAL_RCC_ClockConfig+0x1f0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d121      	bne.n	800313e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e0a6      	b.n	800324c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2b02      	cmp	r3, #2
 8003104:	d107      	bne.n	8003116 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003106:	4b54      	ldr	r3, [pc, #336]	@ (8003258 <HAL_RCC_ClockConfig+0x1f0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d115      	bne.n	800313e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e09a      	b.n	800324c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d107      	bne.n	800312e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800311e:	4b4e      	ldr	r3, [pc, #312]	@ (8003258 <HAL_RCC_ClockConfig+0x1f0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d109      	bne.n	800313e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e08e      	b.n	800324c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800312e:	4b4a      	ldr	r3, [pc, #296]	@ (8003258 <HAL_RCC_ClockConfig+0x1f0>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e086      	b.n	800324c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800313e:	4b46      	ldr	r3, [pc, #280]	@ (8003258 <HAL_RCC_ClockConfig+0x1f0>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f023 0203 	bic.w	r2, r3, #3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	4943      	ldr	r1, [pc, #268]	@ (8003258 <HAL_RCC_ClockConfig+0x1f0>)
 800314c:	4313      	orrs	r3, r2
 800314e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003150:	f7fe f85a 	bl	8001208 <HAL_GetTick>
 8003154:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003156:	e00a      	b.n	800316e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003158:	f7fe f856 	bl	8001208 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003166:	4293      	cmp	r3, r2
 8003168:	d901      	bls.n	800316e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e06e      	b.n	800324c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316e:	4b3a      	ldr	r3, [pc, #232]	@ (8003258 <HAL_RCC_ClockConfig+0x1f0>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 020c 	and.w	r2, r3, #12
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	429a      	cmp	r2, r3
 800317e:	d1eb      	bne.n	8003158 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d010      	beq.n	80031ae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	4b31      	ldr	r3, [pc, #196]	@ (8003258 <HAL_RCC_ClockConfig+0x1f0>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003198:	429a      	cmp	r2, r3
 800319a:	d208      	bcs.n	80031ae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800319c:	4b2e      	ldr	r3, [pc, #184]	@ (8003258 <HAL_RCC_ClockConfig+0x1f0>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	492b      	ldr	r1, [pc, #172]	@ (8003258 <HAL_RCC_ClockConfig+0x1f0>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031ae:	4b29      	ldr	r3, [pc, #164]	@ (8003254 <HAL_RCC_ClockConfig+0x1ec>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d210      	bcs.n	80031de <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031bc:	4b25      	ldr	r3, [pc, #148]	@ (8003254 <HAL_RCC_ClockConfig+0x1ec>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f023 0207 	bic.w	r2, r3, #7
 80031c4:	4923      	ldr	r1, [pc, #140]	@ (8003254 <HAL_RCC_ClockConfig+0x1ec>)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031cc:	4b21      	ldr	r3, [pc, #132]	@ (8003254 <HAL_RCC_ClockConfig+0x1ec>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d001      	beq.n	80031de <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e036      	b.n	800324c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d008      	beq.n	80031fc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003258 <HAL_RCC_ClockConfig+0x1f0>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	4918      	ldr	r1, [pc, #96]	@ (8003258 <HAL_RCC_ClockConfig+0x1f0>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0308 	and.w	r3, r3, #8
 8003204:	2b00      	cmp	r3, #0
 8003206:	d009      	beq.n	800321c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003208:	4b13      	ldr	r3, [pc, #76]	@ (8003258 <HAL_RCC_ClockConfig+0x1f0>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	4910      	ldr	r1, [pc, #64]	@ (8003258 <HAL_RCC_ClockConfig+0x1f0>)
 8003218:	4313      	orrs	r3, r2
 800321a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800321c:	f000 f824 	bl	8003268 <HAL_RCC_GetSysClockFreq>
 8003220:	4602      	mov	r2, r0
 8003222:	4b0d      	ldr	r3, [pc, #52]	@ (8003258 <HAL_RCC_ClockConfig+0x1f0>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	091b      	lsrs	r3, r3, #4
 8003228:	f003 030f 	and.w	r3, r3, #15
 800322c:	490b      	ldr	r1, [pc, #44]	@ (800325c <HAL_RCC_ClockConfig+0x1f4>)
 800322e:	5ccb      	ldrb	r3, [r1, r3]
 8003230:	f003 031f 	and.w	r3, r3, #31
 8003234:	fa22 f303 	lsr.w	r3, r2, r3
 8003238:	4a09      	ldr	r2, [pc, #36]	@ (8003260 <HAL_RCC_ClockConfig+0x1f8>)
 800323a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800323c:	4b09      	ldr	r3, [pc, #36]	@ (8003264 <HAL_RCC_ClockConfig+0x1fc>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f7fd ff91 	bl	8001168 <HAL_InitTick>
 8003246:	4603      	mov	r3, r0
 8003248:	72fb      	strb	r3, [r7, #11]

  return status;
 800324a:	7afb      	ldrb	r3, [r7, #11]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40022000 	.word	0x40022000
 8003258:	40021000 	.word	0x40021000
 800325c:	080054c4 	.word	0x080054c4
 8003260:	20000000 	.word	0x20000000
 8003264:	20000004 	.word	0x20000004

08003268 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003268:	b480      	push	{r7}
 800326a:	b089      	sub	sp, #36	@ 0x24
 800326c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	61fb      	str	r3, [r7, #28]
 8003272:	2300      	movs	r3, #0
 8003274:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003276:	4b3e      	ldr	r3, [pc, #248]	@ (8003370 <HAL_RCC_GetSysClockFreq+0x108>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 030c 	and.w	r3, r3, #12
 800327e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003280:	4b3b      	ldr	r3, [pc, #236]	@ (8003370 <HAL_RCC_GetSysClockFreq+0x108>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f003 0303 	and.w	r3, r3, #3
 8003288:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d005      	beq.n	800329c <HAL_RCC_GetSysClockFreq+0x34>
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	2b0c      	cmp	r3, #12
 8003294:	d121      	bne.n	80032da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d11e      	bne.n	80032da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800329c:	4b34      	ldr	r3, [pc, #208]	@ (8003370 <HAL_RCC_GetSysClockFreq+0x108>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0308 	and.w	r3, r3, #8
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d107      	bne.n	80032b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032a8:	4b31      	ldr	r3, [pc, #196]	@ (8003370 <HAL_RCC_GetSysClockFreq+0x108>)
 80032aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032ae:	0a1b      	lsrs	r3, r3, #8
 80032b0:	f003 030f 	and.w	r3, r3, #15
 80032b4:	61fb      	str	r3, [r7, #28]
 80032b6:	e005      	b.n	80032c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032b8:	4b2d      	ldr	r3, [pc, #180]	@ (8003370 <HAL_RCC_GetSysClockFreq+0x108>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032c4:	4a2b      	ldr	r2, [pc, #172]	@ (8003374 <HAL_RCC_GetSysClockFreq+0x10c>)
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10d      	bne.n	80032f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032d8:	e00a      	b.n	80032f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	2b04      	cmp	r3, #4
 80032de:	d102      	bne.n	80032e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032e0:	4b25      	ldr	r3, [pc, #148]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x110>)
 80032e2:	61bb      	str	r3, [r7, #24]
 80032e4:	e004      	b.n	80032f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d101      	bne.n	80032f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032ec:	4b23      	ldr	r3, [pc, #140]	@ (800337c <HAL_RCC_GetSysClockFreq+0x114>)
 80032ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	2b0c      	cmp	r3, #12
 80032f4:	d134      	bne.n	8003360 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003370 <HAL_RCC_GetSysClockFreq+0x108>)
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d003      	beq.n	800330e <HAL_RCC_GetSysClockFreq+0xa6>
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2b03      	cmp	r3, #3
 800330a:	d003      	beq.n	8003314 <HAL_RCC_GetSysClockFreq+0xac>
 800330c:	e005      	b.n	800331a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800330e:	4b1a      	ldr	r3, [pc, #104]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x110>)
 8003310:	617b      	str	r3, [r7, #20]
      break;
 8003312:	e005      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003314:	4b19      	ldr	r3, [pc, #100]	@ (800337c <HAL_RCC_GetSysClockFreq+0x114>)
 8003316:	617b      	str	r3, [r7, #20]
      break;
 8003318:	e002      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	617b      	str	r3, [r7, #20]
      break;
 800331e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003320:	4b13      	ldr	r3, [pc, #76]	@ (8003370 <HAL_RCC_GetSysClockFreq+0x108>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	091b      	lsrs	r3, r3, #4
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	3301      	adds	r3, #1
 800332c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800332e:	4b10      	ldr	r3, [pc, #64]	@ (8003370 <HAL_RCC_GetSysClockFreq+0x108>)
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	0a1b      	lsrs	r3, r3, #8
 8003334:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	fb03 f202 	mul.w	r2, r3, r2
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	fbb2 f3f3 	udiv	r3, r2, r3
 8003344:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003346:	4b0a      	ldr	r3, [pc, #40]	@ (8003370 <HAL_RCC_GetSysClockFreq+0x108>)
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	0e5b      	lsrs	r3, r3, #25
 800334c:	f003 0303 	and.w	r3, r3, #3
 8003350:	3301      	adds	r3, #1
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	fbb2 f3f3 	udiv	r3, r2, r3
 800335e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003360:	69bb      	ldr	r3, [r7, #24]
}
 8003362:	4618      	mov	r0, r3
 8003364:	3724      	adds	r7, #36	@ 0x24
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40021000 	.word	0x40021000
 8003374:	080054dc 	.word	0x080054dc
 8003378:	00f42400 	.word	0x00f42400
 800337c:	007a1200 	.word	0x007a1200

08003380 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003384:	4b03      	ldr	r3, [pc, #12]	@ (8003394 <HAL_RCC_GetHCLKFreq+0x14>)
 8003386:	681b      	ldr	r3, [r3, #0]
}
 8003388:	4618      	mov	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	20000000 	.word	0x20000000

08003398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800339c:	f7ff fff0 	bl	8003380 <HAL_RCC_GetHCLKFreq>
 80033a0:	4602      	mov	r2, r0
 80033a2:	4b06      	ldr	r3, [pc, #24]	@ (80033bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	0a1b      	lsrs	r3, r3, #8
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	4904      	ldr	r1, [pc, #16]	@ (80033c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033ae:	5ccb      	ldrb	r3, [r1, r3]
 80033b0:	f003 031f 	and.w	r3, r3, #31
 80033b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40021000 	.word	0x40021000
 80033c0:	080054d4 	.word	0x080054d4

080033c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033c8:	f7ff ffda 	bl	8003380 <HAL_RCC_GetHCLKFreq>
 80033cc:	4602      	mov	r2, r0
 80033ce:	4b06      	ldr	r3, [pc, #24]	@ (80033e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	0adb      	lsrs	r3, r3, #11
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	4904      	ldr	r1, [pc, #16]	@ (80033ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80033da:	5ccb      	ldrb	r3, [r1, r3]
 80033dc:	f003 031f 	and.w	r3, r3, #31
 80033e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40021000 	.word	0x40021000
 80033ec:	080054d4 	.word	0x080054d4

080033f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033f8:	2300      	movs	r3, #0
 80033fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033fc:	4b2a      	ldr	r3, [pc, #168]	@ (80034a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003400:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003408:	f7ff f9b6 	bl	8002778 <HAL_PWREx_GetVoltageRange>
 800340c:	6178      	str	r0, [r7, #20]
 800340e:	e014      	b.n	800343a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003410:	4b25      	ldr	r3, [pc, #148]	@ (80034a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003414:	4a24      	ldr	r2, [pc, #144]	@ (80034a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003416:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800341a:	6593      	str	r3, [r2, #88]	@ 0x58
 800341c:	4b22      	ldr	r3, [pc, #136]	@ (80034a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800341e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003420:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003428:	f7ff f9a6 	bl	8002778 <HAL_PWREx_GetVoltageRange>
 800342c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800342e:	4b1e      	ldr	r3, [pc, #120]	@ (80034a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003432:	4a1d      	ldr	r2, [pc, #116]	@ (80034a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003434:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003438:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003440:	d10b      	bne.n	800345a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b80      	cmp	r3, #128	@ 0x80
 8003446:	d919      	bls.n	800347c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2ba0      	cmp	r3, #160	@ 0xa0
 800344c:	d902      	bls.n	8003454 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800344e:	2302      	movs	r3, #2
 8003450:	613b      	str	r3, [r7, #16]
 8003452:	e013      	b.n	800347c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003454:	2301      	movs	r3, #1
 8003456:	613b      	str	r3, [r7, #16]
 8003458:	e010      	b.n	800347c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b80      	cmp	r3, #128	@ 0x80
 800345e:	d902      	bls.n	8003466 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003460:	2303      	movs	r3, #3
 8003462:	613b      	str	r3, [r7, #16]
 8003464:	e00a      	b.n	800347c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b80      	cmp	r3, #128	@ 0x80
 800346a:	d102      	bne.n	8003472 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800346c:	2302      	movs	r3, #2
 800346e:	613b      	str	r3, [r7, #16]
 8003470:	e004      	b.n	800347c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b70      	cmp	r3, #112	@ 0x70
 8003476:	d101      	bne.n	800347c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003478:	2301      	movs	r3, #1
 800347a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800347c:	4b0b      	ldr	r3, [pc, #44]	@ (80034ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f023 0207 	bic.w	r2, r3, #7
 8003484:	4909      	ldr	r1, [pc, #36]	@ (80034ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4313      	orrs	r3, r2
 800348a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800348c:	4b07      	ldr	r3, [pc, #28]	@ (80034ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	429a      	cmp	r2, r3
 8003498:	d001      	beq.n	800349e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e000      	b.n	80034a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3718      	adds	r7, #24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40021000 	.word	0x40021000
 80034ac:	40022000 	.word	0x40022000

080034b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034b8:	2300      	movs	r3, #0
 80034ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034bc:	2300      	movs	r3, #0
 80034be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d031      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80034d4:	d01a      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80034d6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80034da:	d814      	bhi.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d009      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80034e4:	d10f      	bne.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80034e6:	4b5d      	ldr	r3, [pc, #372]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	4a5c      	ldr	r2, [pc, #368]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034f0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034f2:	e00c      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3304      	adds	r3, #4
 80034f8:	2100      	movs	r1, #0
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 f9ce 	bl	800389c <RCCEx_PLLSAI1_Config>
 8003500:	4603      	mov	r3, r0
 8003502:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003504:	e003      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	74fb      	strb	r3, [r7, #19]
      break;
 800350a:	e000      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800350c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800350e:	7cfb      	ldrb	r3, [r7, #19]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10b      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003514:	4b51      	ldr	r3, [pc, #324]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800351a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003522:	494e      	ldr	r1, [pc, #312]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003524:	4313      	orrs	r3, r2
 8003526:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800352a:	e001      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800352c:	7cfb      	ldrb	r3, [r7, #19]
 800352e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 809e 	beq.w	800367a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800353e:	2300      	movs	r3, #0
 8003540:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003542:	4b46      	ldr	r3, [pc, #280]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800354e:	2301      	movs	r3, #1
 8003550:	e000      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003552:	2300      	movs	r3, #0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00d      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003558:	4b40      	ldr	r3, [pc, #256]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800355a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800355c:	4a3f      	ldr	r2, [pc, #252]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800355e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003562:	6593      	str	r3, [r2, #88]	@ 0x58
 8003564:	4b3d      	ldr	r3, [pc, #244]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800356c:	60bb      	str	r3, [r7, #8]
 800356e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003570:	2301      	movs	r3, #1
 8003572:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003574:	4b3a      	ldr	r3, [pc, #232]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a39      	ldr	r2, [pc, #228]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800357a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800357e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003580:	f7fd fe42 	bl	8001208 <HAL_GetTick>
 8003584:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003586:	e009      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003588:	f7fd fe3e 	bl	8001208 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d902      	bls.n	800359c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	74fb      	strb	r3, [r7, #19]
        break;
 800359a:	e005      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800359c:	4b30      	ldr	r3, [pc, #192]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0ef      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80035a8:	7cfb      	ldrb	r3, [r7, #19]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d15a      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035ae:	4b2b      	ldr	r3, [pc, #172]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d01e      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d019      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035ca:	4b24      	ldr	r3, [pc, #144]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035d4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035d6:	4b21      	ldr	r3, [pc, #132]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035dc:	4a1f      	ldr	r2, [pc, #124]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035e6:	4b1d      	ldr	r3, [pc, #116]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ec:	4a1b      	ldr	r2, [pc, #108]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035f6:	4a19      	ldr	r2, [pc, #100]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	d016      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003608:	f7fd fdfe 	bl	8001208 <HAL_GetTick>
 800360c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800360e:	e00b      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003610:	f7fd fdfa 	bl	8001208 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800361e:	4293      	cmp	r3, r2
 8003620:	d902      	bls.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	74fb      	strb	r3, [r7, #19]
            break;
 8003626:	e006      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003628:	4b0c      	ldr	r3, [pc, #48]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800362a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0ec      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003636:	7cfb      	ldrb	r3, [r7, #19]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10b      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800363c:	4b07      	ldr	r3, [pc, #28]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800363e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003642:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800364a:	4904      	ldr	r1, [pc, #16]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800364c:	4313      	orrs	r3, r2
 800364e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003652:	e009      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003654:	7cfb      	ldrb	r3, [r7, #19]
 8003656:	74bb      	strb	r3, [r7, #18]
 8003658:	e006      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800365a:	bf00      	nop
 800365c:	40021000 	.word	0x40021000
 8003660:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003664:	7cfb      	ldrb	r3, [r7, #19]
 8003666:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003668:	7c7b      	ldrb	r3, [r7, #17]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d105      	bne.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800366e:	4b8a      	ldr	r3, [pc, #552]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003672:	4a89      	ldr	r2, [pc, #548]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003674:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003678:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003686:	4b84      	ldr	r3, [pc, #528]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800368c:	f023 0203 	bic.w	r2, r3, #3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	4980      	ldr	r1, [pc, #512]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003696:	4313      	orrs	r3, r2
 8003698:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036a8:	4b7b      	ldr	r3, [pc, #492]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ae:	f023 020c 	bic.w	r2, r3, #12
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b6:	4978      	ldr	r1, [pc, #480]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0320 	and.w	r3, r3, #32
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036ca:	4b73      	ldr	r3, [pc, #460]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d8:	496f      	ldr	r1, [pc, #444]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036ec:	4b6a      	ldr	r3, [pc, #424]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036f2:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036fa:	4967      	ldr	r1, [pc, #412]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800370e:	4b62      	ldr	r3, [pc, #392]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003714:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800371c:	495e      	ldr	r1, [pc, #376]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800371e:	4313      	orrs	r3, r2
 8003720:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003730:	4b59      	ldr	r3, [pc, #356]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003736:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373e:	4956      	ldr	r1, [pc, #344]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003752:	4b51      	ldr	r3, [pc, #324]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003758:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003760:	494d      	ldr	r1, [pc, #308]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003762:	4313      	orrs	r3, r2
 8003764:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d028      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003774:	4b48      	ldr	r3, [pc, #288]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800377a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003782:	4945      	ldr	r1, [pc, #276]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003792:	d106      	bne.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003794:	4b40      	ldr	r3, [pc, #256]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	4a3f      	ldr	r2, [pc, #252]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800379a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800379e:	60d3      	str	r3, [r2, #12]
 80037a0:	e011      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037aa:	d10c      	bne.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3304      	adds	r3, #4
 80037b0:	2101      	movs	r1, #1
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 f872 	bl	800389c <RCCEx_PLLSAI1_Config>
 80037b8:	4603      	mov	r3, r0
 80037ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80037bc:	7cfb      	ldrb	r3, [r7, #19]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80037c2:	7cfb      	ldrb	r3, [r7, #19]
 80037c4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d028      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037d2:	4b31      	ldr	r3, [pc, #196]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e0:	492d      	ldr	r1, [pc, #180]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037f0:	d106      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037f2:	4b29      	ldr	r3, [pc, #164]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	4a28      	ldr	r2, [pc, #160]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037fc:	60d3      	str	r3, [r2, #12]
 80037fe:	e011      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003804:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003808:	d10c      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	3304      	adds	r3, #4
 800380e:	2101      	movs	r1, #1
 8003810:	4618      	mov	r0, r3
 8003812:	f000 f843 	bl	800389c <RCCEx_PLLSAI1_Config>
 8003816:	4603      	mov	r3, r0
 8003818:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800381a:	7cfb      	ldrb	r3, [r7, #19]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003820:	7cfb      	ldrb	r3, [r7, #19]
 8003822:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d01c      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003830:	4b19      	ldr	r3, [pc, #100]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003836:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800383e:	4916      	ldr	r1, [pc, #88]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003840:	4313      	orrs	r3, r2
 8003842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800384a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800384e:	d10c      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3304      	adds	r3, #4
 8003854:	2102      	movs	r1, #2
 8003856:	4618      	mov	r0, r3
 8003858:	f000 f820 	bl	800389c <RCCEx_PLLSAI1_Config>
 800385c:	4603      	mov	r3, r0
 800385e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003860:	7cfb      	ldrb	r3, [r7, #19]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003866:	7cfb      	ldrb	r3, [r7, #19]
 8003868:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003876:	4b08      	ldr	r3, [pc, #32]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800387c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003884:	4904      	ldr	r1, [pc, #16]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800388c:	7cbb      	ldrb	r3, [r7, #18]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3718      	adds	r7, #24
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40021000 	.word	0x40021000

0800389c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038aa:	4b74      	ldr	r3, [pc, #464]	@ (8003a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d018      	beq.n	80038e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80038b6:	4b71      	ldr	r3, [pc, #452]	@ (8003a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f003 0203 	and.w	r2, r3, #3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d10d      	bne.n	80038e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
       ||
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d009      	beq.n	80038e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80038ce:	4b6b      	ldr	r3, [pc, #428]	@ (8003a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	091b      	lsrs	r3, r3, #4
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	1c5a      	adds	r2, r3, #1
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
       ||
 80038de:	429a      	cmp	r2, r3
 80038e0:	d047      	beq.n	8003972 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	73fb      	strb	r3, [r7, #15]
 80038e6:	e044      	b.n	8003972 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2b03      	cmp	r3, #3
 80038ee:	d018      	beq.n	8003922 <RCCEx_PLLSAI1_Config+0x86>
 80038f0:	2b03      	cmp	r3, #3
 80038f2:	d825      	bhi.n	8003940 <RCCEx_PLLSAI1_Config+0xa4>
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d002      	beq.n	80038fe <RCCEx_PLLSAI1_Config+0x62>
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d009      	beq.n	8003910 <RCCEx_PLLSAI1_Config+0x74>
 80038fc:	e020      	b.n	8003940 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038fe:	4b5f      	ldr	r3, [pc, #380]	@ (8003a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d11d      	bne.n	8003946 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800390e:	e01a      	b.n	8003946 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003910:	4b5a      	ldr	r3, [pc, #360]	@ (8003a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003918:	2b00      	cmp	r3, #0
 800391a:	d116      	bne.n	800394a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003920:	e013      	b.n	800394a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003922:	4b56      	ldr	r3, [pc, #344]	@ (8003a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10f      	bne.n	800394e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800392e:	4b53      	ldr	r3, [pc, #332]	@ (8003a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d109      	bne.n	800394e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800393e:	e006      	b.n	800394e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	73fb      	strb	r3, [r7, #15]
      break;
 8003944:	e004      	b.n	8003950 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003946:	bf00      	nop
 8003948:	e002      	b.n	8003950 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800394a:	bf00      	nop
 800394c:	e000      	b.n	8003950 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800394e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003950:	7bfb      	ldrb	r3, [r7, #15]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10d      	bne.n	8003972 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003956:	4b49      	ldr	r3, [pc, #292]	@ (8003a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6819      	ldr	r1, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	3b01      	subs	r3, #1
 8003968:	011b      	lsls	r3, r3, #4
 800396a:	430b      	orrs	r3, r1
 800396c:	4943      	ldr	r1, [pc, #268]	@ (8003a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 800396e:	4313      	orrs	r3, r2
 8003970:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003972:	7bfb      	ldrb	r3, [r7, #15]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d17c      	bne.n	8003a72 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003978:	4b40      	ldr	r3, [pc, #256]	@ (8003a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a3f      	ldr	r2, [pc, #252]	@ (8003a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 800397e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003982:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003984:	f7fd fc40 	bl	8001208 <HAL_GetTick>
 8003988:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800398a:	e009      	b.n	80039a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800398c:	f7fd fc3c 	bl	8001208 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d902      	bls.n	80039a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	73fb      	strb	r3, [r7, #15]
        break;
 800399e:	e005      	b.n	80039ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039a0:	4b36      	ldr	r3, [pc, #216]	@ (8003a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1ef      	bne.n	800398c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d15f      	bne.n	8003a72 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d110      	bne.n	80039da <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039b8:	4b30      	ldr	r3, [pc, #192]	@ (8003a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80039c0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	6892      	ldr	r2, [r2, #8]
 80039c8:	0211      	lsls	r1, r2, #8
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	68d2      	ldr	r2, [r2, #12]
 80039ce:	06d2      	lsls	r2, r2, #27
 80039d0:	430a      	orrs	r2, r1
 80039d2:	492a      	ldr	r1, [pc, #168]	@ (8003a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	610b      	str	r3, [r1, #16]
 80039d8:	e027      	b.n	8003a2a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d112      	bne.n	8003a06 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039e0:	4b26      	ldr	r3, [pc, #152]	@ (8003a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80039e8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6892      	ldr	r2, [r2, #8]
 80039f0:	0211      	lsls	r1, r2, #8
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	6912      	ldr	r2, [r2, #16]
 80039f6:	0852      	lsrs	r2, r2, #1
 80039f8:	3a01      	subs	r2, #1
 80039fa:	0552      	lsls	r2, r2, #21
 80039fc:	430a      	orrs	r2, r1
 80039fe:	491f      	ldr	r1, [pc, #124]	@ (8003a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	610b      	str	r3, [r1, #16]
 8003a04:	e011      	b.n	8003a2a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a06:	4b1d      	ldr	r3, [pc, #116]	@ (8003a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003a0e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6892      	ldr	r2, [r2, #8]
 8003a16:	0211      	lsls	r1, r2, #8
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6952      	ldr	r2, [r2, #20]
 8003a1c:	0852      	lsrs	r2, r2, #1
 8003a1e:	3a01      	subs	r2, #1
 8003a20:	0652      	lsls	r2, r2, #25
 8003a22:	430a      	orrs	r2, r1
 8003a24:	4915      	ldr	r1, [pc, #84]	@ (8003a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a2a:	4b14      	ldr	r3, [pc, #80]	@ (8003a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a13      	ldr	r2, [pc, #76]	@ (8003a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a30:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a34:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a36:	f7fd fbe7 	bl	8001208 <HAL_GetTick>
 8003a3a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a3c:	e009      	b.n	8003a52 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a3e:	f7fd fbe3 	bl	8001208 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d902      	bls.n	8003a52 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	73fb      	strb	r3, [r7, #15]
          break;
 8003a50:	e005      	b.n	8003a5e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a52:	4b0a      	ldr	r3, [pc, #40]	@ (8003a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0ef      	beq.n	8003a3e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003a5e:	7bfb      	ldrb	r3, [r7, #15]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d106      	bne.n	8003a72 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a64:	4b05      	ldr	r3, [pc, #20]	@ (8003a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a66:	691a      	ldr	r2, [r3, #16]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	4903      	ldr	r1, [pc, #12]	@ (8003a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40021000 	.word	0x40021000

08003a80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e049      	b.n	8003b26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d106      	bne.n	8003aac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7fd f966 	bl	8000d78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3304      	adds	r3, #4
 8003abc:	4619      	mov	r1, r3
 8003abe:	4610      	mov	r0, r2
 8003ac0:	f000 fbae 	bl	8004220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b082      	sub	sp, #8
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e049      	b.n	8003bd4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d106      	bne.n	8003b5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f841 	bl	8003bdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2202      	movs	r2, #2
 8003b5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3304      	adds	r3, #4
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	4610      	mov	r0, r2
 8003b6e:	f000 fb57 	bl	8004220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d020      	beq.n	8003c54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d01b      	beq.n	8003c54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f06f 0202 	mvn.w	r2, #2
 8003c24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	f003 0303 	and.w	r3, r3, #3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 fad1 	bl	80041e2 <HAL_TIM_IC_CaptureCallback>
 8003c40:	e005      	b.n	8003c4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 fac3 	bl	80041ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 fad4 	bl	80041f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f003 0304 	and.w	r3, r3, #4
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d020      	beq.n	8003ca0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d01b      	beq.n	8003ca0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f06f 0204 	mvn.w	r2, #4
 8003c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2202      	movs	r2, #2
 8003c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 faab 	bl	80041e2 <HAL_TIM_IC_CaptureCallback>
 8003c8c:	e005      	b.n	8003c9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 fa9d 	bl	80041ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 faae 	bl	80041f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f003 0308 	and.w	r3, r3, #8
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d020      	beq.n	8003cec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d01b      	beq.n	8003cec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f06f 0208 	mvn.w	r2, #8
 8003cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 fa85 	bl	80041e2 <HAL_TIM_IC_CaptureCallback>
 8003cd8:	e005      	b.n	8003ce6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 fa77 	bl	80041ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 fa88 	bl	80041f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f003 0310 	and.w	r3, r3, #16
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d020      	beq.n	8003d38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f003 0310 	and.w	r3, r3, #16
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d01b      	beq.n	8003d38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f06f 0210 	mvn.w	r2, #16
 8003d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2208      	movs	r2, #8
 8003d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 fa5f 	bl	80041e2 <HAL_TIM_IC_CaptureCallback>
 8003d24:	e005      	b.n	8003d32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 fa51 	bl	80041ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 fa62 	bl	80041f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00c      	beq.n	8003d5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d007      	beq.n	8003d5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f06f 0201 	mvn.w	r2, #1
 8003d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 fa2f 	bl	80041ba <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d104      	bne.n	8003d70 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00c      	beq.n	8003d8a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d007      	beq.n	8003d8a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003d82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 febb 	bl	8004b00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00c      	beq.n	8003dae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d007      	beq.n	8003dae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 feb3 	bl	8004b14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00c      	beq.n	8003dd2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d007      	beq.n	8003dd2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 fa1c 	bl	800420a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f003 0320 	and.w	r3, r3, #32
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00c      	beq.n	8003df6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f003 0320 	and.w	r3, r3, #32
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d007      	beq.n	8003df6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f06f 0220 	mvn.w	r2, #32
 8003dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 fe7b 	bl	8004aec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003df6:	bf00      	nop
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
	...

08003e00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d101      	bne.n	8003e1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	e0ff      	b.n	800401e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b14      	cmp	r3, #20
 8003e2a:	f200 80f0 	bhi.w	800400e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e34:	08003e89 	.word	0x08003e89
 8003e38:	0800400f 	.word	0x0800400f
 8003e3c:	0800400f 	.word	0x0800400f
 8003e40:	0800400f 	.word	0x0800400f
 8003e44:	08003ec9 	.word	0x08003ec9
 8003e48:	0800400f 	.word	0x0800400f
 8003e4c:	0800400f 	.word	0x0800400f
 8003e50:	0800400f 	.word	0x0800400f
 8003e54:	08003f0b 	.word	0x08003f0b
 8003e58:	0800400f 	.word	0x0800400f
 8003e5c:	0800400f 	.word	0x0800400f
 8003e60:	0800400f 	.word	0x0800400f
 8003e64:	08003f4b 	.word	0x08003f4b
 8003e68:	0800400f 	.word	0x0800400f
 8003e6c:	0800400f 	.word	0x0800400f
 8003e70:	0800400f 	.word	0x0800400f
 8003e74:	08003f8d 	.word	0x08003f8d
 8003e78:	0800400f 	.word	0x0800400f
 8003e7c:	0800400f 	.word	0x0800400f
 8003e80:	0800400f 	.word	0x0800400f
 8003e84:	08003fcd 	.word	0x08003fcd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68b9      	ldr	r1, [r7, #8]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fa36 	bl	8004300 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	699a      	ldr	r2, [r3, #24]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0208 	orr.w	r2, r2, #8
 8003ea2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	699a      	ldr	r2, [r3, #24]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0204 	bic.w	r2, r2, #4
 8003eb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6999      	ldr	r1, [r3, #24]
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	691a      	ldr	r2, [r3, #16]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	619a      	str	r2, [r3, #24]
      break;
 8003ec6:	e0a5      	b.n	8004014 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68b9      	ldr	r1, [r7, #8]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 fa92 	bl	80043f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	699a      	ldr	r2, [r3, #24]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ee2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	699a      	ldr	r2, [r3, #24]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ef2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6999      	ldr	r1, [r3, #24]
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	021a      	lsls	r2, r3, #8
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	430a      	orrs	r2, r1
 8003f06:	619a      	str	r2, [r3, #24]
      break;
 8003f08:	e084      	b.n	8004014 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68b9      	ldr	r1, [r7, #8]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 faeb 	bl	80044ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	69da      	ldr	r2, [r3, #28]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f042 0208 	orr.w	r2, r2, #8
 8003f24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	69da      	ldr	r2, [r3, #28]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0204 	bic.w	r2, r2, #4
 8003f34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	69d9      	ldr	r1, [r3, #28]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	61da      	str	r2, [r3, #28]
      break;
 8003f48:	e064      	b.n	8004014 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68b9      	ldr	r1, [r7, #8]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 fb43 	bl	80045dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	69da      	ldr	r2, [r3, #28]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	69da      	ldr	r2, [r3, #28]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	69d9      	ldr	r1, [r3, #28]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	021a      	lsls	r2, r3, #8
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	61da      	str	r2, [r3, #28]
      break;
 8003f8a:	e043      	b.n	8004014 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68b9      	ldr	r1, [r7, #8]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 fb80 	bl	8004698 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0208 	orr.w	r2, r2, #8
 8003fa6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0204 	bic.w	r2, r2, #4
 8003fb6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	691a      	ldr	r2, [r3, #16]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003fca:	e023      	b.n	8004014 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68b9      	ldr	r1, [r7, #8]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 fbb8 	bl	8004748 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fe6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ff6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	021a      	lsls	r2, r3, #8
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800400c:	e002      	b.n	8004014 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	75fb      	strb	r3, [r7, #23]
      break;
 8004012:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800401c:	7dfb      	ldrb	r3, [r7, #23]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop

08004028 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800403c:	2b01      	cmp	r3, #1
 800403e:	d101      	bne.n	8004044 <HAL_TIM_ConfigClockSource+0x1c>
 8004040:	2302      	movs	r3, #2
 8004042:	e0b6      	b.n	80041b2 <HAL_TIM_ConfigClockSource+0x18a>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004062:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004066:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800406e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004080:	d03e      	beq.n	8004100 <HAL_TIM_ConfigClockSource+0xd8>
 8004082:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004086:	f200 8087 	bhi.w	8004198 <HAL_TIM_ConfigClockSource+0x170>
 800408a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800408e:	f000 8086 	beq.w	800419e <HAL_TIM_ConfigClockSource+0x176>
 8004092:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004096:	d87f      	bhi.n	8004198 <HAL_TIM_ConfigClockSource+0x170>
 8004098:	2b70      	cmp	r3, #112	@ 0x70
 800409a:	d01a      	beq.n	80040d2 <HAL_TIM_ConfigClockSource+0xaa>
 800409c:	2b70      	cmp	r3, #112	@ 0x70
 800409e:	d87b      	bhi.n	8004198 <HAL_TIM_ConfigClockSource+0x170>
 80040a0:	2b60      	cmp	r3, #96	@ 0x60
 80040a2:	d050      	beq.n	8004146 <HAL_TIM_ConfigClockSource+0x11e>
 80040a4:	2b60      	cmp	r3, #96	@ 0x60
 80040a6:	d877      	bhi.n	8004198 <HAL_TIM_ConfigClockSource+0x170>
 80040a8:	2b50      	cmp	r3, #80	@ 0x50
 80040aa:	d03c      	beq.n	8004126 <HAL_TIM_ConfigClockSource+0xfe>
 80040ac:	2b50      	cmp	r3, #80	@ 0x50
 80040ae:	d873      	bhi.n	8004198 <HAL_TIM_ConfigClockSource+0x170>
 80040b0:	2b40      	cmp	r3, #64	@ 0x40
 80040b2:	d058      	beq.n	8004166 <HAL_TIM_ConfigClockSource+0x13e>
 80040b4:	2b40      	cmp	r3, #64	@ 0x40
 80040b6:	d86f      	bhi.n	8004198 <HAL_TIM_ConfigClockSource+0x170>
 80040b8:	2b30      	cmp	r3, #48	@ 0x30
 80040ba:	d064      	beq.n	8004186 <HAL_TIM_ConfigClockSource+0x15e>
 80040bc:	2b30      	cmp	r3, #48	@ 0x30
 80040be:	d86b      	bhi.n	8004198 <HAL_TIM_ConfigClockSource+0x170>
 80040c0:	2b20      	cmp	r3, #32
 80040c2:	d060      	beq.n	8004186 <HAL_TIM_ConfigClockSource+0x15e>
 80040c4:	2b20      	cmp	r3, #32
 80040c6:	d867      	bhi.n	8004198 <HAL_TIM_ConfigClockSource+0x170>
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d05c      	beq.n	8004186 <HAL_TIM_ConfigClockSource+0x15e>
 80040cc:	2b10      	cmp	r3, #16
 80040ce:	d05a      	beq.n	8004186 <HAL_TIM_ConfigClockSource+0x15e>
 80040d0:	e062      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040e2:	f000 fc05 	bl	80048f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80040f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	609a      	str	r2, [r3, #8]
      break;
 80040fe:	e04f      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004110:	f000 fbee 	bl	80048f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689a      	ldr	r2, [r3, #8]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004122:	609a      	str	r2, [r3, #8]
      break;
 8004124:	e03c      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004132:	461a      	mov	r2, r3
 8004134:	f000 fb62 	bl	80047fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2150      	movs	r1, #80	@ 0x50
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fbbb 	bl	80048ba <TIM_ITRx_SetConfig>
      break;
 8004144:	e02c      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004152:	461a      	mov	r2, r3
 8004154:	f000 fb81 	bl	800485a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2160      	movs	r1, #96	@ 0x60
 800415e:	4618      	mov	r0, r3
 8004160:	f000 fbab 	bl	80048ba <TIM_ITRx_SetConfig>
      break;
 8004164:	e01c      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004172:	461a      	mov	r2, r3
 8004174:	f000 fb42 	bl	80047fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2140      	movs	r1, #64	@ 0x40
 800417e:	4618      	mov	r0, r3
 8004180:	f000 fb9b 	bl	80048ba <TIM_ITRx_SetConfig>
      break;
 8004184:	e00c      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4619      	mov	r1, r3
 8004190:	4610      	mov	r0, r2
 8004192:	f000 fb92 	bl	80048ba <TIM_ITRx_SetConfig>
      break;
 8004196:	e003      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	73fb      	strb	r3, [r7, #15]
      break;
 800419c:	e000      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800419e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80041b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b083      	sub	sp, #12
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800420a:	b480      	push	{r7}
 800420c:	b083      	sub	sp, #12
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
	...

08004220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a30      	ldr	r2, [pc, #192]	@ (80042f4 <TIM_Base_SetConfig+0xd4>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d003      	beq.n	8004240 <TIM_Base_SetConfig+0x20>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800423e:	d108      	bne.n	8004252 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004246:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	4313      	orrs	r3, r2
 8004250:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a27      	ldr	r2, [pc, #156]	@ (80042f4 <TIM_Base_SetConfig+0xd4>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d00b      	beq.n	8004272 <TIM_Base_SetConfig+0x52>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004260:	d007      	beq.n	8004272 <TIM_Base_SetConfig+0x52>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a24      	ldr	r2, [pc, #144]	@ (80042f8 <TIM_Base_SetConfig+0xd8>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d003      	beq.n	8004272 <TIM_Base_SetConfig+0x52>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a23      	ldr	r2, [pc, #140]	@ (80042fc <TIM_Base_SetConfig+0xdc>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d108      	bne.n	8004284 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	4313      	orrs	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	4313      	orrs	r3, r2
 8004290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a12      	ldr	r2, [pc, #72]	@ (80042f4 <TIM_Base_SetConfig+0xd4>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d007      	beq.n	80042c0 <TIM_Base_SetConfig+0xa0>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a11      	ldr	r2, [pc, #68]	@ (80042f8 <TIM_Base_SetConfig+0xd8>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d003      	beq.n	80042c0 <TIM_Base_SetConfig+0xa0>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a10      	ldr	r2, [pc, #64]	@ (80042fc <TIM_Base_SetConfig+0xdc>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d103      	bne.n	80042c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	691a      	ldr	r2, [r3, #16]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d105      	bne.n	80042e6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f023 0201 	bic.w	r2, r3, #1
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	611a      	str	r2, [r3, #16]
  }
}
 80042e6:	bf00      	nop
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	40012c00 	.word	0x40012c00
 80042f8:	40014000 	.word	0x40014000
 80042fc:	40014400 	.word	0x40014400

08004300 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	f023 0201 	bic.w	r2, r3, #1
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800432e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f023 0303 	bic.w	r3, r3, #3
 800433a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	4313      	orrs	r3, r2
 8004344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f023 0302 	bic.w	r3, r3, #2
 800434c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	4313      	orrs	r3, r2
 8004356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a24      	ldr	r2, [pc, #144]	@ (80043ec <TIM_OC1_SetConfig+0xec>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d007      	beq.n	8004370 <TIM_OC1_SetConfig+0x70>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a23      	ldr	r2, [pc, #140]	@ (80043f0 <TIM_OC1_SetConfig+0xf0>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d003      	beq.n	8004370 <TIM_OC1_SetConfig+0x70>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a22      	ldr	r2, [pc, #136]	@ (80043f4 <TIM_OC1_SetConfig+0xf4>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d10c      	bne.n	800438a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f023 0308 	bic.w	r3, r3, #8
 8004376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f023 0304 	bic.w	r3, r3, #4
 8004388:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a17      	ldr	r2, [pc, #92]	@ (80043ec <TIM_OC1_SetConfig+0xec>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d007      	beq.n	80043a2 <TIM_OC1_SetConfig+0xa2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a16      	ldr	r2, [pc, #88]	@ (80043f0 <TIM_OC1_SetConfig+0xf0>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d003      	beq.n	80043a2 <TIM_OC1_SetConfig+0xa2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a15      	ldr	r2, [pc, #84]	@ (80043f4 <TIM_OC1_SetConfig+0xf4>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d111      	bne.n	80043c6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	621a      	str	r2, [r3, #32]
}
 80043e0:	bf00      	nop
 80043e2:	371c      	adds	r7, #28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	40012c00 	.word	0x40012c00
 80043f0:	40014000 	.word	0x40014000
 80043f4:	40014400 	.word	0x40014400

080043f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	f023 0210 	bic.w	r2, r3, #16
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004426:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800442a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	021b      	lsls	r3, r3, #8
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	4313      	orrs	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	f023 0320 	bic.w	r3, r3, #32
 8004446:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	011b      	lsls	r3, r3, #4
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	4313      	orrs	r3, r2
 8004452:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a22      	ldr	r2, [pc, #136]	@ (80044e0 <TIM_OC2_SetConfig+0xe8>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d10d      	bne.n	8004478 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004462:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	4313      	orrs	r3, r2
 800446e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004476:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a19      	ldr	r2, [pc, #100]	@ (80044e0 <TIM_OC2_SetConfig+0xe8>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d007      	beq.n	8004490 <TIM_OC2_SetConfig+0x98>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a18      	ldr	r2, [pc, #96]	@ (80044e4 <TIM_OC2_SetConfig+0xec>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d003      	beq.n	8004490 <TIM_OC2_SetConfig+0x98>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a17      	ldr	r2, [pc, #92]	@ (80044e8 <TIM_OC2_SetConfig+0xf0>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d113      	bne.n	80044b8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004496:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800449e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	621a      	str	r2, [r3, #32]
}
 80044d2:	bf00      	nop
 80044d4:	371c      	adds	r7, #28
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40012c00 	.word	0x40012c00
 80044e4:	40014000 	.word	0x40014000
 80044e8:	40014400 	.word	0x40014400

080044ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800451a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800451e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f023 0303 	bic.w	r3, r3, #3
 8004526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	4313      	orrs	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	021b      	lsls	r3, r3, #8
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	4313      	orrs	r3, r2
 8004544:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a21      	ldr	r2, [pc, #132]	@ (80045d0 <TIM_OC3_SetConfig+0xe4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d10d      	bne.n	800456a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004554:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	021b      	lsls	r3, r3, #8
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	4313      	orrs	r3, r2
 8004560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a18      	ldr	r2, [pc, #96]	@ (80045d0 <TIM_OC3_SetConfig+0xe4>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d007      	beq.n	8004582 <TIM_OC3_SetConfig+0x96>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a17      	ldr	r2, [pc, #92]	@ (80045d4 <TIM_OC3_SetConfig+0xe8>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d003      	beq.n	8004582 <TIM_OC3_SetConfig+0x96>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a16      	ldr	r2, [pc, #88]	@ (80045d8 <TIM_OC3_SetConfig+0xec>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d113      	bne.n	80045aa <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	011b      	lsls	r3, r3, #4
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	4313      	orrs	r3, r2
 800459c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	011b      	lsls	r3, r3, #4
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	621a      	str	r2, [r3, #32]
}
 80045c4:	bf00      	nop
 80045c6:	371c      	adds	r7, #28
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	40012c00 	.word	0x40012c00
 80045d4:	40014000 	.word	0x40014000
 80045d8:	40014400 	.word	0x40014400

080045dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800460a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800460e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	021b      	lsls	r3, r3, #8
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	4313      	orrs	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800462a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	031b      	lsls	r3, r3, #12
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	4313      	orrs	r3, r2
 8004636:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a14      	ldr	r2, [pc, #80]	@ (800468c <TIM_OC4_SetConfig+0xb0>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d007      	beq.n	8004650 <TIM_OC4_SetConfig+0x74>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a13      	ldr	r2, [pc, #76]	@ (8004690 <TIM_OC4_SetConfig+0xb4>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d003      	beq.n	8004650 <TIM_OC4_SetConfig+0x74>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a12      	ldr	r2, [pc, #72]	@ (8004694 <TIM_OC4_SetConfig+0xb8>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d109      	bne.n	8004664 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004656:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	019b      	lsls	r3, r3, #6
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	4313      	orrs	r3, r2
 8004662:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	621a      	str	r2, [r3, #32]
}
 800467e:	bf00      	nop
 8004680:	371c      	adds	r7, #28
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	40012c00 	.word	0x40012c00
 8004690:	40014000 	.word	0x40014000
 8004694:	40014400 	.word	0x40014400

08004698 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004698:	b480      	push	{r7}
 800469a:	b087      	sub	sp, #28
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80046dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	041b      	lsls	r3, r3, #16
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a13      	ldr	r2, [pc, #76]	@ (800473c <TIM_OC5_SetConfig+0xa4>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d007      	beq.n	8004702 <TIM_OC5_SetConfig+0x6a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a12      	ldr	r2, [pc, #72]	@ (8004740 <TIM_OC5_SetConfig+0xa8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d003      	beq.n	8004702 <TIM_OC5_SetConfig+0x6a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a11      	ldr	r2, [pc, #68]	@ (8004744 <TIM_OC5_SetConfig+0xac>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d109      	bne.n	8004716 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004708:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	021b      	lsls	r3, r3, #8
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	4313      	orrs	r3, r2
 8004714:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	621a      	str	r2, [r3, #32]
}
 8004730:	bf00      	nop
 8004732:	371c      	adds	r7, #28
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	40012c00 	.word	0x40012c00
 8004740:	40014000 	.word	0x40014000
 8004744:	40014400 	.word	0x40014400

08004748 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004748:	b480      	push	{r7}
 800474a:	b087      	sub	sp, #28
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800476e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004776:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800477a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	021b      	lsls	r3, r3, #8
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	4313      	orrs	r3, r2
 8004786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800478e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	051b      	lsls	r3, r3, #20
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	4313      	orrs	r3, r2
 800479a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a14      	ldr	r2, [pc, #80]	@ (80047f0 <TIM_OC6_SetConfig+0xa8>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d007      	beq.n	80047b4 <TIM_OC6_SetConfig+0x6c>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a13      	ldr	r2, [pc, #76]	@ (80047f4 <TIM_OC6_SetConfig+0xac>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d003      	beq.n	80047b4 <TIM_OC6_SetConfig+0x6c>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a12      	ldr	r2, [pc, #72]	@ (80047f8 <TIM_OC6_SetConfig+0xb0>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d109      	bne.n	80047c8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	029b      	lsls	r3, r3, #10
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	621a      	str	r2, [r3, #32]
}
 80047e2:	bf00      	nop
 80047e4:	371c      	adds	r7, #28
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	40012c00 	.word	0x40012c00
 80047f4:	40014000 	.word	0x40014000
 80047f8:	40014400 	.word	0x40014400

080047fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	f023 0201 	bic.w	r2, r3, #1
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	011b      	lsls	r3, r3, #4
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	4313      	orrs	r3, r2
 8004830:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	f023 030a 	bic.w	r3, r3, #10
 8004838:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	4313      	orrs	r3, r2
 8004840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	621a      	str	r2, [r3, #32]
}
 800484e:	bf00      	nop
 8004850:	371c      	adds	r7, #28
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800485a:	b480      	push	{r7}
 800485c:	b087      	sub	sp, #28
 800485e:	af00      	add	r7, sp, #0
 8004860:	60f8      	str	r0, [r7, #12]
 8004862:	60b9      	str	r1, [r7, #8]
 8004864:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	f023 0210 	bic.w	r2, r3, #16
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004884:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	031b      	lsls	r3, r3, #12
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	4313      	orrs	r3, r2
 800488e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004896:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	011b      	lsls	r3, r3, #4
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	4313      	orrs	r3, r2
 80048a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	621a      	str	r2, [r3, #32]
}
 80048ae:	bf00      	nop
 80048b0:	371c      	adds	r7, #28
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b085      	sub	sp, #20
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
 80048c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	f043 0307 	orr.w	r3, r3, #7
 80048dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	609a      	str	r2, [r3, #8]
}
 80048e4:	bf00      	nop
 80048e6:	3714      	adds	r7, #20
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b087      	sub	sp, #28
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800490a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	021a      	lsls	r2, r3, #8
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	431a      	orrs	r2, r3
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	4313      	orrs	r3, r2
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	4313      	orrs	r3, r2
 800491c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	609a      	str	r2, [r3, #8]
}
 8004924:	bf00      	nop
 8004926:	371c      	adds	r7, #28
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004940:	2b01      	cmp	r3, #1
 8004942:	d101      	bne.n	8004948 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004944:	2302      	movs	r3, #2
 8004946:	e04f      	b.n	80049e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a21      	ldr	r2, [pc, #132]	@ (80049f4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d108      	bne.n	8004984 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004978:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	4313      	orrs	r3, r2
 8004982:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800498a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	4313      	orrs	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a14      	ldr	r2, [pc, #80]	@ (80049f4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d009      	beq.n	80049bc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049b0:	d004      	beq.n	80049bc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a10      	ldr	r2, [pc, #64]	@ (80049f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d10c      	bne.n	80049d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	40012c00 	.word	0x40012c00
 80049f8:	40014000 	.word	0x40014000

080049fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d101      	bne.n	8004a18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a14:	2302      	movs	r3, #2
 8004a16:	e060      	b.n	8004ada <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	041b      	lsls	r3, r3, #16
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a14      	ldr	r2, [pc, #80]	@ (8004ae8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d115      	bne.n	8004ac8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa6:	051b      	lsls	r3, r3, #20
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	40012c00 	.word	0x40012c00

08004aec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e040      	b.n	8004bbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d106      	bne.n	8004b50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7fc fa16 	bl	8000f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2224      	movs	r2, #36	@ 0x24
 8004b54:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 0201 	bic.w	r2, r2, #1
 8004b64:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 fa54 	bl	800501c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 f825 	bl	8004bc4 <UART_SetConfig>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d101      	bne.n	8004b84 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e01b      	b.n	8004bbc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689a      	ldr	r2, [r3, #8]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ba2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0201 	orr.w	r2, r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 fad3 	bl	8005160 <UART_CheckIdleState>
 8004bba:	4603      	mov	r3, r0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bc8:	b08a      	sub	sp, #40	@ 0x28
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	431a      	orrs	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	4bb4      	ldr	r3, [pc, #720]	@ (8004ec4 <UART_SetConfig+0x300>)
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	6812      	ldr	r2, [r2, #0]
 8004bfa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004bfc:	430b      	orrs	r3, r1
 8004bfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4aa9      	ldr	r2, [pc, #676]	@ (8004ec8 <UART_SetConfig+0x304>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d004      	beq.n	8004c30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c40:	430a      	orrs	r2, r1
 8004c42:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4aa0      	ldr	r2, [pc, #640]	@ (8004ecc <UART_SetConfig+0x308>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d126      	bne.n	8004c9c <UART_SetConfig+0xd8>
 8004c4e:	4ba0      	ldr	r3, [pc, #640]	@ (8004ed0 <UART_SetConfig+0x30c>)
 8004c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c54:	f003 0303 	and.w	r3, r3, #3
 8004c58:	2b03      	cmp	r3, #3
 8004c5a:	d81b      	bhi.n	8004c94 <UART_SetConfig+0xd0>
 8004c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8004c64 <UART_SetConfig+0xa0>)
 8004c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c62:	bf00      	nop
 8004c64:	08004c75 	.word	0x08004c75
 8004c68:	08004c85 	.word	0x08004c85
 8004c6c:	08004c7d 	.word	0x08004c7d
 8004c70:	08004c8d 	.word	0x08004c8d
 8004c74:	2301      	movs	r3, #1
 8004c76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c7a:	e080      	b.n	8004d7e <UART_SetConfig+0x1ba>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c82:	e07c      	b.n	8004d7e <UART_SetConfig+0x1ba>
 8004c84:	2304      	movs	r3, #4
 8004c86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c8a:	e078      	b.n	8004d7e <UART_SetConfig+0x1ba>
 8004c8c:	2308      	movs	r3, #8
 8004c8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c92:	e074      	b.n	8004d7e <UART_SetConfig+0x1ba>
 8004c94:	2310      	movs	r3, #16
 8004c96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c9a:	e070      	b.n	8004d7e <UART_SetConfig+0x1ba>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a8c      	ldr	r2, [pc, #560]	@ (8004ed4 <UART_SetConfig+0x310>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d138      	bne.n	8004d18 <UART_SetConfig+0x154>
 8004ca6:	4b8a      	ldr	r3, [pc, #552]	@ (8004ed0 <UART_SetConfig+0x30c>)
 8004ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cac:	f003 030c 	and.w	r3, r3, #12
 8004cb0:	2b0c      	cmp	r3, #12
 8004cb2:	d82d      	bhi.n	8004d10 <UART_SetConfig+0x14c>
 8004cb4:	a201      	add	r2, pc, #4	@ (adr r2, 8004cbc <UART_SetConfig+0xf8>)
 8004cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cba:	bf00      	nop
 8004cbc:	08004cf1 	.word	0x08004cf1
 8004cc0:	08004d11 	.word	0x08004d11
 8004cc4:	08004d11 	.word	0x08004d11
 8004cc8:	08004d11 	.word	0x08004d11
 8004ccc:	08004d01 	.word	0x08004d01
 8004cd0:	08004d11 	.word	0x08004d11
 8004cd4:	08004d11 	.word	0x08004d11
 8004cd8:	08004d11 	.word	0x08004d11
 8004cdc:	08004cf9 	.word	0x08004cf9
 8004ce0:	08004d11 	.word	0x08004d11
 8004ce4:	08004d11 	.word	0x08004d11
 8004ce8:	08004d11 	.word	0x08004d11
 8004cec:	08004d09 	.word	0x08004d09
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cf6:	e042      	b.n	8004d7e <UART_SetConfig+0x1ba>
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cfe:	e03e      	b.n	8004d7e <UART_SetConfig+0x1ba>
 8004d00:	2304      	movs	r3, #4
 8004d02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d06:	e03a      	b.n	8004d7e <UART_SetConfig+0x1ba>
 8004d08:	2308      	movs	r3, #8
 8004d0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d0e:	e036      	b.n	8004d7e <UART_SetConfig+0x1ba>
 8004d10:	2310      	movs	r3, #16
 8004d12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d16:	e032      	b.n	8004d7e <UART_SetConfig+0x1ba>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a6a      	ldr	r2, [pc, #424]	@ (8004ec8 <UART_SetConfig+0x304>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d12a      	bne.n	8004d78 <UART_SetConfig+0x1b4>
 8004d22:	4b6b      	ldr	r3, [pc, #428]	@ (8004ed0 <UART_SetConfig+0x30c>)
 8004d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d28:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004d2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d30:	d01a      	beq.n	8004d68 <UART_SetConfig+0x1a4>
 8004d32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d36:	d81b      	bhi.n	8004d70 <UART_SetConfig+0x1ac>
 8004d38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d3c:	d00c      	beq.n	8004d58 <UART_SetConfig+0x194>
 8004d3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d42:	d815      	bhi.n	8004d70 <UART_SetConfig+0x1ac>
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d003      	beq.n	8004d50 <UART_SetConfig+0x18c>
 8004d48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d4c:	d008      	beq.n	8004d60 <UART_SetConfig+0x19c>
 8004d4e:	e00f      	b.n	8004d70 <UART_SetConfig+0x1ac>
 8004d50:	2300      	movs	r3, #0
 8004d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d56:	e012      	b.n	8004d7e <UART_SetConfig+0x1ba>
 8004d58:	2302      	movs	r3, #2
 8004d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d5e:	e00e      	b.n	8004d7e <UART_SetConfig+0x1ba>
 8004d60:	2304      	movs	r3, #4
 8004d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d66:	e00a      	b.n	8004d7e <UART_SetConfig+0x1ba>
 8004d68:	2308      	movs	r3, #8
 8004d6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d6e:	e006      	b.n	8004d7e <UART_SetConfig+0x1ba>
 8004d70:	2310      	movs	r3, #16
 8004d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d76:	e002      	b.n	8004d7e <UART_SetConfig+0x1ba>
 8004d78:	2310      	movs	r3, #16
 8004d7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a51      	ldr	r2, [pc, #324]	@ (8004ec8 <UART_SetConfig+0x304>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d17a      	bne.n	8004e7e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d8c:	2b08      	cmp	r3, #8
 8004d8e:	d824      	bhi.n	8004dda <UART_SetConfig+0x216>
 8004d90:	a201      	add	r2, pc, #4	@ (adr r2, 8004d98 <UART_SetConfig+0x1d4>)
 8004d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d96:	bf00      	nop
 8004d98:	08004dbd 	.word	0x08004dbd
 8004d9c:	08004ddb 	.word	0x08004ddb
 8004da0:	08004dc5 	.word	0x08004dc5
 8004da4:	08004ddb 	.word	0x08004ddb
 8004da8:	08004dcb 	.word	0x08004dcb
 8004dac:	08004ddb 	.word	0x08004ddb
 8004db0:	08004ddb 	.word	0x08004ddb
 8004db4:	08004ddb 	.word	0x08004ddb
 8004db8:	08004dd3 	.word	0x08004dd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dbc:	f7fe faec 	bl	8003398 <HAL_RCC_GetPCLK1Freq>
 8004dc0:	61f8      	str	r0, [r7, #28]
        break;
 8004dc2:	e010      	b.n	8004de6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dc4:	4b44      	ldr	r3, [pc, #272]	@ (8004ed8 <UART_SetConfig+0x314>)
 8004dc6:	61fb      	str	r3, [r7, #28]
        break;
 8004dc8:	e00d      	b.n	8004de6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dca:	f7fe fa4d 	bl	8003268 <HAL_RCC_GetSysClockFreq>
 8004dce:	61f8      	str	r0, [r7, #28]
        break;
 8004dd0:	e009      	b.n	8004de6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dd6:	61fb      	str	r3, [r7, #28]
        break;
 8004dd8:	e005      	b.n	8004de6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004de4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 8107 	beq.w	8004ffc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	4613      	mov	r3, r2
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	4413      	add	r3, r2
 8004df8:	69fa      	ldr	r2, [r7, #28]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d305      	bcc.n	8004e0a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e04:	69fa      	ldr	r2, [r7, #28]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d903      	bls.n	8004e12 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004e10:	e0f4      	b.n	8004ffc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	2200      	movs	r2, #0
 8004e16:	461c      	mov	r4, r3
 8004e18:	4615      	mov	r5, r2
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	f04f 0300 	mov.w	r3, #0
 8004e22:	022b      	lsls	r3, r5, #8
 8004e24:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004e28:	0222      	lsls	r2, r4, #8
 8004e2a:	68f9      	ldr	r1, [r7, #12]
 8004e2c:	6849      	ldr	r1, [r1, #4]
 8004e2e:	0849      	lsrs	r1, r1, #1
 8004e30:	2000      	movs	r0, #0
 8004e32:	4688      	mov	r8, r1
 8004e34:	4681      	mov	r9, r0
 8004e36:	eb12 0a08 	adds.w	sl, r2, r8
 8004e3a:	eb43 0b09 	adc.w	fp, r3, r9
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	603b      	str	r3, [r7, #0]
 8004e46:	607a      	str	r2, [r7, #4]
 8004e48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e4c:	4650      	mov	r0, sl
 8004e4e:	4659      	mov	r1, fp
 8004e50:	f7fb f9bc 	bl	80001cc <__aeabi_uldivmod>
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	4613      	mov	r3, r2
 8004e5a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e62:	d308      	bcc.n	8004e76 <UART_SetConfig+0x2b2>
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e6a:	d204      	bcs.n	8004e76 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	60da      	str	r2, [r3, #12]
 8004e74:	e0c2      	b.n	8004ffc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004e7c:	e0be      	b.n	8004ffc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e86:	d16a      	bne.n	8004f5e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004e88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d834      	bhi.n	8004efa <UART_SetConfig+0x336>
 8004e90:	a201      	add	r2, pc, #4	@ (adr r2, 8004e98 <UART_SetConfig+0x2d4>)
 8004e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e96:	bf00      	nop
 8004e98:	08004ebd 	.word	0x08004ebd
 8004e9c:	08004edd 	.word	0x08004edd
 8004ea0:	08004ee5 	.word	0x08004ee5
 8004ea4:	08004efb 	.word	0x08004efb
 8004ea8:	08004eeb 	.word	0x08004eeb
 8004eac:	08004efb 	.word	0x08004efb
 8004eb0:	08004efb 	.word	0x08004efb
 8004eb4:	08004efb 	.word	0x08004efb
 8004eb8:	08004ef3 	.word	0x08004ef3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ebc:	f7fe fa6c 	bl	8003398 <HAL_RCC_GetPCLK1Freq>
 8004ec0:	61f8      	str	r0, [r7, #28]
        break;
 8004ec2:	e020      	b.n	8004f06 <UART_SetConfig+0x342>
 8004ec4:	efff69f3 	.word	0xefff69f3
 8004ec8:	40008000 	.word	0x40008000
 8004ecc:	40013800 	.word	0x40013800
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	40004400 	.word	0x40004400
 8004ed8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004edc:	f7fe fa72 	bl	80033c4 <HAL_RCC_GetPCLK2Freq>
 8004ee0:	61f8      	str	r0, [r7, #28]
        break;
 8004ee2:	e010      	b.n	8004f06 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ee4:	4b4c      	ldr	r3, [pc, #304]	@ (8005018 <UART_SetConfig+0x454>)
 8004ee6:	61fb      	str	r3, [r7, #28]
        break;
 8004ee8:	e00d      	b.n	8004f06 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eea:	f7fe f9bd 	bl	8003268 <HAL_RCC_GetSysClockFreq>
 8004eee:	61f8      	str	r0, [r7, #28]
        break;
 8004ef0:	e009      	b.n	8004f06 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ef2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ef6:	61fb      	str	r3, [r7, #28]
        break;
 8004ef8:	e005      	b.n	8004f06 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004f04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d077      	beq.n	8004ffc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	005a      	lsls	r2, r3, #1
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	085b      	lsrs	r3, r3, #1
 8004f16:	441a      	add	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f20:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	2b0f      	cmp	r3, #15
 8004f26:	d916      	bls.n	8004f56 <UART_SetConfig+0x392>
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f2e:	d212      	bcs.n	8004f56 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	f023 030f 	bic.w	r3, r3, #15
 8004f38:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	085b      	lsrs	r3, r3, #1
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	f003 0307 	and.w	r3, r3, #7
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	8afb      	ldrh	r3, [r7, #22]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	8afa      	ldrh	r2, [r7, #22]
 8004f52:	60da      	str	r2, [r3, #12]
 8004f54:	e052      	b.n	8004ffc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004f5c:	e04e      	b.n	8004ffc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f5e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f62:	2b08      	cmp	r3, #8
 8004f64:	d827      	bhi.n	8004fb6 <UART_SetConfig+0x3f2>
 8004f66:	a201      	add	r2, pc, #4	@ (adr r2, 8004f6c <UART_SetConfig+0x3a8>)
 8004f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6c:	08004f91 	.word	0x08004f91
 8004f70:	08004f99 	.word	0x08004f99
 8004f74:	08004fa1 	.word	0x08004fa1
 8004f78:	08004fb7 	.word	0x08004fb7
 8004f7c:	08004fa7 	.word	0x08004fa7
 8004f80:	08004fb7 	.word	0x08004fb7
 8004f84:	08004fb7 	.word	0x08004fb7
 8004f88:	08004fb7 	.word	0x08004fb7
 8004f8c:	08004faf 	.word	0x08004faf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f90:	f7fe fa02 	bl	8003398 <HAL_RCC_GetPCLK1Freq>
 8004f94:	61f8      	str	r0, [r7, #28]
        break;
 8004f96:	e014      	b.n	8004fc2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f98:	f7fe fa14 	bl	80033c4 <HAL_RCC_GetPCLK2Freq>
 8004f9c:	61f8      	str	r0, [r7, #28]
        break;
 8004f9e:	e010      	b.n	8004fc2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8005018 <UART_SetConfig+0x454>)
 8004fa2:	61fb      	str	r3, [r7, #28]
        break;
 8004fa4:	e00d      	b.n	8004fc2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fa6:	f7fe f95f 	bl	8003268 <HAL_RCC_GetSysClockFreq>
 8004faa:	61f8      	str	r0, [r7, #28]
        break;
 8004fac:	e009      	b.n	8004fc2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fb2:	61fb      	str	r3, [r7, #28]
        break;
 8004fb4:	e005      	b.n	8004fc2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004fc0:	bf00      	nop
    }

    if (pclk != 0U)
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d019      	beq.n	8004ffc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	085a      	lsrs	r2, r3, #1
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	441a      	add	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fda:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	2b0f      	cmp	r3, #15
 8004fe0:	d909      	bls.n	8004ff6 <UART_SetConfig+0x432>
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fe8:	d205      	bcs.n	8004ff6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	60da      	str	r2, [r3, #12]
 8004ff4:	e002      	b.n	8004ffc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005008:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800500c:	4618      	mov	r0, r3
 800500e:	3728      	adds	r7, #40	@ 0x28
 8005010:	46bd      	mov	sp, r7
 8005012:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005016:	bf00      	nop
 8005018:	00f42400 	.word	0x00f42400

0800501c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005028:	f003 0308 	and.w	r3, r3, #8
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00a      	beq.n	8005046 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00a      	beq.n	8005068 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	430a      	orrs	r2, r1
 8005066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00a      	beq.n	800508a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508e:	f003 0304 	and.w	r3, r3, #4
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00a      	beq.n	80050ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b0:	f003 0310 	and.w	r3, r3, #16
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00a      	beq.n	80050ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d2:	f003 0320 	and.w	r3, r3, #32
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	430a      	orrs	r2, r1
 80050ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d01a      	beq.n	8005132 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005116:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800511a:	d10a      	bne.n	8005132 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	605a      	str	r2, [r3, #4]
  }
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b098      	sub	sp, #96	@ 0x60
 8005164:	af02      	add	r7, sp, #8
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005170:	f7fc f84a 	bl	8001208 <HAL_GetTick>
 8005174:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0308 	and.w	r3, r3, #8
 8005180:	2b08      	cmp	r3, #8
 8005182:	d12e      	bne.n	80051e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005184:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800518c:	2200      	movs	r2, #0
 800518e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f88c 	bl	80052b0 <UART_WaitOnFlagUntilTimeout>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d021      	beq.n	80051e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051a6:	e853 3f00 	ldrex	r3, [r3]
 80051aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	461a      	mov	r2, r3
 80051ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80051be:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051c4:	e841 2300 	strex	r3, r2, [r1]
 80051c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1e6      	bne.n	800519e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2220      	movs	r2, #32
 80051d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e062      	b.n	80052a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b04      	cmp	r3, #4
 80051ee:	d149      	bne.n	8005284 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051f8:	2200      	movs	r2, #0
 80051fa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f856 	bl	80052b0 <UART_WaitOnFlagUntilTimeout>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d03c      	beq.n	8005284 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005212:	e853 3f00 	ldrex	r3, [r3]
 8005216:	623b      	str	r3, [r7, #32]
   return(result);
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800521e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	461a      	mov	r2, r3
 8005226:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005228:	633b      	str	r3, [r7, #48]	@ 0x30
 800522a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800522e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005230:	e841 2300 	strex	r3, r2, [r1]
 8005234:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1e6      	bne.n	800520a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3308      	adds	r3, #8
 8005242:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	e853 3f00 	ldrex	r3, [r3]
 800524a:	60fb      	str	r3, [r7, #12]
   return(result);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f023 0301 	bic.w	r3, r3, #1
 8005252:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	3308      	adds	r3, #8
 800525a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800525c:	61fa      	str	r2, [r7, #28]
 800525e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005260:	69b9      	ldr	r1, [r7, #24]
 8005262:	69fa      	ldr	r2, [r7, #28]
 8005264:	e841 2300 	strex	r3, r2, [r1]
 8005268:	617b      	str	r3, [r7, #20]
   return(result);
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1e5      	bne.n	800523c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2220      	movs	r2, #32
 8005274:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e011      	b.n	80052a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2220      	movs	r2, #32
 8005288:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2220      	movs	r2, #32
 800528e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3758      	adds	r7, #88	@ 0x58
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	603b      	str	r3, [r7, #0]
 80052bc:	4613      	mov	r3, r2
 80052be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052c0:	e04f      	b.n	8005362 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c8:	d04b      	beq.n	8005362 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ca:	f7fb ff9d 	bl	8001208 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d302      	bcc.n	80052e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e04e      	b.n	8005382 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0304 	and.w	r3, r3, #4
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d037      	beq.n	8005362 <UART_WaitOnFlagUntilTimeout+0xb2>
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2b80      	cmp	r3, #128	@ 0x80
 80052f6:	d034      	beq.n	8005362 <UART_WaitOnFlagUntilTimeout+0xb2>
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2b40      	cmp	r3, #64	@ 0x40
 80052fc:	d031      	beq.n	8005362 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	69db      	ldr	r3, [r3, #28]
 8005304:	f003 0308 	and.w	r3, r3, #8
 8005308:	2b08      	cmp	r3, #8
 800530a:	d110      	bne.n	800532e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2208      	movs	r2, #8
 8005312:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 f838 	bl	800538a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2208      	movs	r2, #8
 800531e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e029      	b.n	8005382 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69db      	ldr	r3, [r3, #28]
 8005334:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005338:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800533c:	d111      	bne.n	8005362 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005346:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 f81e 	bl	800538a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2220      	movs	r2, #32
 8005352:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e00f      	b.n	8005382 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	69da      	ldr	r2, [r3, #28]
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	4013      	ands	r3, r2
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	429a      	cmp	r2, r3
 8005370:	bf0c      	ite	eq
 8005372:	2301      	moveq	r3, #1
 8005374:	2300      	movne	r3, #0
 8005376:	b2db      	uxtb	r3, r3
 8005378:	461a      	mov	r2, r3
 800537a:	79fb      	ldrb	r3, [r7, #7]
 800537c:	429a      	cmp	r2, r3
 800537e:	d0a0      	beq.n	80052c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800538a:	b480      	push	{r7}
 800538c:	b095      	sub	sp, #84	@ 0x54
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800539a:	e853 3f00 	ldrex	r3, [r3]
 800539e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	461a      	mov	r2, r3
 80053ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80053b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053b8:	e841 2300 	strex	r3, r2, [r1]
 80053bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e6      	bne.n	8005392 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	3308      	adds	r3, #8
 80053ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053cc:	6a3b      	ldr	r3, [r7, #32]
 80053ce:	e853 3f00 	ldrex	r3, [r3]
 80053d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	f023 0301 	bic.w	r3, r3, #1
 80053da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	3308      	adds	r3, #8
 80053e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053ec:	e841 2300 	strex	r3, r2, [r1]
 80053f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1e5      	bne.n	80053c4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d118      	bne.n	8005432 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	e853 3f00 	ldrex	r3, [r3]
 800540c:	60bb      	str	r3, [r7, #8]
   return(result);
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	f023 0310 	bic.w	r3, r3, #16
 8005414:	647b      	str	r3, [r7, #68]	@ 0x44
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	461a      	mov	r2, r3
 800541c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800541e:	61bb      	str	r3, [r7, #24]
 8005420:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005422:	6979      	ldr	r1, [r7, #20]
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	e841 2300 	strex	r3, r2, [r1]
 800542a:	613b      	str	r3, [r7, #16]
   return(result);
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1e6      	bne.n	8005400 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2220      	movs	r2, #32
 8005436:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005446:	bf00      	nop
 8005448:	3754      	adds	r7, #84	@ 0x54
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <memset>:
 8005452:	4402      	add	r2, r0
 8005454:	4603      	mov	r3, r0
 8005456:	4293      	cmp	r3, r2
 8005458:	d100      	bne.n	800545c <memset+0xa>
 800545a:	4770      	bx	lr
 800545c:	f803 1b01 	strb.w	r1, [r3], #1
 8005460:	e7f9      	b.n	8005456 <memset+0x4>
	...

08005464 <__libc_init_array>:
 8005464:	b570      	push	{r4, r5, r6, lr}
 8005466:	4d0d      	ldr	r5, [pc, #52]	@ (800549c <__libc_init_array+0x38>)
 8005468:	4c0d      	ldr	r4, [pc, #52]	@ (80054a0 <__libc_init_array+0x3c>)
 800546a:	1b64      	subs	r4, r4, r5
 800546c:	10a4      	asrs	r4, r4, #2
 800546e:	2600      	movs	r6, #0
 8005470:	42a6      	cmp	r6, r4
 8005472:	d109      	bne.n	8005488 <__libc_init_array+0x24>
 8005474:	4d0b      	ldr	r5, [pc, #44]	@ (80054a4 <__libc_init_array+0x40>)
 8005476:	4c0c      	ldr	r4, [pc, #48]	@ (80054a8 <__libc_init_array+0x44>)
 8005478:	f000 f818 	bl	80054ac <_init>
 800547c:	1b64      	subs	r4, r4, r5
 800547e:	10a4      	asrs	r4, r4, #2
 8005480:	2600      	movs	r6, #0
 8005482:	42a6      	cmp	r6, r4
 8005484:	d105      	bne.n	8005492 <__libc_init_array+0x2e>
 8005486:	bd70      	pop	{r4, r5, r6, pc}
 8005488:	f855 3b04 	ldr.w	r3, [r5], #4
 800548c:	4798      	blx	r3
 800548e:	3601      	adds	r6, #1
 8005490:	e7ee      	b.n	8005470 <__libc_init_array+0xc>
 8005492:	f855 3b04 	ldr.w	r3, [r5], #4
 8005496:	4798      	blx	r3
 8005498:	3601      	adds	r6, #1
 800549a:	e7f2      	b.n	8005482 <__libc_init_array+0x1e>
 800549c:	08005514 	.word	0x08005514
 80054a0:	08005514 	.word	0x08005514
 80054a4:	08005514 	.word	0x08005514
 80054a8:	08005518 	.word	0x08005518

080054ac <_init>:
 80054ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ae:	bf00      	nop
 80054b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054b2:	bc08      	pop	{r3}
 80054b4:	469e      	mov	lr, r3
 80054b6:	4770      	bx	lr

080054b8 <_fini>:
 80054b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ba:	bf00      	nop
 80054bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054be:	bc08      	pop	{r3}
 80054c0:	469e      	mov	lr, r3
 80054c2:	4770      	bx	lr

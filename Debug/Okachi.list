
Okachi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fa8  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08006134  08006134  00007134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006184  08006184  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006184  08006184  00007184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800618c  0800618c  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800618c  0800618c  0000718c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006190  08006190  00007190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006194  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000464  20000068  080061fc  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  080061fc  000084cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001406f  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002df6  00000000  00000000  0001c107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  0001eefd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e4a  00000000  00000000  0002017d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023e2d  00000000  00000000  00020fc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001720c  00000000  00000000  00044df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dae6f  00000000  00000000  0005c000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136e6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005338  00000000  00000000  00136eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000068 	.word	0x20000068
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800611c 	.word	0x0800611c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	2000006c 	.word	0x2000006c
 80001c8:	0800611c 	.word	0x0800611c

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96a 	b.w	80004b8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	460c      	mov	r4, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14e      	bne.n	80002a6 <__udivmoddi4+0xaa>
 8000208:	4694      	mov	ip, r2
 800020a:	458c      	cmp	ip, r1
 800020c:	4686      	mov	lr, r0
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	d962      	bls.n	80002da <__udivmoddi4+0xde>
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0320 	rsb	r3, r2, #32
 800021a:	4091      	lsls	r1, r2
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	fa0c fc02 	lsl.w	ip, ip, r2
 8000224:	4319      	orrs	r1, r3
 8000226:	fa00 fe02 	lsl.w	lr, r0, r2
 800022a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022e:	fa1f f68c 	uxth.w	r6, ip
 8000232:	fbb1 f4f7 	udiv	r4, r1, r7
 8000236:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023a:	fb07 1114 	mls	r1, r7, r4, r1
 800023e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000242:	fb04 f106 	mul.w	r1, r4, r6
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000252:	f080 8112 	bcs.w	800047a <__udivmoddi4+0x27e>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 810f 	bls.w	800047a <__udivmoddi4+0x27e>
 800025c:	3c02      	subs	r4, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a59      	subs	r1, r3, r1
 8000262:	fa1f f38e 	uxth.w	r3, lr
 8000266:	fbb1 f0f7 	udiv	r0, r1, r7
 800026a:	fb07 1110 	mls	r1, r7, r0, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb00 f606 	mul.w	r6, r0, r6
 8000276:	429e      	cmp	r6, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x94>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000282:	f080 80fc 	bcs.w	800047e <__udivmoddi4+0x282>
 8000286:	429e      	cmp	r6, r3
 8000288:	f240 80f9 	bls.w	800047e <__udivmoddi4+0x282>
 800028c:	4463      	add	r3, ip
 800028e:	3802      	subs	r0, #2
 8000290:	1b9b      	subs	r3, r3, r6
 8000292:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa6>
 800029a:	40d3      	lsrs	r3, r2
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xba>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb4>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x150>
 80002be:	42a3      	cmp	r3, r4
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xcc>
 80002c2:	4290      	cmp	r0, r2
 80002c4:	f0c0 80f0 	bcc.w	80004a8 <__udivmoddi4+0x2ac>
 80002c8:	1a86      	subs	r6, r0, r2
 80002ca:	eb64 0303 	sbc.w	r3, r4, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	2d00      	cmp	r5, #0
 80002d2:	d0e6      	beq.n	80002a2 <__udivmoddi4+0xa6>
 80002d4:	e9c5 6300 	strd	r6, r3, [r5]
 80002d8:	e7e3      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002da:	2a00      	cmp	r2, #0
 80002dc:	f040 8090 	bne.w	8000400 <__udivmoddi4+0x204>
 80002e0:	eba1 040c 	sub.w	r4, r1, ip
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	fa1f f78c 	uxth.w	r7, ip
 80002ec:	2101      	movs	r1, #1
 80002ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	fb08 4416 	mls	r4, r8, r6, r4
 80002fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fe:	fb07 f006 	mul.w	r0, r7, r6
 8000302:	4298      	cmp	r0, r3
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0x11c>
 8000306:	eb1c 0303 	adds.w	r3, ip, r3
 800030a:	f106 34ff 	add.w	r4, r6, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x11a>
 8000310:	4298      	cmp	r0, r3
 8000312:	f200 80cd 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 8000316:	4626      	mov	r6, r4
 8000318:	1a1c      	subs	r4, r3, r0
 800031a:	fa1f f38e 	uxth.w	r3, lr
 800031e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000322:	fb08 4410 	mls	r4, r8, r0, r4
 8000326:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032a:	fb00 f707 	mul.w	r7, r0, r7
 800032e:	429f      	cmp	r7, r3
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x148>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f100 34ff 	add.w	r4, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x146>
 800033c:	429f      	cmp	r7, r3
 800033e:	f200 80b0 	bhi.w	80004a2 <__udivmoddi4+0x2a6>
 8000342:	4620      	mov	r0, r4
 8000344:	1bdb      	subs	r3, r3, r7
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x9c>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa20 fc06 	lsr.w	ip, r0, r6
 800035c:	fa04 f301 	lsl.w	r3, r4, r1
 8000360:	ea43 030c 	orr.w	r3, r3, ip
 8000364:	40f4      	lsrs	r4, r6
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	0c38      	lsrs	r0, r7, #16
 800036c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000370:	fbb4 fef0 	udiv	lr, r4, r0
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fb00 441e 	mls	r4, r0, lr, r4
 800037c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000380:	fb0e f90c 	mul.w	r9, lr, ip
 8000384:	45a1      	cmp	r9, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x1a6>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000392:	f080 8084 	bcs.w	800049e <__udivmoddi4+0x2a2>
 8000396:	45a1      	cmp	r9, r4
 8000398:	f240 8081 	bls.w	800049e <__udivmoddi4+0x2a2>
 800039c:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a0:	443c      	add	r4, r7
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	fa1f f983 	uxth.w	r9, r3
 80003aa:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ae:	fb00 4413 	mls	r4, r0, r3, r4
 80003b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ba:	45a4      	cmp	ip, r4
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x1d2>
 80003be:	193c      	adds	r4, r7, r4
 80003c0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c4:	d267      	bcs.n	8000496 <__udivmoddi4+0x29a>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d965      	bls.n	8000496 <__udivmoddi4+0x29a>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d2:	fba0 9302 	umull	r9, r3, r0, r2
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	429c      	cmp	r4, r3
 80003dc:	46ce      	mov	lr, r9
 80003de:	469c      	mov	ip, r3
 80003e0:	d351      	bcc.n	8000486 <__udivmoddi4+0x28a>
 80003e2:	d04e      	beq.n	8000482 <__udivmoddi4+0x286>
 80003e4:	b155      	cbz	r5, 80003fc <__udivmoddi4+0x200>
 80003e6:	ebb8 030e 	subs.w	r3, r8, lr
 80003ea:	eb64 040c 	sbc.w	r4, r4, ip
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	431e      	orrs	r6, r3
 80003f6:	40cc      	lsrs	r4, r1
 80003f8:	e9c5 6400 	strd	r6, r4, [r5]
 80003fc:	2100      	movs	r1, #0
 80003fe:	e750      	b.n	80002a2 <__udivmoddi4+0xa6>
 8000400:	f1c2 0320 	rsb	r3, r2, #32
 8000404:	fa20 f103 	lsr.w	r1, r0, r3
 8000408:	fa0c fc02 	lsl.w	ip, ip, r2
 800040c:	fa24 f303 	lsr.w	r3, r4, r3
 8000410:	4094      	lsls	r4, r2
 8000412:	430c      	orrs	r4, r1
 8000414:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000418:	fa00 fe02 	lsl.w	lr, r0, r2
 800041c:	fa1f f78c 	uxth.w	r7, ip
 8000420:	fbb3 f0f8 	udiv	r0, r3, r8
 8000424:	fb08 3110 	mls	r1, r8, r0, r3
 8000428:	0c23      	lsrs	r3, r4, #16
 800042a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042e:	fb00 f107 	mul.w	r1, r0, r7
 8000432:	4299      	cmp	r1, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x24c>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 36ff 	add.w	r6, r0, #4294967295
 800043e:	d22c      	bcs.n	800049a <__udivmoddi4+0x29e>
 8000440:	4299      	cmp	r1, r3
 8000442:	d92a      	bls.n	800049a <__udivmoddi4+0x29e>
 8000444:	3802      	subs	r0, #2
 8000446:	4463      	add	r3, ip
 8000448:	1a5b      	subs	r3, r3, r1
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000450:	fb08 3311 	mls	r3, r8, r1, r3
 8000454:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000458:	fb01 f307 	mul.w	r3, r1, r7
 800045c:	42a3      	cmp	r3, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x276>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f101 36ff 	add.w	r6, r1, #4294967295
 8000468:	d213      	bcs.n	8000492 <__udivmoddi4+0x296>
 800046a:	42a3      	cmp	r3, r4
 800046c:	d911      	bls.n	8000492 <__udivmoddi4+0x296>
 800046e:	3902      	subs	r1, #2
 8000470:	4464      	add	r4, ip
 8000472:	1ae4      	subs	r4, r4, r3
 8000474:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000478:	e739      	b.n	80002ee <__udivmoddi4+0xf2>
 800047a:	4604      	mov	r4, r0
 800047c:	e6f0      	b.n	8000260 <__udivmoddi4+0x64>
 800047e:	4608      	mov	r0, r1
 8000480:	e706      	b.n	8000290 <__udivmoddi4+0x94>
 8000482:	45c8      	cmp	r8, r9
 8000484:	d2ae      	bcs.n	80003e4 <__udivmoddi4+0x1e8>
 8000486:	ebb9 0e02 	subs.w	lr, r9, r2
 800048a:	eb63 0c07 	sbc.w	ip, r3, r7
 800048e:	3801      	subs	r0, #1
 8000490:	e7a8      	b.n	80003e4 <__udivmoddi4+0x1e8>
 8000492:	4631      	mov	r1, r6
 8000494:	e7ed      	b.n	8000472 <__udivmoddi4+0x276>
 8000496:	4603      	mov	r3, r0
 8000498:	e799      	b.n	80003ce <__udivmoddi4+0x1d2>
 800049a:	4630      	mov	r0, r6
 800049c:	e7d4      	b.n	8000448 <__udivmoddi4+0x24c>
 800049e:	46d6      	mov	lr, sl
 80004a0:	e77f      	b.n	80003a2 <__udivmoddi4+0x1a6>
 80004a2:	4463      	add	r3, ip
 80004a4:	3802      	subs	r0, #2
 80004a6:	e74d      	b.n	8000344 <__udivmoddi4+0x148>
 80004a8:	4606      	mov	r6, r0
 80004aa:	4623      	mov	r3, r4
 80004ac:	4608      	mov	r0, r1
 80004ae:	e70f      	b.n	80002d0 <__udivmoddi4+0xd4>
 80004b0:	3e02      	subs	r6, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	e730      	b.n	8000318 <__udivmoddi4+0x11c>
 80004b6:	bf00      	nop

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop

080004bc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004c2:	463b      	mov	r3, r7
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	609a      	str	r2, [r3, #8]
 80004cc:	60da      	str	r2, [r3, #12]
 80004ce:	611a      	str	r2, [r3, #16]
 80004d0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004d2:	4b46      	ldr	r3, [pc, #280]	@ (80005ec <MX_ADC1_Init+0x130>)
 80004d4:	4a46      	ldr	r2, [pc, #280]	@ (80005f0 <MX_ADC1_Init+0x134>)
 80004d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80004d8:	4b44      	ldr	r3, [pc, #272]	@ (80005ec <MX_ADC1_Init+0x130>)
 80004da:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80004de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004e0:	4b42      	ldr	r3, [pc, #264]	@ (80005ec <MX_ADC1_Init+0x130>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004e6:	4b41      	ldr	r3, [pc, #260]	@ (80005ec <MX_ADC1_Init+0x130>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004ec:	4b3f      	ldr	r3, [pc, #252]	@ (80005ec <MX_ADC1_Init+0x130>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80004f2:	4b3e      	ldr	r3, [pc, #248]	@ (80005ec <MX_ADC1_Init+0x130>)
 80004f4:	2208      	movs	r2, #8
 80004f6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004f8:	4b3c      	ldr	r3, [pc, #240]	@ (80005ec <MX_ADC1_Init+0x130>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004fe:	4b3b      	ldr	r3, [pc, #236]	@ (80005ec <MX_ADC1_Init+0x130>)
 8000500:	2200      	movs	r2, #0
 8000502:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 8000504:	4b39      	ldr	r3, [pc, #228]	@ (80005ec <MX_ADC1_Init+0x130>)
 8000506:	2205      	movs	r2, #5
 8000508:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800050a:	4b38      	ldr	r3, [pc, #224]	@ (80005ec <MX_ADC1_Init+0x130>)
 800050c:	2200      	movs	r2, #0
 800050e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000512:	4b36      	ldr	r3, [pc, #216]	@ (80005ec <MX_ADC1_Init+0x130>)
 8000514:	2200      	movs	r2, #0
 8000516:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000518:	4b34      	ldr	r3, [pc, #208]	@ (80005ec <MX_ADC1_Init+0x130>)
 800051a:	2200      	movs	r2, #0
 800051c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800051e:	4b33      	ldr	r3, [pc, #204]	@ (80005ec <MX_ADC1_Init+0x130>)
 8000520:	2201      	movs	r2, #1
 8000522:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000526:	4b31      	ldr	r3, [pc, #196]	@ (80005ec <MX_ADC1_Init+0x130>)
 8000528:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800052c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800052e:	4b2f      	ldr	r3, [pc, #188]	@ (80005ec <MX_ADC1_Init+0x130>)
 8000530:	2200      	movs	r2, #0
 8000532:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000536:	482d      	ldr	r0, [pc, #180]	@ (80005ec <MX_ADC1_Init+0x130>)
 8000538:	f001 f8ac 	bl	8001694 <HAL_ADC_Init>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000542:	f000 fa0d 	bl	8000960 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000546:	4b2b      	ldr	r3, [pc, #172]	@ (80005f4 <MX_ADC1_Init+0x138>)
 8000548:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800054a:	2306      	movs	r3, #6
 800054c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800054e:	2302      	movs	r3, #2
 8000550:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000552:	237f      	movs	r3, #127	@ 0x7f
 8000554:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000556:	2304      	movs	r3, #4
 8000558:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800055a:	2300      	movs	r3, #0
 800055c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800055e:	463b      	mov	r3, r7
 8000560:	4619      	mov	r1, r3
 8000562:	4822      	ldr	r0, [pc, #136]	@ (80005ec <MX_ADC1_Init+0x130>)
 8000564:	f001 f9d8 	bl	8001918 <HAL_ADC_ConfigChannel>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800056e:	f000 f9f7 	bl	8000960 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000572:	4b21      	ldr	r3, [pc, #132]	@ (80005f8 <MX_ADC1_Init+0x13c>)
 8000574:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000576:	230c      	movs	r3, #12
 8000578:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800057a:	463b      	mov	r3, r7
 800057c:	4619      	mov	r1, r3
 800057e:	481b      	ldr	r0, [pc, #108]	@ (80005ec <MX_ADC1_Init+0x130>)
 8000580:	f001 f9ca 	bl	8001918 <HAL_ADC_ConfigChannel>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800058a:	f000 f9e9 	bl	8000960 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800058e:	4b1b      	ldr	r3, [pc, #108]	@ (80005fc <MX_ADC1_Init+0x140>)
 8000590:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000592:	2312      	movs	r3, #18
 8000594:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000596:	463b      	mov	r3, r7
 8000598:	4619      	mov	r1, r3
 800059a:	4814      	ldr	r0, [pc, #80]	@ (80005ec <MX_ADC1_Init+0x130>)
 800059c:	f001 f9bc 	bl	8001918 <HAL_ADC_ConfigChannel>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80005a6:	f000 f9db 	bl	8000960 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005aa:	4b15      	ldr	r3, [pc, #84]	@ (8000600 <MX_ADC1_Init+0x144>)
 80005ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80005ae:	2318      	movs	r3, #24
 80005b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b2:	463b      	mov	r3, r7
 80005b4:	4619      	mov	r1, r3
 80005b6:	480d      	ldr	r0, [pc, #52]	@ (80005ec <MX_ADC1_Init+0x130>)
 80005b8:	f001 f9ae 	bl	8001918 <HAL_ADC_ConfigChannel>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 80005c2:	f000 f9cd 	bl	8000960 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80005c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000604 <MX_ADC1_Init+0x148>)
 80005c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80005ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005d0:	463b      	mov	r3, r7
 80005d2:	4619      	mov	r1, r3
 80005d4:	4805      	ldr	r0, [pc, #20]	@ (80005ec <MX_ADC1_Init+0x130>)
 80005d6:	f001 f99f 	bl	8001918 <HAL_ADC_ConfigChannel>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 80005e0:	f000 f9be 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005e4:	bf00      	nop
 80005e6:	3718      	adds	r7, #24
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000084 	.word	0x20000084
 80005f0:	50040000 	.word	0x50040000
 80005f4:	14f00020 	.word	0x14f00020
 80005f8:	19200040 	.word	0x19200040
 80005fc:	1d500080 	.word	0x1d500080
 8000600:	21800100 	.word	0x21800100
 8000604:	25b00200 	.word	0x25b00200

08000608 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b09e      	sub	sp, #120	@ 0x78
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000610:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	2254      	movs	r2, #84	@ 0x54
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f005 fac3 	bl	8005bb4 <memset>
  if(adcHandle->Instance==ADC1)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a3b      	ldr	r2, [pc, #236]	@ (8000720 <HAL_ADC_MspInit+0x118>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d16e      	bne.n	8000716 <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000638:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800063c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800063e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000642:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000644:	2301      	movs	r3, #1
 8000646:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000648:	2301      	movs	r3, #1
 800064a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800064c:	2310      	movs	r3, #16
 800064e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000650:	2307      	movs	r3, #7
 8000652:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000654:	2302      	movs	r3, #2
 8000656:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000658:	2302      	movs	r3, #2
 800065a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800065c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000660:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000662:	f107 0310 	add.w	r3, r7, #16
 8000666:	4618      	mov	r0, r3
 8000668:	f002 ffd0 	bl	800360c <HAL_RCCEx_PeriphCLKConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000672:	f000 f975 	bl	8000960 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000676:	4b2b      	ldr	r3, [pc, #172]	@ (8000724 <HAL_ADC_MspInit+0x11c>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067a:	4a2a      	ldr	r2, [pc, #168]	@ (8000724 <HAL_ADC_MspInit+0x11c>)
 800067c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000680:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000682:	4b28      	ldr	r3, [pc, #160]	@ (8000724 <HAL_ADC_MspInit+0x11c>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000686:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	4b25      	ldr	r3, [pc, #148]	@ (8000724 <HAL_ADC_MspInit+0x11c>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	4a24      	ldr	r2, [pc, #144]	@ (8000724 <HAL_ADC_MspInit+0x11c>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800069a:	4b22      	ldr	r3, [pc, #136]	@ (8000724 <HAL_ADC_MspInit+0x11c>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80006a6:	231f      	movs	r3, #31
 80006a8:	667b      	str	r3, [r7, #100]	@ 0x64
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006aa:	230b      	movs	r3, #11
 80006ac:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80006b6:	4619      	mov	r1, r3
 80006b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006bc:	f001 ff88 	bl	80025d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80006c0:	4b19      	ldr	r3, [pc, #100]	@ (8000728 <HAL_ADC_MspInit+0x120>)
 80006c2:	4a1a      	ldr	r2, [pc, #104]	@ (800072c <HAL_ADC_MspInit+0x124>)
 80006c4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80006c6:	4b18      	ldr	r3, [pc, #96]	@ (8000728 <HAL_ADC_MspInit+0x120>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006cc:	4b16      	ldr	r3, [pc, #88]	@ (8000728 <HAL_ADC_MspInit+0x120>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006d2:	4b15      	ldr	r3, [pc, #84]	@ (8000728 <HAL_ADC_MspInit+0x120>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006d8:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <HAL_ADC_MspInit+0x120>)
 80006da:	2280      	movs	r2, #128	@ 0x80
 80006dc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006de:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <HAL_ADC_MspInit+0x120>)
 80006e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006e4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006e6:	4b10      	ldr	r3, [pc, #64]	@ (8000728 <HAL_ADC_MspInit+0x120>)
 80006e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <HAL_ADC_MspInit+0x120>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <HAL_ADC_MspInit+0x120>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006fa:	480b      	ldr	r0, [pc, #44]	@ (8000728 <HAL_ADC_MspInit+0x120>)
 80006fc:	f001 fe00 	bl	8002300 <HAL_DMA_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8000706:	f000 f92b 	bl	8000960 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4a06      	ldr	r2, [pc, #24]	@ (8000728 <HAL_ADC_MspInit+0x120>)
 800070e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000710:	4a05      	ldr	r2, [pc, #20]	@ (8000728 <HAL_ADC_MspInit+0x120>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000716:	bf00      	nop
 8000718:	3778      	adds	r7, #120	@ 0x78
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	50040000 	.word	0x50040000
 8000724:	40021000 	.word	0x40021000
 8000728:	200000e8 	.word	0x200000e8
 800072c:	40020008 	.word	0x40020008

08000730 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000736:	4b14      	ldr	r3, [pc, #80]	@ (8000788 <MX_DMA_Init+0x58>)
 8000738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800073a:	4a13      	ldr	r2, [pc, #76]	@ (8000788 <MX_DMA_Init+0x58>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6493      	str	r3, [r2, #72]	@ 0x48
 8000742:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <MX_DMA_Init+0x58>)
 8000744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	2100      	movs	r1, #0
 8000752:	200b      	movs	r0, #11
 8000754:	f001 fd9d 	bl	8002292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000758:	200b      	movs	r0, #11
 800075a:	f001 fdb6 	bl	80022ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2100      	movs	r1, #0
 8000762:	200e      	movs	r0, #14
 8000764:	f001 fd95 	bl	8002292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000768:	200e      	movs	r0, #14
 800076a:	f001 fdae 	bl	80022ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	2100      	movs	r1, #0
 8000772:	200f      	movs	r0, #15
 8000774:	f001 fd8d 	bl	8002292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000778:	200f      	movs	r0, #15
 800077a:	f001 fda6 	bl	80022ca <HAL_NVIC_EnableIRQ>

}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40021000 	.word	0x40021000

0800078c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b088      	sub	sp, #32
 8000790:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 030c 	add.w	r3, r7, #12
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	4b37      	ldr	r3, [pc, #220]	@ (8000880 <MX_GPIO_Init+0xf4>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a6:	4a36      	ldr	r2, [pc, #216]	@ (8000880 <MX_GPIO_Init+0xf4>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ae:	4b34      	ldr	r3, [pc, #208]	@ (8000880 <MX_GPIO_Init+0xf4>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	4b31      	ldr	r3, [pc, #196]	@ (8000880 <MX_GPIO_Init+0xf4>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007be:	4a30      	ldr	r2, [pc, #192]	@ (8000880 <MX_GPIO_Init+0xf4>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000880 <MX_GPIO_Init+0xf4>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IR_LED_SET1_Pin|IR_LED_SET2_Pin|R_STEP_DIR_Pin|L_STEP_DIR_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	f44f 518d 	mov.w	r1, #4512	@ 0x11a0
 80007d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007dc:	f002 f862 	bl	80028a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IF_LED3_Pin|IF_LED1_Pin|IF_LED2_Pin|MOTOR_EN_Pin, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	21c3      	movs	r1, #195	@ 0xc3
 80007e4:	4827      	ldr	r0, [pc, #156]	@ (8000884 <MX_GPIO_Init+0xf8>)
 80007e6:	f002 f85d 	bl	80028a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IR_LED_SET1_Pin|IR_LED_SET2_Pin;
 80007ea:	23a0      	movs	r3, #160	@ 0xa0
 80007ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007f2:	2302      	movs	r3, #2
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	4619      	mov	r1, r3
 8000800:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000804:	f001 fee4 	bl	80025d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = IF_LED3_Pin|IF_LED1_Pin|IF_LED2_Pin|MOTOR_EN_Pin;
 8000808:	23c3      	movs	r3, #195	@ 0xc3
 800080a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	2301      	movs	r3, #1
 800080e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	4619      	mov	r1, r3
 800081e:	4819      	ldr	r0, [pc, #100]	@ (8000884 <MX_GPIO_Init+0xf8>)
 8000820:	f001 fed6 	bl	80025d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = R_STEP_DIR_Pin|L_STEP_DIR_Pin;
 8000824:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8000828:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	4619      	mov	r1, r3
 800083c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000840:	f001 fec6 	bl	80025d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = L_SW_Pin;
 8000844:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000848:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800084e:	2302      	movs	r3, #2
 8000850:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(L_SW_GPIO_Port, &GPIO_InitStruct);
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	4619      	mov	r1, r3
 8000858:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800085c:	f001 feb8 	bl	80025d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = R_SW_Pin|C_SW_Pin;
 8000860:	2330      	movs	r3, #48	@ 0x30
 8000862:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000864:	2300      	movs	r3, #0
 8000866:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000868:	2302      	movs	r3, #2
 800086a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	4619      	mov	r1, r3
 8000872:	4804      	ldr	r0, [pc, #16]	@ (8000884 <MX_GPIO_Init+0xf8>)
 8000874:	f001 feac 	bl	80025d0 <HAL_GPIO_Init>

}
 8000878:	bf00      	nop
 800087a:	3720      	adds	r7, #32
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40021000 	.word	0x40021000
 8000884:	48000400 	.word	0x48000400

08000888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088c:	f000 fd01 	bl	8001292 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000890:	f000 f814 	bl	80008bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000894:	f7ff ff7a 	bl	800078c <MX_GPIO_Init>
  MX_DMA_Init();
 8000898:	f7ff ff4a 	bl	8000730 <MX_DMA_Init>
  MX_ADC1_Init();
 800089c:	f7ff fe0e 	bl	80004bc <MX_ADC1_Init>
  MX_TIM2_Init();
 80008a0:	f000 f9bc 	bl	8000c1c <MX_TIM2_Init>
  MX_TIM6_Init();
 80008a4:	f000 fa32 	bl	8000d0c <MX_TIM6_Init>
  MX_USART1_UART_Init();
 80008a8:	f000 fbe6 	bl	8001078 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 80008ac:	f000 fa9a 	bl	8000de4 <MX_TIM16_Init>
  MX_TIM7_Init();
 80008b0:	f000 fa62 	bl	8000d78 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  mySetup();
 80008b4:	f004 ff7c 	bl	80057b0 <mySetup>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <main+0x30>

080008bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b096      	sub	sp, #88	@ 0x58
 80008c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	2244      	movs	r2, #68	@ 0x44
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f005 f972 	bl	8005bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d0:	463b      	mov	r3, r7
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008de:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80008e2:	f002 f805 	bl	80028f0 <HAL_PWREx_ControlVoltageScaling>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008ec:	f000 f838 	bl	8000960 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80008f0:	2310      	movs	r3, #16
 80008f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008f4:	2301      	movs	r3, #1
 80008f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008fc:	2360      	movs	r3, #96	@ 0x60
 80008fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000900:	2302      	movs	r3, #2
 8000902:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000904:	2301      	movs	r3, #1
 8000906:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000908:	2301      	movs	r3, #1
 800090a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800090c:	2328      	movs	r3, #40	@ 0x28
 800090e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000910:	2307      	movs	r3, #7
 8000912:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000914:	2302      	movs	r3, #2
 8000916:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000918:	2302      	movs	r3, #2
 800091a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4618      	mov	r0, r3
 8000922:	f002 f83b 	bl	800299c <HAL_RCC_OscConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800092c:	f000 f818 	bl	8000960 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000930:	230f      	movs	r3, #15
 8000932:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000934:	2303      	movs	r3, #3
 8000936:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000944:	463b      	mov	r3, r7
 8000946:	2104      	movs	r1, #4
 8000948:	4618      	mov	r0, r3
 800094a:	f002 fc3b 	bl	80031c4 <HAL_RCC_ClockConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000954:	f000 f804 	bl	8000960 <Error_Handler>
  }
}
 8000958:	bf00      	nop
 800095a:	3758      	adds	r7, #88	@ 0x58
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
}
 8000966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <Error_Handler+0x8>

0800096c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	4b0f      	ldr	r3, [pc, #60]	@ (80009b0 <HAL_MspInit+0x44>)
 8000974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000976:	4a0e      	ldr	r2, [pc, #56]	@ (80009b0 <HAL_MspInit+0x44>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6613      	str	r3, [r2, #96]	@ 0x60
 800097e:	4b0c      	ldr	r3, [pc, #48]	@ (80009b0 <HAL_MspInit+0x44>)
 8000980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098a:	4b09      	ldr	r3, [pc, #36]	@ (80009b0 <HAL_MspInit+0x44>)
 800098c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800098e:	4a08      	ldr	r2, [pc, #32]	@ (80009b0 <HAL_MspInit+0x44>)
 8000990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000994:	6593      	str	r3, [r2, #88]	@ 0x58
 8000996:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <HAL_MspInit+0x44>)
 8000998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800099a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40021000 	.word	0x40021000

080009b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <NMI_Handler+0x4>

080009bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <HardFault_Handler+0x4>

080009c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <MemManage_Handler+0x4>

080009cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <BusFault_Handler+0x4>

080009d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <UsageFault_Handler+0x4>

080009dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a0a:	f000 fc97 	bl	800133c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a18:	4802      	ldr	r0, [pc, #8]	@ (8000a24 <DMA1_Channel1_IRQHandler+0x10>)
 8000a1a:	f001 fd29 	bl	8002470 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200000e8 	.word	0x200000e8

08000a28 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000a2c:	4802      	ldr	r0, [pc, #8]	@ (8000a38 <DMA1_Channel4_IRQHandler+0x10>)
 8000a2e:	f001 fd1f 	bl	8002470 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200002ec 	.word	0x200002ec

08000a3c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a40:	4802      	ldr	r0, [pc, #8]	@ (8000a4c <DMA1_Channel5_IRQHandler+0x10>)
 8000a42:	f001 fd15 	bl	8002470 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000334 	.word	0x20000334

08000a50 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000a54:	4802      	ldr	r0, [pc, #8]	@ (8000a60 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a56:	f003 f979 	bl	8003d4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000218 	.word	0x20000218

08000a64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a68:	4802      	ldr	r0, [pc, #8]	@ (8000a74 <TIM2_IRQHandler+0x10>)
 8000a6a:	f003 f96f 	bl	8003d4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000134 	.word	0x20000134

08000a78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a7c:	4802      	ldr	r0, [pc, #8]	@ (8000a88 <TIM6_DAC_IRQHandler+0x10>)
 8000a7e:	f003 f965 	bl	8003d4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000180 	.word	0x20000180

08000a8c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000a90:	4802      	ldr	r0, [pc, #8]	@ (8000a9c <TIM7_IRQHandler+0x10>)
 8000a92:	f003 f95b 	bl	8003d4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200001cc 	.word	0x200001cc

08000aa0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	e00e      	b.n	8000ad0 <_read+0x30>
  {
    *ptr = __io_getchar();
 8000ab2:	f004 fe75 	bl	80057a0 <__io_getchar>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	701a      	strb	r2, [r3, #0]
    if (*ptr++ == '\n') break;
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	1c5a      	adds	r2, r3, #1
 8000ac2:	60ba      	str	r2, [r7, #8]
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b0a      	cmp	r3, #10
 8000ac8:	d007      	beq.n	8000ada <_read+0x3a>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	3301      	adds	r3, #1
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697a      	ldr	r2, [r7, #20]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	dbec      	blt.n	8000ab2 <_read+0x12>
 8000ad8:	e000      	b.n	8000adc <_read+0x3c>
    if (*ptr++ == '\n') break;
 8000ada:	bf00      	nop
  }

  return ++DataIdx;
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	697b      	ldr	r3, [r7, #20]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3718      	adds	r7, #24
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	e009      	b.n	8000b12 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	1c5a      	adds	r2, r3, #1
 8000b02:	60ba      	str	r2, [r7, #8]
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f004 fe2c 	bl	8005764 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	617b      	str	r3, [r7, #20]
 8000b12:	697a      	ldr	r2, [r7, #20]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	dbf1      	blt.n	8000afe <_write+0x12>
  }
  return len;
 8000b1a:	687b      	ldr	r3, [r7, #4]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3718      	adds	r7, #24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <_close>:

int _close(int file)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b4c:	605a      	str	r2, [r3, #4]
  return 0;
 8000b4e:	2300      	movs	r3, #0
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <_isatty>:

int _isatty(int file)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b64:	2301      	movs	r3, #1
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b085      	sub	sp, #20
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	60f8      	str	r0, [r7, #12]
 8000b7a:	60b9      	str	r1, [r7, #8]
 8000b7c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b7e:	2300      	movs	r3, #0
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3714      	adds	r7, #20
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b94:	4a14      	ldr	r2, [pc, #80]	@ (8000be8 <_sbrk+0x5c>)
 8000b96:	4b15      	ldr	r3, [pc, #84]	@ (8000bec <_sbrk+0x60>)
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba0:	4b13      	ldr	r3, [pc, #76]	@ (8000bf0 <_sbrk+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d102      	bne.n	8000bae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	@ (8000bf0 <_sbrk+0x64>)
 8000baa:	4a12      	ldr	r2, [pc, #72]	@ (8000bf4 <_sbrk+0x68>)
 8000bac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bae:	4b10      	ldr	r3, [pc, #64]	@ (8000bf0 <_sbrk+0x64>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d207      	bcs.n	8000bcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bbc:	f005 f848 	bl	8005c50 <__errno>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bca:	e009      	b.n	8000be0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bcc:	4b08      	ldr	r3, [pc, #32]	@ (8000bf0 <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd2:	4b07      	ldr	r3, [pc, #28]	@ (8000bf0 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	4a05      	ldr	r2, [pc, #20]	@ (8000bf0 <_sbrk+0x64>)
 8000bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bde:	68fb      	ldr	r3, [r7, #12]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20010000 	.word	0x20010000
 8000bec:	00000400 	.word	0x00000400
 8000bf0:	20000130 	.word	0x20000130
 8000bf4:	200004d0 	.word	0x200004d0

08000bf8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bfc:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <SystemInit+0x20>)
 8000bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c02:	4a05      	ldr	r2, [pc, #20]	@ (8000c18 <SystemInit+0x20>)
 8000c04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08e      	sub	sp, #56	@ 0x38
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c30:	f107 031c 	add.w	r3, r7, #28
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]
 8000c4a:	615a      	str	r2, [r3, #20]
 8000c4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c4e:	4b2e      	ldr	r3, [pc, #184]	@ (8000d08 <MX_TIM2_Init+0xec>)
 8000c50:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c54:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8000c56:	4b2c      	ldr	r3, [pc, #176]	@ (8000d08 <MX_TIM2_Init+0xec>)
 8000c58:	224f      	movs	r2, #79	@ 0x4f
 8000c5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5c:	4b2a      	ldr	r3, [pc, #168]	@ (8000d08 <MX_TIM2_Init+0xec>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000c62:	4b29      	ldr	r3, [pc, #164]	@ (8000d08 <MX_TIM2_Init+0xec>)
 8000c64:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6a:	4b27      	ldr	r3, [pc, #156]	@ (8000d08 <MX_TIM2_Init+0xec>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c70:	4b25      	ldr	r3, [pc, #148]	@ (8000d08 <MX_TIM2_Init+0xec>)
 8000c72:	2280      	movs	r2, #128	@ 0x80
 8000c74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c76:	4824      	ldr	r0, [pc, #144]	@ (8000d08 <MX_TIM2_Init+0xec>)
 8000c78:	f002 ffb0 	bl	8003bdc <HAL_TIM_Base_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000c82:	f7ff fe6d 	bl	8000960 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c90:	4619      	mov	r1, r3
 8000c92:	481d      	ldr	r0, [pc, #116]	@ (8000d08 <MX_TIM2_Init+0xec>)
 8000c94:	f003 fa76 	bl	8004184 <HAL_TIM_ConfigClockSource>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000c9e:	f7ff fe5f 	bl	8000960 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ca2:	4819      	ldr	r0, [pc, #100]	@ (8000d08 <MX_TIM2_Init+0xec>)
 8000ca4:	f002 fff1 	bl	8003c8a <HAL_TIM_PWM_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000cae:	f7ff fe57 	bl	8000960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cba:	f107 031c 	add.w	r3, r7, #28
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4811      	ldr	r0, [pc, #68]	@ (8000d08 <MX_TIM2_Init+0xec>)
 8000cc2:	f003 fee3 	bl	8004a8c <HAL_TIMEx_MasterConfigSynchronization>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000ccc:	f7ff fe48 	bl	8000960 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000cd0:	2370      	movs	r3, #112	@ 0x70
 8000cd2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500-1;
 8000cd4:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8000cd8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	2204      	movs	r2, #4
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4807      	ldr	r0, [pc, #28]	@ (8000d08 <MX_TIM2_Init+0xec>)
 8000cea:	f003 f937 	bl	8003f5c <HAL_TIM_PWM_ConfigChannel>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000cf4:	f7ff fe34 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cf8:	4803      	ldr	r0, [pc, #12]	@ (8000d08 <MX_TIM2_Init+0xec>)
 8000cfa:	f000 f963 	bl	8000fc4 <HAL_TIM_MspPostInit>

}
 8000cfe:	bf00      	nop
 8000d00:	3738      	adds	r7, #56	@ 0x38
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000134 	.word	0x20000134

08000d0c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d1c:	4b14      	ldr	r3, [pc, #80]	@ (8000d70 <MX_TIM6_Init+0x64>)
 8000d1e:	4a15      	ldr	r2, [pc, #84]	@ (8000d74 <MX_TIM6_Init+0x68>)
 8000d20:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80-1;
 8000d22:	4b13      	ldr	r3, [pc, #76]	@ (8000d70 <MX_TIM6_Init+0x64>)
 8000d24:	224f      	movs	r2, #79	@ 0x4f
 8000d26:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d28:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <MX_TIM6_Init+0x64>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8000d2e:	4b10      	ldr	r3, [pc, #64]	@ (8000d70 <MX_TIM6_Init+0x64>)
 8000d30:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d34:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d36:	4b0e      	ldr	r3, [pc, #56]	@ (8000d70 <MX_TIM6_Init+0x64>)
 8000d38:	2280      	movs	r2, #128	@ 0x80
 8000d3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d3c:	480c      	ldr	r0, [pc, #48]	@ (8000d70 <MX_TIM6_Init+0x64>)
 8000d3e:	f002 ff4d 	bl	8003bdc <HAL_TIM_Base_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000d48:	f7ff fe0a 	bl	8000960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	4619      	mov	r1, r3
 8000d58:	4805      	ldr	r0, [pc, #20]	@ (8000d70 <MX_TIM6_Init+0x64>)
 8000d5a:	f003 fe97 	bl	8004a8c <HAL_TIMEx_MasterConfigSynchronization>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000d64:	f7ff fdfc 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d68:	bf00      	nop
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000180 	.word	0x20000180
 8000d74:	40001000 	.word	0x40001000

08000d78 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000d88:	4b14      	ldr	r3, [pc, #80]	@ (8000ddc <MX_TIM7_Init+0x64>)
 8000d8a:	4a15      	ldr	r2, [pc, #84]	@ (8000de0 <MX_TIM7_Init+0x68>)
 8000d8c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000d8e:	4b13      	ldr	r3, [pc, #76]	@ (8000ddc <MX_TIM7_Init+0x64>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d94:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <MX_TIM7_Init+0x64>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 80-1;
 8000d9a:	4b10      	ldr	r3, [pc, #64]	@ (8000ddc <MX_TIM7_Init+0x64>)
 8000d9c:	224f      	movs	r2, #79	@ 0x4f
 8000d9e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da0:	4b0e      	ldr	r3, [pc, #56]	@ (8000ddc <MX_TIM7_Init+0x64>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000da6:	480d      	ldr	r0, [pc, #52]	@ (8000ddc <MX_TIM7_Init+0x64>)
 8000da8:	f002 ff18 	bl	8003bdc <HAL_TIM_Base_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000db2:	f7ff fdd5 	bl	8000960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4806      	ldr	r0, [pc, #24]	@ (8000ddc <MX_TIM7_Init+0x64>)
 8000dc4:	f003 fe62 	bl	8004a8c <HAL_TIMEx_MasterConfigSynchronization>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000dce:	f7ff fdc7 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200001cc 	.word	0x200001cc
 8000de0:	40001400 	.word	0x40001400

08000de4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b092      	sub	sp, #72	@ 0x48
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
 8000df8:	611a      	str	r2, [r3, #16]
 8000dfa:	615a      	str	r2, [r3, #20]
 8000dfc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dfe:	463b      	mov	r3, r7
 8000e00:	222c      	movs	r2, #44	@ 0x2c
 8000e02:	2100      	movs	r1, #0
 8000e04:	4618      	mov	r0, r3
 8000e06:	f004 fed5 	bl	8005bb4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000e0a:	4b30      	ldr	r3, [pc, #192]	@ (8000ecc <MX_TIM16_Init+0xe8>)
 8000e0c:	4a30      	ldr	r2, [pc, #192]	@ (8000ed0 <MX_TIM16_Init+0xec>)
 8000e0e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 80-1;
 8000e10:	4b2e      	ldr	r3, [pc, #184]	@ (8000ecc <MX_TIM16_Init+0xe8>)
 8000e12:	224f      	movs	r2, #79	@ 0x4f
 8000e14:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e16:	4b2d      	ldr	r3, [pc, #180]	@ (8000ecc <MX_TIM16_Init+0xe8>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8000e1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000ecc <MX_TIM16_Init+0xe8>)
 8000e1e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e22:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e24:	4b29      	ldr	r3, [pc, #164]	@ (8000ecc <MX_TIM16_Init+0xe8>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000e2a:	4b28      	ldr	r3, [pc, #160]	@ (8000ecc <MX_TIM16_Init+0xe8>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e30:	4b26      	ldr	r3, [pc, #152]	@ (8000ecc <MX_TIM16_Init+0xe8>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000e36:	4825      	ldr	r0, [pc, #148]	@ (8000ecc <MX_TIM16_Init+0xe8>)
 8000e38:	f002 fed0 	bl	8003bdc <HAL_TIM_Base_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000e42:	f7ff fd8d 	bl	8000960 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000e46:	4821      	ldr	r0, [pc, #132]	@ (8000ecc <MX_TIM16_Init+0xe8>)
 8000e48:	f002 ff1f 	bl	8003c8a <HAL_TIM_PWM_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000e52:	f7ff fd85 	bl	8000960 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e56:	2360      	movs	r3, #96	@ 0x60
 8000e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 500-1;
 8000e5a:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8000e5e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e60:	2300      	movs	r3, #0
 8000e62:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e64:	2300      	movs	r3, #0
 8000e66:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e70:	2300      	movs	r3, #0
 8000e72:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e78:	2200      	movs	r2, #0
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4813      	ldr	r0, [pc, #76]	@ (8000ecc <MX_TIM16_Init+0xe8>)
 8000e7e:	f003 f86d 	bl	8003f5c <HAL_TIM_PWM_ConfigChannel>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8000e88:	f7ff fd6a 	bl	8000960 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ea0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ea4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000eaa:	463b      	mov	r3, r7
 8000eac:	4619      	mov	r1, r3
 8000eae:	4807      	ldr	r0, [pc, #28]	@ (8000ecc <MX_TIM16_Init+0xe8>)
 8000eb0:	f003 fe52 	bl	8004b58 <HAL_TIMEx_ConfigBreakDeadTime>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 8000eba:	f7ff fd51 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000ebe:	4803      	ldr	r0, [pc, #12]	@ (8000ecc <MX_TIM16_Init+0xe8>)
 8000ec0:	f000 f880 	bl	8000fc4 <HAL_TIM_MspPostInit>

}
 8000ec4:	bf00      	nop
 8000ec6:	3748      	adds	r7, #72	@ 0x48
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000218 	.word	0x20000218
 8000ed0:	40014400 	.word	0x40014400

08000ed4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ee4:	d114      	bne.n	8000f10 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ee6:	4b33      	ldr	r3, [pc, #204]	@ (8000fb4 <HAL_TIM_Base_MspInit+0xe0>)
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eea:	4a32      	ldr	r2, [pc, #200]	@ (8000fb4 <HAL_TIM_Base_MspInit+0xe0>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ef2:	4b30      	ldr	r3, [pc, #192]	@ (8000fb4 <HAL_TIM_Base_MspInit+0xe0>)
 8000ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	617b      	str	r3, [r7, #20]
 8000efc:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2100      	movs	r1, #0
 8000f02:	201c      	movs	r0, #28
 8000f04:	f001 f9c5 	bl	8002292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f08:	201c      	movs	r0, #28
 8000f0a:	f001 f9de 	bl	80022ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000f0e:	e04c      	b.n	8000faa <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM6)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a28      	ldr	r2, [pc, #160]	@ (8000fb8 <HAL_TIM_Base_MspInit+0xe4>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d114      	bne.n	8000f44 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f1a:	4b26      	ldr	r3, [pc, #152]	@ (8000fb4 <HAL_TIM_Base_MspInit+0xe0>)
 8000f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f1e:	4a25      	ldr	r2, [pc, #148]	@ (8000fb4 <HAL_TIM_Base_MspInit+0xe0>)
 8000f20:	f043 0310 	orr.w	r3, r3, #16
 8000f24:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f26:	4b23      	ldr	r3, [pc, #140]	@ (8000fb4 <HAL_TIM_Base_MspInit+0xe0>)
 8000f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f2a:	f003 0310 	and.w	r3, r3, #16
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2100      	movs	r1, #0
 8000f36:	2036      	movs	r0, #54	@ 0x36
 8000f38:	f001 f9ab 	bl	8002292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f3c:	2036      	movs	r0, #54	@ 0x36
 8000f3e:	f001 f9c4 	bl	80022ca <HAL_NVIC_EnableIRQ>
}
 8000f42:	e032      	b.n	8000faa <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM7)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a1c      	ldr	r2, [pc, #112]	@ (8000fbc <HAL_TIM_Base_MspInit+0xe8>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d114      	bne.n	8000f78 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000f4e:	4b19      	ldr	r3, [pc, #100]	@ (8000fb4 <HAL_TIM_Base_MspInit+0xe0>)
 8000f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f52:	4a18      	ldr	r2, [pc, #96]	@ (8000fb4 <HAL_TIM_Base_MspInit+0xe0>)
 8000f54:	f043 0320 	orr.w	r3, r3, #32
 8000f58:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f5a:	4b16      	ldr	r3, [pc, #88]	@ (8000fb4 <HAL_TIM_Base_MspInit+0xe0>)
 8000f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f5e:	f003 0320 	and.w	r3, r3, #32
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	2037      	movs	r0, #55	@ 0x37
 8000f6c:	f001 f991 	bl	8002292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000f70:	2037      	movs	r0, #55	@ 0x37
 8000f72:	f001 f9aa 	bl	80022ca <HAL_NVIC_EnableIRQ>
}
 8000f76:	e018      	b.n	8000faa <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM16)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a10      	ldr	r2, [pc, #64]	@ (8000fc0 <HAL_TIM_Base_MspInit+0xec>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d113      	bne.n	8000faa <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000f82:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb4 <HAL_TIM_Base_MspInit+0xe0>)
 8000f84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f86:	4a0b      	ldr	r2, [pc, #44]	@ (8000fb4 <HAL_TIM_Base_MspInit+0xe0>)
 8000f88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f8e:	4b09      	ldr	r3, [pc, #36]	@ (8000fb4 <HAL_TIM_Base_MspInit+0xe0>)
 8000f90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2019      	movs	r0, #25
 8000fa0:	f001 f977 	bl	8002292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000fa4:	2019      	movs	r0, #25
 8000fa6:	f001 f990 	bl	80022ca <HAL_NVIC_EnableIRQ>
}
 8000faa:	bf00      	nop
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	40001000 	.word	0x40001000
 8000fbc:	40001400 	.word	0x40001400
 8000fc0:	40014400 	.word	0x40014400

08000fc4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	@ 0x28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fe4:	d11c      	bne.n	8001020 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	4b21      	ldr	r3, [pc, #132]	@ (800106c <HAL_TIM_MspPostInit+0xa8>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fea:	4a20      	ldr	r2, [pc, #128]	@ (800106c <HAL_TIM_MspPostInit+0xa8>)
 8000fec:	f043 0302 	orr.w	r3, r3, #2
 8000ff0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800106c <HAL_TIM_MspPostInit+0xa8>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = L_STEP_PWM_Pin;
 8000ffe:	2308      	movs	r3, #8
 8001000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800100e:	2301      	movs	r3, #1
 8001010:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(L_STEP_PWM_GPIO_Port, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	4815      	ldr	r0, [pc, #84]	@ (8001070 <HAL_TIM_MspPostInit+0xac>)
 800101a:	f001 fad9 	bl	80025d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800101e:	e021      	b.n	8001064 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM16)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a13      	ldr	r2, [pc, #76]	@ (8001074 <HAL_TIM_MspPostInit+0xb0>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d11c      	bne.n	8001064 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	4b10      	ldr	r3, [pc, #64]	@ (800106c <HAL_TIM_MspPostInit+0xa8>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102e:	4a0f      	ldr	r2, [pc, #60]	@ (800106c <HAL_TIM_MspPostInit+0xa8>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001036:	4b0d      	ldr	r3, [pc, #52]	@ (800106c <HAL_TIM_MspPostInit+0xa8>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = R_STEP_PWM_Pin;
 8001042:	2340      	movs	r3, #64	@ 0x40
 8001044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8001052:	230e      	movs	r3, #14
 8001054:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(R_STEP_PWM_GPIO_Port, &GPIO_InitStruct);
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4619      	mov	r1, r3
 800105c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001060:	f001 fab6 	bl	80025d0 <HAL_GPIO_Init>
}
 8001064:	bf00      	nop
 8001066:	3728      	adds	r7, #40	@ 0x28
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40021000 	.word	0x40021000
 8001070:	48000400 	.word	0x48000400
 8001074:	40014400 	.word	0x40014400

08001078 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800107c:	4b14      	ldr	r3, [pc, #80]	@ (80010d0 <MX_USART1_UART_Init+0x58>)
 800107e:	4a15      	ldr	r2, [pc, #84]	@ (80010d4 <MX_USART1_UART_Init+0x5c>)
 8001080:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001082:	4b13      	ldr	r3, [pc, #76]	@ (80010d0 <MX_USART1_UART_Init+0x58>)
 8001084:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001088:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800108a:	4b11      	ldr	r3, [pc, #68]	@ (80010d0 <MX_USART1_UART_Init+0x58>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001090:	4b0f      	ldr	r3, [pc, #60]	@ (80010d0 <MX_USART1_UART_Init+0x58>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001096:	4b0e      	ldr	r3, [pc, #56]	@ (80010d0 <MX_USART1_UART_Init+0x58>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800109c:	4b0c      	ldr	r3, [pc, #48]	@ (80010d0 <MX_USART1_UART_Init+0x58>)
 800109e:	220c      	movs	r2, #12
 80010a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a2:	4b0b      	ldr	r3, [pc, #44]	@ (80010d0 <MX_USART1_UART_Init+0x58>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a8:	4b09      	ldr	r3, [pc, #36]	@ (80010d0 <MX_USART1_UART_Init+0x58>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ae:	4b08      	ldr	r3, [pc, #32]	@ (80010d0 <MX_USART1_UART_Init+0x58>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <MX_USART1_UART_Init+0x58>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010ba:	4805      	ldr	r0, [pc, #20]	@ (80010d0 <MX_USART1_UART_Init+0x58>)
 80010bc:	f003 fde2 	bl	8004c84 <HAL_UART_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80010c6:	f7ff fc4b 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000264 	.word	0x20000264
 80010d4:	40013800 	.word	0x40013800

080010d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b09e      	sub	sp, #120	@ 0x78
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	2254      	movs	r2, #84	@ 0x54
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f004 fd5b 	bl	8005bb4 <memset>
  if(uartHandle->Instance==USART1)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a49      	ldr	r2, [pc, #292]	@ (8001228 <HAL_UART_MspInit+0x150>)
 8001104:	4293      	cmp	r3, r2
 8001106:	f040 808a 	bne.w	800121e <HAL_UART_MspInit+0x146>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800110a:	2301      	movs	r3, #1
 800110c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800110e:	2300      	movs	r3, #0
 8001110:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001112:	f107 0310 	add.w	r3, r7, #16
 8001116:	4618      	mov	r0, r3
 8001118:	f002 fa78 	bl	800360c <HAL_RCCEx_PeriphCLKConfig>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001122:	f7ff fc1d 	bl	8000960 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001126:	4b41      	ldr	r3, [pc, #260]	@ (800122c <HAL_UART_MspInit+0x154>)
 8001128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800112a:	4a40      	ldr	r2, [pc, #256]	@ (800122c <HAL_UART_MspInit+0x154>)
 800112c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001130:	6613      	str	r3, [r2, #96]	@ 0x60
 8001132:	4b3e      	ldr	r3, [pc, #248]	@ (800122c <HAL_UART_MspInit+0x154>)
 8001134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001136:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	4b3b      	ldr	r3, [pc, #236]	@ (800122c <HAL_UART_MspInit+0x154>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001142:	4a3a      	ldr	r2, [pc, #232]	@ (800122c <HAL_UART_MspInit+0x154>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800114a:	4b38      	ldr	r3, [pc, #224]	@ (800122c <HAL_UART_MspInit+0x154>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001156:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800115a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001164:	2303      	movs	r3, #3
 8001166:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001168:	2307      	movs	r3, #7
 800116a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001170:	4619      	mov	r1, r3
 8001172:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001176:	f001 fa2b 	bl	80025d0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800117a:	4b2d      	ldr	r3, [pc, #180]	@ (8001230 <HAL_UART_MspInit+0x158>)
 800117c:	4a2d      	ldr	r2, [pc, #180]	@ (8001234 <HAL_UART_MspInit+0x15c>)
 800117e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8001180:	4b2b      	ldr	r3, [pc, #172]	@ (8001230 <HAL_UART_MspInit+0x158>)
 8001182:	2202      	movs	r2, #2
 8001184:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001186:	4b2a      	ldr	r3, [pc, #168]	@ (8001230 <HAL_UART_MspInit+0x158>)
 8001188:	2210      	movs	r2, #16
 800118a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800118c:	4b28      	ldr	r3, [pc, #160]	@ (8001230 <HAL_UART_MspInit+0x158>)
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001192:	4b27      	ldr	r3, [pc, #156]	@ (8001230 <HAL_UART_MspInit+0x158>)
 8001194:	2280      	movs	r2, #128	@ 0x80
 8001196:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001198:	4b25      	ldr	r3, [pc, #148]	@ (8001230 <HAL_UART_MspInit+0x158>)
 800119a:	2200      	movs	r2, #0
 800119c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800119e:	4b24      	ldr	r3, [pc, #144]	@ (8001230 <HAL_UART_MspInit+0x158>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80011a4:	4b22      	ldr	r3, [pc, #136]	@ (8001230 <HAL_UART_MspInit+0x158>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011aa:	4b21      	ldr	r3, [pc, #132]	@ (8001230 <HAL_UART_MspInit+0x158>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80011b0:	481f      	ldr	r0, [pc, #124]	@ (8001230 <HAL_UART_MspInit+0x158>)
 80011b2:	f001 f8a5 	bl	8002300 <HAL_DMA_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 80011bc:	f7ff fbd0 	bl	8000960 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001230 <HAL_UART_MspInit+0x158>)
 80011c4:	671a      	str	r2, [r3, #112]	@ 0x70
 80011c6:	4a1a      	ldr	r2, [pc, #104]	@ (8001230 <HAL_UART_MspInit+0x158>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80011cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001238 <HAL_UART_MspInit+0x160>)
 80011ce:	4a1b      	ldr	r2, [pc, #108]	@ (800123c <HAL_UART_MspInit+0x164>)
 80011d0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80011d2:	4b19      	ldr	r3, [pc, #100]	@ (8001238 <HAL_UART_MspInit+0x160>)
 80011d4:	2202      	movs	r2, #2
 80011d6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011d8:	4b17      	ldr	r3, [pc, #92]	@ (8001238 <HAL_UART_MspInit+0x160>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011de:	4b16      	ldr	r3, [pc, #88]	@ (8001238 <HAL_UART_MspInit+0x160>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011e4:	4b14      	ldr	r3, [pc, #80]	@ (8001238 <HAL_UART_MspInit+0x160>)
 80011e6:	2280      	movs	r2, #128	@ 0x80
 80011e8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011ea:	4b13      	ldr	r3, [pc, #76]	@ (8001238 <HAL_UART_MspInit+0x160>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011f0:	4b11      	ldr	r3, [pc, #68]	@ (8001238 <HAL_UART_MspInit+0x160>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80011f6:	4b10      	ldr	r3, [pc, #64]	@ (8001238 <HAL_UART_MspInit+0x160>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001238 <HAL_UART_MspInit+0x160>)
 80011fe:	2200      	movs	r2, #0
 8001200:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001202:	480d      	ldr	r0, [pc, #52]	@ (8001238 <HAL_UART_MspInit+0x160>)
 8001204:	f001 f87c 	bl	8002300 <HAL_DMA_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800120e:	f7ff fba7 	bl	8000960 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a08      	ldr	r2, [pc, #32]	@ (8001238 <HAL_UART_MspInit+0x160>)
 8001216:	675a      	str	r2, [r3, #116]	@ 0x74
 8001218:	4a07      	ldr	r2, [pc, #28]	@ (8001238 <HAL_UART_MspInit+0x160>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800121e:	bf00      	nop
 8001220:	3778      	adds	r7, #120	@ 0x78
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40013800 	.word	0x40013800
 800122c:	40021000 	.word	0x40021000
 8001230:	200002ec 	.word	0x200002ec
 8001234:	40020044 	.word	0x40020044
 8001238:	20000334 	.word	0x20000334
 800123c:	40020058 	.word	0x40020058

08001240 <Reset_Handler>:
 8001240:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001278 <LoopForever+0x2>
 8001244:	f7ff fcd8 	bl	8000bf8 <SystemInit>
 8001248:	480c      	ldr	r0, [pc, #48]	@ (800127c <LoopForever+0x6>)
 800124a:	490d      	ldr	r1, [pc, #52]	@ (8001280 <LoopForever+0xa>)
 800124c:	4a0d      	ldr	r2, [pc, #52]	@ (8001284 <LoopForever+0xe>)
 800124e:	2300      	movs	r3, #0
 8001250:	e002      	b.n	8001258 <LoopCopyDataInit>

08001252 <CopyDataInit>:
 8001252:	58d4      	ldr	r4, [r2, r3]
 8001254:	50c4      	str	r4, [r0, r3]
 8001256:	3304      	adds	r3, #4

08001258 <LoopCopyDataInit>:
 8001258:	18c4      	adds	r4, r0, r3
 800125a:	428c      	cmp	r4, r1
 800125c:	d3f9      	bcc.n	8001252 <CopyDataInit>
 800125e:	4a0a      	ldr	r2, [pc, #40]	@ (8001288 <LoopForever+0x12>)
 8001260:	4c0a      	ldr	r4, [pc, #40]	@ (800128c <LoopForever+0x16>)
 8001262:	2300      	movs	r3, #0
 8001264:	e001      	b.n	800126a <LoopFillZerobss>

08001266 <FillZerobss>:
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	3204      	adds	r2, #4

0800126a <LoopFillZerobss>:
 800126a:	42a2      	cmp	r2, r4
 800126c:	d3fb      	bcc.n	8001266 <FillZerobss>
 800126e:	f004 fcf5 	bl	8005c5c <__libc_init_array>
 8001272:	f7ff fb09 	bl	8000888 <main>

08001276 <LoopForever>:
 8001276:	e7fe      	b.n	8001276 <LoopForever>
 8001278:	20010000 	.word	0x20010000
 800127c:	20000000 	.word	0x20000000
 8001280:	20000068 	.word	0x20000068
 8001284:	08006194 	.word	0x08006194
 8001288:	20000068 	.word	0x20000068
 800128c:	200004cc 	.word	0x200004cc

08001290 <ADC1_IRQHandler>:
 8001290:	e7fe      	b.n	8001290 <ADC1_IRQHandler>

08001292 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001298:	2300      	movs	r3, #0
 800129a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800129c:	2003      	movs	r0, #3
 800129e:	f000 ffed 	bl	800227c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012a2:	200f      	movs	r0, #15
 80012a4:	f000 f80e 	bl	80012c4 <HAL_InitTick>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d002      	beq.n	80012b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	71fb      	strb	r3, [r7, #7]
 80012b2:	e001      	b.n	80012b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012b4:	f7ff fb5a 	bl	800096c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012b8:	79fb      	ldrb	r3, [r7, #7]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012cc:	2300      	movs	r3, #0
 80012ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012d0:	4b17      	ldr	r3, [pc, #92]	@ (8001330 <HAL_InitTick+0x6c>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d023      	beq.n	8001320 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012d8:	4b16      	ldr	r3, [pc, #88]	@ (8001334 <HAL_InitTick+0x70>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b14      	ldr	r3, [pc, #80]	@ (8001330 <HAL_InitTick+0x6c>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4619      	mov	r1, r3
 80012e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 fff9 	bl	80022e6 <HAL_SYSTICK_Config>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d10f      	bne.n	800131a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b0f      	cmp	r3, #15
 80012fe:	d809      	bhi.n	8001314 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001300:	2200      	movs	r2, #0
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	f04f 30ff 	mov.w	r0, #4294967295
 8001308:	f000 ffc3 	bl	8002292 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800130c:	4a0a      	ldr	r2, [pc, #40]	@ (8001338 <HAL_InitTick+0x74>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	e007      	b.n	8001324 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	73fb      	strb	r3, [r7, #15]
 8001318:	e004      	b.n	8001324 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	73fb      	strb	r3, [r7, #15]
 800131e:	e001      	b.n	8001324 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001324:	7bfb      	ldrb	r3, [r7, #15]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000008 	.word	0x20000008
 8001334:	20000000 	.word	0x20000000
 8001338:	20000004 	.word	0x20000004

0800133c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001340:	4b06      	ldr	r3, [pc, #24]	@ (800135c <HAL_IncTick+0x20>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <HAL_IncTick+0x24>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4413      	add	r3, r2
 800134c:	4a04      	ldr	r2, [pc, #16]	@ (8001360 <HAL_IncTick+0x24>)
 800134e:	6013      	str	r3, [r2, #0]
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20000008 	.word	0x20000008
 8001360:	2000037c 	.word	0x2000037c

08001364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return uwTick;
 8001368:	4b03      	ldr	r3, [pc, #12]	@ (8001378 <HAL_GetTick+0x14>)
 800136a:	681b      	ldr	r3, [r3, #0]
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	2000037c 	.word	0x2000037c

0800137c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	431a      	orrs	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	609a      	str	r2, [r3, #8]
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
 80013aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	431a      	orrs	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	609a      	str	r2, [r3, #8]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80013d8:	4618      	mov	r0, r3
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b087      	sub	sp, #28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
 80013f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	3360      	adds	r3, #96	@ 0x60
 80013f6:	461a      	mov	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b08      	ldr	r3, [pc, #32]	@ (8001428 <LL_ADC_SetOffset+0x44>)
 8001406:	4013      	ands	r3, r2
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	430a      	orrs	r2, r1
 8001412:	4313      	orrs	r3, r2
 8001414:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800141c:	bf00      	nop
 800141e:	371c      	adds	r7, #28
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	03fff000 	.word	0x03fff000

0800142c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3360      	adds	r3, #96	@ 0x60
 800143a:	461a      	mov	r2, r3
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800144c:	4618      	mov	r0, r3
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001458:	b480      	push	{r7}
 800145a:	b087      	sub	sp, #28
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	3360      	adds	r3, #96	@ 0x60
 8001468:	461a      	mov	r2, r3
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	431a      	orrs	r2, r3
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001482:	bf00      	nop
 8001484:	371c      	adds	r7, #28
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800148e:	b480      	push	{r7}
 8001490:	b087      	sub	sp, #28
 8001492:	af00      	add	r7, sp, #0
 8001494:	60f8      	str	r0, [r7, #12]
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	3330      	adds	r3, #48	@ 0x30
 800149e:	461a      	mov	r2, r3
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	0a1b      	lsrs	r3, r3, #8
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	f003 030c 	and.w	r3, r3, #12
 80014aa:	4413      	add	r3, r2
 80014ac:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	f003 031f 	and.w	r3, r3, #31
 80014b8:	211f      	movs	r1, #31
 80014ba:	fa01 f303 	lsl.w	r3, r1, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	401a      	ands	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	0e9b      	lsrs	r3, r3, #26
 80014c6:	f003 011f 	and.w	r1, r3, #31
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	f003 031f 	and.w	r3, r3, #31
 80014d0:	fa01 f303 	lsl.w	r3, r1, r3
 80014d4:	431a      	orrs	r2, r3
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80014da:	bf00      	nop
 80014dc:	371c      	adds	r7, #28
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b087      	sub	sp, #28
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	60f8      	str	r0, [r7, #12]
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	3314      	adds	r3, #20
 80014f6:	461a      	mov	r2, r3
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	0e5b      	lsrs	r3, r3, #25
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	4413      	add	r3, r2
 8001504:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	0d1b      	lsrs	r3, r3, #20
 800150e:	f003 031f 	and.w	r3, r3, #31
 8001512:	2107      	movs	r1, #7
 8001514:	fa01 f303 	lsl.w	r3, r1, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	401a      	ands	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	0d1b      	lsrs	r3, r3, #20
 8001520:	f003 031f 	and.w	r3, r3, #31
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	fa01 f303 	lsl.w	r3, r1, r3
 800152a:	431a      	orrs	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001530:	bf00      	nop
 8001532:	371c      	adds	r7, #28
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001554:	43db      	mvns	r3, r3
 8001556:	401a      	ands	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f003 0318 	and.w	r3, r3, #24
 800155e:	4908      	ldr	r1, [pc, #32]	@ (8001580 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001560:	40d9      	lsrs	r1, r3
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	400b      	ands	r3, r1
 8001566:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800156a:	431a      	orrs	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001572:	bf00      	nop
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	0007ffff 	.word	0x0007ffff

08001584 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001594:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	6093      	str	r3, [r2, #8]
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80015b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80015bc:	d101      	bne.n	80015c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80015be:	2301      	movs	r3, #1
 80015c0:	e000      	b.n	80015c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80015e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015e4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001608:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800160c:	d101      	bne.n	8001612 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800160e:	2301      	movs	r3, #1
 8001610:	e000      	b.n	8001614 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	2b01      	cmp	r3, #1
 8001632:	d101      	bne.n	8001638 <LL_ADC_IsEnabled+0x18>
 8001634:	2301      	movs	r3, #1
 8001636:	e000      	b.n	800163a <LL_ADC_IsEnabled+0x1a>
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	2b04      	cmp	r3, #4
 8001658:	d101      	bne.n	800165e <LL_ADC_REG_IsConversionOngoing+0x18>
 800165a:	2301      	movs	r3, #1
 800165c:	e000      	b.n	8001660 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	2b08      	cmp	r3, #8
 800167e:	d101      	bne.n	8001684 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001680:	2301      	movs	r3, #1
 8001682:	e000      	b.n	8001686 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
	...

08001694 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800169c:	2300      	movs	r3, #0
 800169e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e126      	b.n	80018fc <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d109      	bne.n	80016d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7fe ffa3 	bl	8000608 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff67 	bl	80015a8 <LL_ADC_IsDeepPowerDownEnabled>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d004      	beq.n	80016ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff4d 	bl	8001584 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff ff82 	bl	80015f8 <LL_ADC_IsInternalRegulatorEnabled>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d115      	bne.n	8001726 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ff66 	bl	80015d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001704:	4b7f      	ldr	r3, [pc, #508]	@ (8001904 <HAL_ADC_Init+0x270>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	099b      	lsrs	r3, r3, #6
 800170a:	4a7f      	ldr	r2, [pc, #508]	@ (8001908 <HAL_ADC_Init+0x274>)
 800170c:	fba2 2303 	umull	r2, r3, r2, r3
 8001710:	099b      	lsrs	r3, r3, #6
 8001712:	3301      	adds	r3, #1
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001718:	e002      	b.n	8001720 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	3b01      	subs	r3, #1
 800171e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f9      	bne.n	800171a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff ff64 	bl	80015f8 <LL_ADC_IsInternalRegulatorEnabled>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10d      	bne.n	8001752 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800173a:	f043 0210 	orr.w	r2, r3, #16
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001746:	f043 0201 	orr.w	r2, r3, #1
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff ff75 	bl	8001646 <LL_ADC_REG_IsConversionOngoing>
 800175c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001762:	f003 0310 	and.w	r3, r3, #16
 8001766:	2b00      	cmp	r3, #0
 8001768:	f040 80bf 	bne.w	80018ea <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	2b00      	cmp	r3, #0
 8001770:	f040 80bb 	bne.w	80018ea <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001778:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800177c:	f043 0202 	orr.w	r2, r3, #2
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff49 	bl	8001620 <LL_ADC_IsEnabled>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d10b      	bne.n	80017ac <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001794:	485d      	ldr	r0, [pc, #372]	@ (800190c <HAL_ADC_Init+0x278>)
 8001796:	f7ff ff43 	bl	8001620 <LL_ADC_IsEnabled>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d105      	bne.n	80017ac <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	4619      	mov	r1, r3
 80017a6:	485a      	ldr	r0, [pc, #360]	@ (8001910 <HAL_ADC_Init+0x27c>)
 80017a8:	f7ff fde8 	bl	800137c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	7e5b      	ldrb	r3, [r3, #25]
 80017b0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017b6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80017bc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80017c2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017ca:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d106      	bne.n	80017e8 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017de:	3b01      	subs	r3, #1
 80017e0:	045b      	lsls	r3, r3, #17
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d009      	beq.n	8001804 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017fc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4313      	orrs	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68da      	ldr	r2, [r3, #12]
 800180a:	4b42      	ldr	r3, [pc, #264]	@ (8001914 <HAL_ADC_Init+0x280>)
 800180c:	4013      	ands	r3, r2
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6812      	ldr	r2, [r2, #0]
 8001812:	69b9      	ldr	r1, [r7, #24]
 8001814:	430b      	orrs	r3, r1
 8001816:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff25 	bl	800166c <LL_ADC_INJ_IsConversionOngoing>
 8001822:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d13d      	bne.n	80018a6 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d13a      	bne.n	80018a6 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001834:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800183c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800184c:	f023 0302 	bic.w	r3, r3, #2
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6812      	ldr	r2, [r2, #0]
 8001854:	69b9      	ldr	r1, [r7, #24]
 8001856:	430b      	orrs	r3, r1
 8001858:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001860:	2b01      	cmp	r3, #1
 8001862:	d118      	bne.n	8001896 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800186e:	f023 0304 	bic.w	r3, r3, #4
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800187a:	4311      	orrs	r1, r2
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001880:	4311      	orrs	r1, r2
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001886:	430a      	orrs	r2, r1
 8001888:	431a      	orrs	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 0201 	orr.w	r2, r2, #1
 8001892:	611a      	str	r2, [r3, #16]
 8001894:	e007      	b.n	80018a6 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	691a      	ldr	r2, [r3, #16]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 0201 	bic.w	r2, r2, #1
 80018a4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d10c      	bne.n	80018c8 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b4:	f023 010f 	bic.w	r1, r3, #15
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69db      	ldr	r3, [r3, #28]
 80018bc:	1e5a      	subs	r2, r3, #1
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80018c6:	e007      	b.n	80018d8 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 020f 	bic.w	r2, r2, #15
 80018d6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018dc:	f023 0303 	bic.w	r3, r3, #3
 80018e0:	f043 0201 	orr.w	r2, r3, #1
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	655a      	str	r2, [r3, #84]	@ 0x54
 80018e8:	e007      	b.n	80018fa <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ee:	f043 0210 	orr.w	r2, r3, #16
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80018fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3720      	adds	r7, #32
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000000 	.word	0x20000000
 8001908:	053e2d63 	.word	0x053e2d63
 800190c:	50040000 	.word	0x50040000
 8001910:	50040300 	.word	0x50040300
 8001914:	fff0c007 	.word	0xfff0c007

08001918 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b0b6      	sub	sp, #216	@ 0xd8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001928:	2300      	movs	r3, #0
 800192a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001932:	2b01      	cmp	r3, #1
 8001934:	d101      	bne.n	800193a <HAL_ADC_ConfigChannel+0x22>
 8001936:	2302      	movs	r3, #2
 8001938:	e3bb      	b.n	80020b2 <HAL_ADC_ConfigChannel+0x79a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff fe7d 	bl	8001646 <LL_ADC_REG_IsConversionOngoing>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	f040 83a0 	bne.w	8002094 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b05      	cmp	r3, #5
 8001962:	d824      	bhi.n	80019ae <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	3b02      	subs	r3, #2
 800196a:	2b03      	cmp	r3, #3
 800196c:	d81b      	bhi.n	80019a6 <HAL_ADC_ConfigChannel+0x8e>
 800196e:	a201      	add	r2, pc, #4	@ (adr r2, 8001974 <HAL_ADC_ConfigChannel+0x5c>)
 8001970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001974:	08001985 	.word	0x08001985
 8001978:	0800198d 	.word	0x0800198d
 800197c:	08001995 	.word	0x08001995
 8001980:	0800199d 	.word	0x0800199d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001984:	230c      	movs	r3, #12
 8001986:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800198a:	e010      	b.n	80019ae <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800198c:	2312      	movs	r3, #18
 800198e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001992:	e00c      	b.n	80019ae <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001994:	2318      	movs	r3, #24
 8001996:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800199a:	e008      	b.n	80019ae <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800199c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80019a4:	e003      	b.n	80019ae <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80019a6:	2306      	movs	r3, #6
 80019a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80019ac:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6818      	ldr	r0, [r3, #0]
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	461a      	mov	r2, r3
 80019b8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80019bc:	f7ff fd67 	bl	800148e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fe3e 	bl	8001646 <LL_ADC_REG_IsConversionOngoing>
 80019ca:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fe4a 	bl	800166c <LL_ADC_INJ_IsConversionOngoing>
 80019d8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f040 81a4 	bne.w	8001d2e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f040 819f 	bne.w	8001d2e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6818      	ldr	r0, [r3, #0]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	6819      	ldr	r1, [r3, #0]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	461a      	mov	r2, r3
 80019fe:	f7ff fd72 	bl	80014e6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	695a      	ldr	r2, [r3, #20]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	08db      	lsrs	r3, r3, #3
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d00a      	beq.n	8001a3a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6818      	ldr	r0, [r3, #0]
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	6919      	ldr	r1, [r3, #16]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a34:	f7ff fcd6 	bl	80013e4 <LL_ADC_SetOffset>
 8001a38:	e179      	b.n	8001d2e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff fcf3 	bl	800142c <LL_ADC_GetOffsetChannel>
 8001a46:	4603      	mov	r3, r0
 8001a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d10a      	bne.n	8001a66 <HAL_ADC_ConfigChannel+0x14e>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2100      	movs	r1, #0
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fce8 	bl	800142c <LL_ADC_GetOffsetChannel>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	0e9b      	lsrs	r3, r3, #26
 8001a60:	f003 021f 	and.w	r2, r3, #31
 8001a64:	e01e      	b.n	8001aa4 <HAL_ADC_ConfigChannel+0x18c>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fcdd 	bl	800142c <LL_ADC_GetOffsetChannel>
 8001a72:	4603      	mov	r3, r0
 8001a74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001a7c:	fa93 f3a3 	rbit	r3, r3
 8001a80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001a88:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001a94:	2320      	movs	r3, #32
 8001a96:	e004      	b.n	8001aa2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001a98:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001a9c:	fab3 f383 	clz	r3, r3
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d105      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x1a4>
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	0e9b      	lsrs	r3, r3, #26
 8001ab6:	f003 031f 	and.w	r3, r3, #31
 8001aba:	e018      	b.n	8001aee <HAL_ADC_ConfigChannel+0x1d6>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ac8:	fa93 f3a3 	rbit	r3, r3
 8001acc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001ad0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ad4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001ad8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001ae0:	2320      	movs	r3, #32
 8001ae2:	e004      	b.n	8001aee <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001ae4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ae8:	fab3 f383 	clz	r3, r3
 8001aec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d106      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2200      	movs	r2, #0
 8001af8:	2100      	movs	r1, #0
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff fcac 	bl	8001458 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2101      	movs	r1, #1
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fc90 	bl	800142c <LL_ADC_GetOffsetChannel>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10a      	bne.n	8001b2c <HAL_ADC_ConfigChannel+0x214>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fc85 	bl	800142c <LL_ADC_GetOffsetChannel>
 8001b22:	4603      	mov	r3, r0
 8001b24:	0e9b      	lsrs	r3, r3, #26
 8001b26:	f003 021f 	and.w	r2, r3, #31
 8001b2a:	e01e      	b.n	8001b6a <HAL_ADC_ConfigChannel+0x252>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2101      	movs	r1, #1
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fc7a 	bl	800142c <LL_ADC_GetOffsetChannel>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001b42:	fa93 f3a3 	rbit	r3, r3
 8001b46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001b4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001b4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001b52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001b5a:	2320      	movs	r3, #32
 8001b5c:	e004      	b.n	8001b68 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001b5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b62:	fab3 f383 	clz	r3, r3
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d105      	bne.n	8001b82 <HAL_ADC_ConfigChannel+0x26a>
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	0e9b      	lsrs	r3, r3, #26
 8001b7c:	f003 031f 	and.w	r3, r3, #31
 8001b80:	e018      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x29c>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b8e:	fa93 f3a3 	rbit	r3, r3
 8001b92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001b96:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001b9a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001b9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001ba6:	2320      	movs	r3, #32
 8001ba8:	e004      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001baa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001bae:	fab3 f383 	clz	r3, r3
 8001bb2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d106      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fc49 	bl	8001458 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2102      	movs	r1, #2
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff fc2d 	bl	800142c <LL_ADC_GetOffsetChannel>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d10a      	bne.n	8001bf2 <HAL_ADC_ConfigChannel+0x2da>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2102      	movs	r1, #2
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fc22 	bl	800142c <LL_ADC_GetOffsetChannel>
 8001be8:	4603      	mov	r3, r0
 8001bea:	0e9b      	lsrs	r3, r3, #26
 8001bec:	f003 021f 	and.w	r2, r3, #31
 8001bf0:	e01e      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x318>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2102      	movs	r1, #2
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fc17 	bl	800142c <LL_ADC_GetOffsetChannel>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001c08:	fa93 f3a3 	rbit	r3, r3
 8001c0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001c10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001c18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001c20:	2320      	movs	r3, #32
 8001c22:	e004      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001c24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c28:	fab3 f383 	clz	r3, r3
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d105      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x330>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	0e9b      	lsrs	r3, r3, #26
 8001c42:	f003 031f 	and.w	r3, r3, #31
 8001c46:	e014      	b.n	8001c72 <HAL_ADC_ConfigChannel+0x35a>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001c50:	fa93 f3a3 	rbit	r3, r3
 8001c54:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001c56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001c5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001c64:	2320      	movs	r3, #32
 8001c66:	e004      	b.n	8001c72 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001c68:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001c6c:	fab3 f383 	clz	r3, r3
 8001c70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d106      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2102      	movs	r1, #2
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fbea 	bl	8001458 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2103      	movs	r1, #3
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fbce 	bl	800142c <LL_ADC_GetOffsetChannel>
 8001c90:	4603      	mov	r3, r0
 8001c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10a      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x398>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2103      	movs	r1, #3
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fbc3 	bl	800142c <LL_ADC_GetOffsetChannel>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	0e9b      	lsrs	r3, r3, #26
 8001caa:	f003 021f 	and.w	r2, r3, #31
 8001cae:	e017      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x3c8>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2103      	movs	r1, #3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fbb8 	bl	800142c <LL_ADC_GetOffsetChannel>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001cc2:	fa93 f3a3 	rbit	r3, r3
 8001cc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001cc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001cca:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001ccc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001cd2:	2320      	movs	r3, #32
 8001cd4:	e003      	b.n	8001cde <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001cd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001cd8:	fab3 f383 	clz	r3, r3
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d105      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x3e0>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	0e9b      	lsrs	r3, r3, #26
 8001cf2:	f003 031f 	and.w	r3, r3, #31
 8001cf6:	e011      	b.n	8001d1c <HAL_ADC_ConfigChannel+0x404>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d00:	fa93 f3a3 	rbit	r3, r3
 8001d04:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001d06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d08:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001d0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001d10:	2320      	movs	r3, #32
 8001d12:	e003      	b.n	8001d1c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001d14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d16:	fab3 f383 	clz	r3, r3
 8001d1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d106      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2200      	movs	r2, #0
 8001d26:	2103      	movs	r1, #3
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff fb95 	bl	8001458 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fc74 	bl	8001620 <LL_ADC_IsEnabled>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f040 8140 	bne.w	8001fc0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	6819      	ldr	r1, [r3, #0]
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	f7ff fbf5 	bl	800153c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	4a8f      	ldr	r2, [pc, #572]	@ (8001f94 <HAL_ADC_ConfigChannel+0x67c>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	f040 8131 	bne.w	8001fc0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10b      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x46e>
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	0e9b      	lsrs	r3, r3, #26
 8001d74:	3301      	adds	r3, #1
 8001d76:	f003 031f 	and.w	r3, r3, #31
 8001d7a:	2b09      	cmp	r3, #9
 8001d7c:	bf94      	ite	ls
 8001d7e:	2301      	movls	r3, #1
 8001d80:	2300      	movhi	r3, #0
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	e019      	b.n	8001dba <HAL_ADC_ConfigChannel+0x4a2>
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d8e:	fa93 f3a3 	rbit	r3, r3
 8001d92:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001d94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d96:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001d98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001d9e:	2320      	movs	r3, #32
 8001da0:	e003      	b.n	8001daa <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001da2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001da4:	fab3 f383 	clz	r3, r3
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	3301      	adds	r3, #1
 8001dac:	f003 031f 	and.w	r3, r3, #31
 8001db0:	2b09      	cmp	r3, #9
 8001db2:	bf94      	ite	ls
 8001db4:	2301      	movls	r3, #1
 8001db6:	2300      	movhi	r3, #0
 8001db8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d079      	beq.n	8001eb2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d107      	bne.n	8001dda <HAL_ADC_ConfigChannel+0x4c2>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	0e9b      	lsrs	r3, r3, #26
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	069b      	lsls	r3, r3, #26
 8001dd4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001dd8:	e015      	b.n	8001e06 <HAL_ADC_ConfigChannel+0x4ee>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001de2:	fa93 f3a3 	rbit	r3, r3
 8001de6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001de8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001dea:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001dec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001df2:	2320      	movs	r3, #32
 8001df4:	e003      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001df6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001df8:	fab3 f383 	clz	r3, r3
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	3301      	adds	r3, #1
 8001e00:	069b      	lsls	r3, r3, #26
 8001e02:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d109      	bne.n	8001e26 <HAL_ADC_ConfigChannel+0x50e>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	0e9b      	lsrs	r3, r3, #26
 8001e18:	3301      	adds	r3, #1
 8001e1a:	f003 031f 	and.w	r3, r3, #31
 8001e1e:	2101      	movs	r1, #1
 8001e20:	fa01 f303 	lsl.w	r3, r1, r3
 8001e24:	e017      	b.n	8001e56 <HAL_ADC_ConfigChannel+0x53e>
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e2e:	fa93 f3a3 	rbit	r3, r3
 8001e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001e34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e36:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001e38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001e3e:	2320      	movs	r3, #32
 8001e40:	e003      	b.n	8001e4a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001e42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e44:	fab3 f383 	clz	r3, r3
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	f003 031f 	and.w	r3, r3, #31
 8001e50:	2101      	movs	r1, #1
 8001e52:	fa01 f303 	lsl.w	r3, r1, r3
 8001e56:	ea42 0103 	orr.w	r1, r2, r3
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10a      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x564>
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	0e9b      	lsrs	r3, r3, #26
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	f003 021f 	and.w	r2, r3, #31
 8001e72:	4613      	mov	r3, r2
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	4413      	add	r3, r2
 8001e78:	051b      	lsls	r3, r3, #20
 8001e7a:	e018      	b.n	8001eae <HAL_ADC_ConfigChannel+0x596>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e84:	fa93 f3a3 	rbit	r3, r3
 8001e88:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001e94:	2320      	movs	r3, #32
 8001e96:	e003      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e9a:	fab3 f383 	clz	r3, r3
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	f003 021f 	and.w	r2, r3, #31
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4413      	add	r3, r2
 8001eac:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eae:	430b      	orrs	r3, r1
 8001eb0:	e081      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d107      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x5b6>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	0e9b      	lsrs	r3, r3, #26
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	069b      	lsls	r3, r3, #26
 8001ec8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ecc:	e015      	b.n	8001efa <HAL_ADC_ConfigChannel+0x5e2>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ed6:	fa93 f3a3 	rbit	r3, r3
 8001eda:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001ee6:	2320      	movs	r3, #32
 8001ee8:	e003      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eec:	fab3 f383 	clz	r3, r3
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	069b      	lsls	r3, r3, #26
 8001ef6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d109      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x602>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	0e9b      	lsrs	r3, r3, #26
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	f003 031f 	and.w	r3, r3, #31
 8001f12:	2101      	movs	r1, #1
 8001f14:	fa01 f303 	lsl.w	r3, r1, r3
 8001f18:	e017      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x632>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	fa93 f3a3 	rbit	r3, r3
 8001f26:	61bb      	str	r3, [r7, #24]
  return result;
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001f2c:	6a3b      	ldr	r3, [r7, #32]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001f32:	2320      	movs	r3, #32
 8001f34:	e003      	b.n	8001f3e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001f36:	6a3b      	ldr	r3, [r7, #32]
 8001f38:	fab3 f383 	clz	r3, r3
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	3301      	adds	r3, #1
 8001f40:	f003 031f 	and.w	r3, r3, #31
 8001f44:	2101      	movs	r1, #1
 8001f46:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4a:	ea42 0103 	orr.w	r1, r2, r3
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10d      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x65e>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	0e9b      	lsrs	r3, r3, #26
 8001f60:	3301      	adds	r3, #1
 8001f62:	f003 021f 	and.w	r2, r3, #31
 8001f66:	4613      	mov	r3, r2
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	4413      	add	r3, r2
 8001f6c:	3b1e      	subs	r3, #30
 8001f6e:	051b      	lsls	r3, r3, #20
 8001f70:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f74:	e01e      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x69c>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	fa93 f3a3 	rbit	r3, r3
 8001f82:	60fb      	str	r3, [r7, #12]
  return result;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d104      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001f8e:	2320      	movs	r3, #32
 8001f90:	e006      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x688>
 8001f92:	bf00      	nop
 8001f94:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	fab3 f383 	clz	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	f003 021f 	and.w	r2, r3, #31
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	4413      	add	r3, r2
 8001fac:	3b1e      	subs	r3, #30
 8001fae:	051b      	lsls	r3, r3, #20
 8001fb0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fb4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fba:	4619      	mov	r1, r3
 8001fbc:	f7ff fa93 	bl	80014e6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	4b3d      	ldr	r3, [pc, #244]	@ (80020bc <HAL_ADC_ConfigChannel+0x7a4>)
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d06c      	beq.n	80020a6 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fcc:	483c      	ldr	r0, [pc, #240]	@ (80020c0 <HAL_ADC_ConfigChannel+0x7a8>)
 8001fce:	f7ff f9fb 	bl	80013c8 <LL_ADC_GetCommonPathInternalCh>
 8001fd2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a3a      	ldr	r2, [pc, #232]	@ (80020c4 <HAL_ADC_ConfigChannel+0x7ac>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d127      	bne.n	8002030 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001fe0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001fe4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d121      	bne.n	8002030 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a35      	ldr	r2, [pc, #212]	@ (80020c8 <HAL_ADC_ConfigChannel+0x7b0>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d157      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ff6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ffa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ffe:	4619      	mov	r1, r3
 8002000:	482f      	ldr	r0, [pc, #188]	@ (80020c0 <HAL_ADC_ConfigChannel+0x7a8>)
 8002002:	f7ff f9ce 	bl	80013a2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002006:	4b31      	ldr	r3, [pc, #196]	@ (80020cc <HAL_ADC_ConfigChannel+0x7b4>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	099b      	lsrs	r3, r3, #6
 800200c:	4a30      	ldr	r2, [pc, #192]	@ (80020d0 <HAL_ADC_ConfigChannel+0x7b8>)
 800200e:	fba2 2303 	umull	r2, r3, r2, r3
 8002012:	099b      	lsrs	r3, r3, #6
 8002014:	1c5a      	adds	r2, r3, #1
 8002016:	4613      	mov	r3, r2
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	4413      	add	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002020:	e002      	b.n	8002028 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	3b01      	subs	r3, #1
 8002026:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f9      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800202e:	e03a      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a27      	ldr	r2, [pc, #156]	@ (80020d4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d113      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800203a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800203e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10d      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a1f      	ldr	r2, [pc, #124]	@ (80020c8 <HAL_ADC_ConfigChannel+0x7b0>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d12a      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002050:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002054:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002058:	4619      	mov	r1, r3
 800205a:	4819      	ldr	r0, [pc, #100]	@ (80020c0 <HAL_ADC_ConfigChannel+0x7a8>)
 800205c:	f7ff f9a1 	bl	80013a2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002060:	e021      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a1c      	ldr	r2, [pc, #112]	@ (80020d8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d11c      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800206c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002070:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d116      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a12      	ldr	r2, [pc, #72]	@ (80020c8 <HAL_ADC_ConfigChannel+0x7b0>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d111      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002082:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002086:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800208a:	4619      	mov	r1, r3
 800208c:	480c      	ldr	r0, [pc, #48]	@ (80020c0 <HAL_ADC_ConfigChannel+0x7a8>)
 800208e:	f7ff f988 	bl	80013a2 <LL_ADC_SetCommonPathInternalCh>
 8002092:	e008      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002098:	f043 0220 	orr.w	r2, r3, #32
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80020ae:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	37d8      	adds	r7, #216	@ 0xd8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	80080000 	.word	0x80080000
 80020c0:	50040300 	.word	0x50040300
 80020c4:	c7520000 	.word	0xc7520000
 80020c8:	50040000 	.word	0x50040000
 80020cc:	20000000 	.word	0x20000000
 80020d0:	053e2d63 	.word	0x053e2d63
 80020d4:	cb840000 	.word	0xcb840000
 80020d8:	80000001 	.word	0x80000001

080020dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002120 <__NVIC_SetPriorityGrouping+0x44>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020f8:	4013      	ands	r3, r2
 80020fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002104:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800210c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800210e:	4a04      	ldr	r2, [pc, #16]	@ (8002120 <__NVIC_SetPriorityGrouping+0x44>)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	60d3      	str	r3, [r2, #12]
}
 8002114:	bf00      	nop
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002128:	4b04      	ldr	r3, [pc, #16]	@ (800213c <__NVIC_GetPriorityGrouping+0x18>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	0a1b      	lsrs	r3, r3, #8
 800212e:	f003 0307 	and.w	r3, r3, #7
}
 8002132:	4618      	mov	r0, r3
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	2b00      	cmp	r3, #0
 8002150:	db0b      	blt.n	800216a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002152:	79fb      	ldrb	r3, [r7, #7]
 8002154:	f003 021f 	and.w	r2, r3, #31
 8002158:	4907      	ldr	r1, [pc, #28]	@ (8002178 <__NVIC_EnableIRQ+0x38>)
 800215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215e:	095b      	lsrs	r3, r3, #5
 8002160:	2001      	movs	r0, #1
 8002162:	fa00 f202 	lsl.w	r2, r0, r2
 8002166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000e100 	.word	0xe000e100

0800217c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	6039      	str	r1, [r7, #0]
 8002186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218c:	2b00      	cmp	r3, #0
 800218e:	db0a      	blt.n	80021a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	b2da      	uxtb	r2, r3
 8002194:	490c      	ldr	r1, [pc, #48]	@ (80021c8 <__NVIC_SetPriority+0x4c>)
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	0112      	lsls	r2, r2, #4
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	440b      	add	r3, r1
 80021a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021a4:	e00a      	b.n	80021bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	4908      	ldr	r1, [pc, #32]	@ (80021cc <__NVIC_SetPriority+0x50>)
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	3b04      	subs	r3, #4
 80021b4:	0112      	lsls	r2, r2, #4
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	440b      	add	r3, r1
 80021ba:	761a      	strb	r2, [r3, #24]
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000e100 	.word	0xe000e100
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b089      	sub	sp, #36	@ 0x24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f1c3 0307 	rsb	r3, r3, #7
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	bf28      	it	cs
 80021ee:	2304      	movcs	r3, #4
 80021f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3304      	adds	r3, #4
 80021f6:	2b06      	cmp	r3, #6
 80021f8:	d902      	bls.n	8002200 <NVIC_EncodePriority+0x30>
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	3b03      	subs	r3, #3
 80021fe:	e000      	b.n	8002202 <NVIC_EncodePriority+0x32>
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002204:	f04f 32ff 	mov.w	r2, #4294967295
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43da      	mvns	r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	401a      	ands	r2, r3
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002218:	f04f 31ff 	mov.w	r1, #4294967295
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	fa01 f303 	lsl.w	r3, r1, r3
 8002222:	43d9      	mvns	r1, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002228:	4313      	orrs	r3, r2
         );
}
 800222a:	4618      	mov	r0, r3
 800222c:	3724      	adds	r7, #36	@ 0x24
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
	...

08002238 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3b01      	subs	r3, #1
 8002244:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002248:	d301      	bcc.n	800224e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800224a:	2301      	movs	r3, #1
 800224c:	e00f      	b.n	800226e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800224e:	4a0a      	ldr	r2, [pc, #40]	@ (8002278 <SysTick_Config+0x40>)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3b01      	subs	r3, #1
 8002254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002256:	210f      	movs	r1, #15
 8002258:	f04f 30ff 	mov.w	r0, #4294967295
 800225c:	f7ff ff8e 	bl	800217c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002260:	4b05      	ldr	r3, [pc, #20]	@ (8002278 <SysTick_Config+0x40>)
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002266:	4b04      	ldr	r3, [pc, #16]	@ (8002278 <SysTick_Config+0x40>)
 8002268:	2207      	movs	r2, #7
 800226a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	e000e010 	.word	0xe000e010

0800227c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff ff29 	bl	80020dc <__NVIC_SetPriorityGrouping>
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b086      	sub	sp, #24
 8002296:	af00      	add	r7, sp, #0
 8002298:	4603      	mov	r3, r0
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	607a      	str	r2, [r7, #4]
 800229e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022a4:	f7ff ff3e 	bl	8002124 <__NVIC_GetPriorityGrouping>
 80022a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	68b9      	ldr	r1, [r7, #8]
 80022ae:	6978      	ldr	r0, [r7, #20]
 80022b0:	f7ff ff8e 	bl	80021d0 <NVIC_EncodePriority>
 80022b4:	4602      	mov	r2, r0
 80022b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ba:	4611      	mov	r1, r2
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff ff5d 	bl	800217c <__NVIC_SetPriority>
}
 80022c2:	bf00      	nop
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	4603      	mov	r3, r0
 80022d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff ff31 	bl	8002140 <__NVIC_EnableIRQ>
}
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff ffa2 	bl	8002238 <SysTick_Config>
 80022f4:	4603      	mov	r3, r0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e098      	b.n	8002444 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	461a      	mov	r2, r3
 8002318:	4b4d      	ldr	r3, [pc, #308]	@ (8002450 <HAL_DMA_Init+0x150>)
 800231a:	429a      	cmp	r2, r3
 800231c:	d80f      	bhi.n	800233e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	4b4b      	ldr	r3, [pc, #300]	@ (8002454 <HAL_DMA_Init+0x154>)
 8002326:	4413      	add	r3, r2
 8002328:	4a4b      	ldr	r2, [pc, #300]	@ (8002458 <HAL_DMA_Init+0x158>)
 800232a:	fba2 2303 	umull	r2, r3, r2, r3
 800232e:	091b      	lsrs	r3, r3, #4
 8002330:	009a      	lsls	r2, r3, #2
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a48      	ldr	r2, [pc, #288]	@ (800245c <HAL_DMA_Init+0x15c>)
 800233a:	641a      	str	r2, [r3, #64]	@ 0x40
 800233c:	e00e      	b.n	800235c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	4b46      	ldr	r3, [pc, #280]	@ (8002460 <HAL_DMA_Init+0x160>)
 8002346:	4413      	add	r3, r2
 8002348:	4a43      	ldr	r2, [pc, #268]	@ (8002458 <HAL_DMA_Init+0x158>)
 800234a:	fba2 2303 	umull	r2, r3, r2, r3
 800234e:	091b      	lsrs	r3, r3, #4
 8002350:	009a      	lsls	r2, r3, #2
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a42      	ldr	r2, [pc, #264]	@ (8002464 <HAL_DMA_Init+0x164>)
 800235a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2202      	movs	r2, #2
 8002360:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002372:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002376:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002380:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800238c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002398:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80023b6:	d039      	beq.n	800242c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023bc:	4a27      	ldr	r2, [pc, #156]	@ (800245c <HAL_DMA_Init+0x15c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d11a      	bne.n	80023f8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80023c2:	4b29      	ldr	r3, [pc, #164]	@ (8002468 <HAL_DMA_Init+0x168>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ca:	f003 031c 	and.w	r3, r3, #28
 80023ce:	210f      	movs	r1, #15
 80023d0:	fa01 f303 	lsl.w	r3, r1, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	4924      	ldr	r1, [pc, #144]	@ (8002468 <HAL_DMA_Init+0x168>)
 80023d8:	4013      	ands	r3, r2
 80023da:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80023dc:	4b22      	ldr	r3, [pc, #136]	@ (8002468 <HAL_DMA_Init+0x168>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6859      	ldr	r1, [r3, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e8:	f003 031c 	and.w	r3, r3, #28
 80023ec:	fa01 f303 	lsl.w	r3, r1, r3
 80023f0:	491d      	ldr	r1, [pc, #116]	@ (8002468 <HAL_DMA_Init+0x168>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]
 80023f6:	e019      	b.n	800242c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80023f8:	4b1c      	ldr	r3, [pc, #112]	@ (800246c <HAL_DMA_Init+0x16c>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002400:	f003 031c 	and.w	r3, r3, #28
 8002404:	210f      	movs	r1, #15
 8002406:	fa01 f303 	lsl.w	r3, r1, r3
 800240a:	43db      	mvns	r3, r3
 800240c:	4917      	ldr	r1, [pc, #92]	@ (800246c <HAL_DMA_Init+0x16c>)
 800240e:	4013      	ands	r3, r2
 8002410:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002412:	4b16      	ldr	r3, [pc, #88]	@ (800246c <HAL_DMA_Init+0x16c>)
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6859      	ldr	r1, [r3, #4]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800241e:	f003 031c 	and.w	r3, r3, #28
 8002422:	fa01 f303 	lsl.w	r3, r1, r3
 8002426:	4911      	ldr	r1, [pc, #68]	@ (800246c <HAL_DMA_Init+0x16c>)
 8002428:	4313      	orrs	r3, r2
 800242a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	40020407 	.word	0x40020407
 8002454:	bffdfff8 	.word	0xbffdfff8
 8002458:	cccccccd 	.word	0xcccccccd
 800245c:	40020000 	.word	0x40020000
 8002460:	bffdfbf8 	.word	0xbffdfbf8
 8002464:	40020400 	.word	0x40020400
 8002468:	400200a8 	.word	0x400200a8
 800246c:	400204a8 	.word	0x400204a8

08002470 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800248c:	f003 031c 	and.w	r3, r3, #28
 8002490:	2204      	movs	r2, #4
 8002492:	409a      	lsls	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4013      	ands	r3, r2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d026      	beq.n	80024ea <HAL_DMA_IRQHandler+0x7a>
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d021      	beq.n	80024ea <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0320 	and.w	r3, r3, #32
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d107      	bne.n	80024c4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0204 	bic.w	r2, r2, #4
 80024c2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c8:	f003 021c 	and.w	r2, r3, #28
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d0:	2104      	movs	r1, #4
 80024d2:	fa01 f202 	lsl.w	r2, r1, r2
 80024d6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d071      	beq.n	80025c4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80024e8:	e06c      	b.n	80025c4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ee:	f003 031c 	and.w	r3, r3, #28
 80024f2:	2202      	movs	r2, #2
 80024f4:	409a      	lsls	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4013      	ands	r3, r2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d02e      	beq.n	800255c <HAL_DMA_IRQHandler+0xec>
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d029      	beq.n	800255c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0320 	and.w	r3, r3, #32
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10b      	bne.n	800252e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 020a 	bic.w	r2, r2, #10
 8002524:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002532:	f003 021c 	and.w	r2, r3, #28
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253a:	2102      	movs	r1, #2
 800253c:	fa01 f202 	lsl.w	r2, r1, r2
 8002540:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800254e:	2b00      	cmp	r3, #0
 8002550:	d038      	beq.n	80025c4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800255a:	e033      	b.n	80025c4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002560:	f003 031c 	and.w	r3, r3, #28
 8002564:	2208      	movs	r2, #8
 8002566:	409a      	lsls	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4013      	ands	r3, r2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d02a      	beq.n	80025c6 <HAL_DMA_IRQHandler+0x156>
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b00      	cmp	r3, #0
 8002578:	d025      	beq.n	80025c6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 020e 	bic.w	r2, r2, #14
 8002588:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800258e:	f003 021c 	and.w	r2, r3, #28
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002596:	2101      	movs	r1, #1
 8002598:	fa01 f202 	lsl.w	r2, r1, r2
 800259c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d004      	beq.n	80025c6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80025c4:	bf00      	nop
 80025c6:	bf00      	nop
}
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025de:	e148      	b.n	8002872 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	2101      	movs	r1, #1
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ec:	4013      	ands	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 813a 	beq.w	800286c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	2b01      	cmp	r3, #1
 8002602:	d005      	beq.n	8002610 <HAL_GPIO_Init+0x40>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d130      	bne.n	8002672 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	2203      	movs	r2, #3
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	4013      	ands	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	4313      	orrs	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002646:	2201      	movs	r2, #1
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43db      	mvns	r3, r3
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4013      	ands	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	091b      	lsrs	r3, r3, #4
 800265c:	f003 0201 	and.w	r2, r3, #1
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	2b03      	cmp	r3, #3
 800267c:	d017      	beq.n	80026ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	2203      	movs	r2, #3
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4013      	ands	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d123      	bne.n	8002702 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	08da      	lsrs	r2, r3, #3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3208      	adds	r2, #8
 80026c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	220f      	movs	r2, #15
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	4013      	ands	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	691a      	ldr	r2, [r3, #16]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	08da      	lsrs	r2, r3, #3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3208      	adds	r2, #8
 80026fc:	6939      	ldr	r1, [r7, #16]
 80026fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	2203      	movs	r2, #3
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4013      	ands	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f003 0203 	and.w	r2, r3, #3
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 8094 	beq.w	800286c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002744:	4b52      	ldr	r3, [pc, #328]	@ (8002890 <HAL_GPIO_Init+0x2c0>)
 8002746:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002748:	4a51      	ldr	r2, [pc, #324]	@ (8002890 <HAL_GPIO_Init+0x2c0>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002750:	4b4f      	ldr	r3, [pc, #316]	@ (8002890 <HAL_GPIO_Init+0x2c0>)
 8002752:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800275c:	4a4d      	ldr	r2, [pc, #308]	@ (8002894 <HAL_GPIO_Init+0x2c4>)
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	089b      	lsrs	r3, r3, #2
 8002762:	3302      	adds	r3, #2
 8002764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002768:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	220f      	movs	r2, #15
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	4013      	ands	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002786:	d00d      	beq.n	80027a4 <HAL_GPIO_Init+0x1d4>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a43      	ldr	r2, [pc, #268]	@ (8002898 <HAL_GPIO_Init+0x2c8>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d007      	beq.n	80027a0 <HAL_GPIO_Init+0x1d0>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a42      	ldr	r2, [pc, #264]	@ (800289c <HAL_GPIO_Init+0x2cc>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d101      	bne.n	800279c <HAL_GPIO_Init+0x1cc>
 8002798:	2302      	movs	r3, #2
 800279a:	e004      	b.n	80027a6 <HAL_GPIO_Init+0x1d6>
 800279c:	2307      	movs	r3, #7
 800279e:	e002      	b.n	80027a6 <HAL_GPIO_Init+0x1d6>
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <HAL_GPIO_Init+0x1d6>
 80027a4:	2300      	movs	r3, #0
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	f002 0203 	and.w	r2, r2, #3
 80027ac:	0092      	lsls	r2, r2, #2
 80027ae:	4093      	lsls	r3, r2
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027b6:	4937      	ldr	r1, [pc, #220]	@ (8002894 <HAL_GPIO_Init+0x2c4>)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	089b      	lsrs	r3, r3, #2
 80027bc:	3302      	adds	r3, #2
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027c4:	4b36      	ldr	r3, [pc, #216]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027e8:	4a2d      	ldr	r2, [pc, #180]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027ee:	4b2c      	ldr	r3, [pc, #176]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	43db      	mvns	r3, r3
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4013      	ands	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4313      	orrs	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002812:	4a23      	ldr	r2, [pc, #140]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002818:	4b21      	ldr	r3, [pc, #132]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	43db      	mvns	r3, r3
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4013      	ands	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4313      	orrs	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800283c:	4a18      	ldr	r2, [pc, #96]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002842:	4b17      	ldr	r3, [pc, #92]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	43db      	mvns	r3, r3
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	4013      	ands	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4313      	orrs	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002866:	4a0e      	ldr	r2, [pc, #56]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	3301      	adds	r3, #1
 8002870:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	fa22 f303 	lsr.w	r3, r2, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	f47f aeaf 	bne.w	80025e0 <HAL_GPIO_Init+0x10>
  }
}
 8002882:	bf00      	nop
 8002884:	bf00      	nop
 8002886:	371c      	adds	r7, #28
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	40021000 	.word	0x40021000
 8002894:	40010000 	.word	0x40010000
 8002898:	48000400 	.word	0x48000400
 800289c:	48000800 	.word	0x48000800
 80028a0:	40010400 	.word	0x40010400

080028a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	807b      	strh	r3, [r7, #2]
 80028b0:	4613      	mov	r3, r2
 80028b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028b4:	787b      	ldrb	r3, [r7, #1]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028ba:	887a      	ldrh	r2, [r7, #2]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028c0:	e002      	b.n	80028c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028c2:	887a      	ldrh	r2, [r7, #2]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028d8:	4b04      	ldr	r3, [pc, #16]	@ (80028ec <HAL_PWREx_GetVoltageRange+0x18>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40007000 	.word	0x40007000

080028f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028fe:	d130      	bne.n	8002962 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002900:	4b23      	ldr	r3, [pc, #140]	@ (8002990 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002908:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800290c:	d038      	beq.n	8002980 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800290e:	4b20      	ldr	r3, [pc, #128]	@ (8002990 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002916:	4a1e      	ldr	r2, [pc, #120]	@ (8002990 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002918:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800291c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800291e:	4b1d      	ldr	r3, [pc, #116]	@ (8002994 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2232      	movs	r2, #50	@ 0x32
 8002924:	fb02 f303 	mul.w	r3, r2, r3
 8002928:	4a1b      	ldr	r2, [pc, #108]	@ (8002998 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800292a:	fba2 2303 	umull	r2, r3, r2, r3
 800292e:	0c9b      	lsrs	r3, r3, #18
 8002930:	3301      	adds	r3, #1
 8002932:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002934:	e002      	b.n	800293c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	3b01      	subs	r3, #1
 800293a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800293c:	4b14      	ldr	r3, [pc, #80]	@ (8002990 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002944:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002948:	d102      	bne.n	8002950 <HAL_PWREx_ControlVoltageScaling+0x60>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1f2      	bne.n	8002936 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002950:	4b0f      	ldr	r3, [pc, #60]	@ (8002990 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002958:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800295c:	d110      	bne.n	8002980 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e00f      	b.n	8002982 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002962:	4b0b      	ldr	r3, [pc, #44]	@ (8002990 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800296a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800296e:	d007      	beq.n	8002980 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002970:	4b07      	ldr	r3, [pc, #28]	@ (8002990 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002978:	4a05      	ldr	r2, [pc, #20]	@ (8002990 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800297a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800297e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	40007000 	.word	0x40007000
 8002994:	20000000 	.word	0x20000000
 8002998:	431bde83 	.word	0x431bde83

0800299c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b088      	sub	sp, #32
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d102      	bne.n	80029b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	f000 bc02 	b.w	80031b4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029b0:	4b96      	ldr	r3, [pc, #600]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 030c 	and.w	r3, r3, #12
 80029b8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029ba:	4b94      	ldr	r3, [pc, #592]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0310 	and.w	r3, r3, #16
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 80e4 	beq.w	8002b9a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d007      	beq.n	80029e8 <HAL_RCC_OscConfig+0x4c>
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	2b0c      	cmp	r3, #12
 80029dc:	f040 808b 	bne.w	8002af6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	f040 8087 	bne.w	8002af6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029e8:	4b88      	ldr	r3, [pc, #544]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <HAL_RCC_OscConfig+0x64>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e3d9      	b.n	80031b4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a1a      	ldr	r2, [r3, #32]
 8002a04:	4b81      	ldr	r3, [pc, #516]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0308 	and.w	r3, r3, #8
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d004      	beq.n	8002a1a <HAL_RCC_OscConfig+0x7e>
 8002a10:	4b7e      	ldr	r3, [pc, #504]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a18:	e005      	b.n	8002a26 <HAL_RCC_OscConfig+0x8a>
 8002a1a:	4b7c      	ldr	r3, [pc, #496]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002a1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a20:	091b      	lsrs	r3, r3, #4
 8002a22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d223      	bcs.n	8002a72 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 fd8c 	bl	800354c <RCC_SetFlashLatencyFromMSIRange>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e3ba      	b.n	80031b4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a3e:	4b73      	ldr	r3, [pc, #460]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a72      	ldr	r2, [pc, #456]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002a44:	f043 0308 	orr.w	r3, r3, #8
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	4b70      	ldr	r3, [pc, #448]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	496d      	ldr	r1, [pc, #436]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a5c:	4b6b      	ldr	r3, [pc, #428]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	021b      	lsls	r3, r3, #8
 8002a6a:	4968      	ldr	r1, [pc, #416]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	604b      	str	r3, [r1, #4]
 8002a70:	e025      	b.n	8002abe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a72:	4b66      	ldr	r3, [pc, #408]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a65      	ldr	r2, [pc, #404]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002a78:	f043 0308 	orr.w	r3, r3, #8
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	4b63      	ldr	r3, [pc, #396]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	4960      	ldr	r1, [pc, #384]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a90:	4b5e      	ldr	r3, [pc, #376]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	021b      	lsls	r3, r3, #8
 8002a9e:	495b      	ldr	r1, [pc, #364]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d109      	bne.n	8002abe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 fd4c 	bl	800354c <RCC_SetFlashLatencyFromMSIRange>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e37a      	b.n	80031b4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002abe:	f000 fc81 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	4b51      	ldr	r3, [pc, #324]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	091b      	lsrs	r3, r3, #4
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	4950      	ldr	r1, [pc, #320]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002ad0:	5ccb      	ldrb	r3, [r1, r3]
 8002ad2:	f003 031f 	and.w	r3, r3, #31
 8002ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8002ada:	4a4e      	ldr	r2, [pc, #312]	@ (8002c14 <HAL_RCC_OscConfig+0x278>)
 8002adc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ade:	4b4e      	ldr	r3, [pc, #312]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fe fbee 	bl	80012c4 <HAL_InitTick>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d052      	beq.n	8002b98 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002af2:	7bfb      	ldrb	r3, [r7, #15]
 8002af4:	e35e      	b.n	80031b4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d032      	beq.n	8002b64 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002afe:	4b43      	ldr	r3, [pc, #268]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a42      	ldr	r2, [pc, #264]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b0a:	f7fe fc2b 	bl	8001364 <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b10:	e008      	b.n	8002b24 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b12:	f7fe fc27 	bl	8001364 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e347      	b.n	80031b4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b24:	4b39      	ldr	r3, [pc, #228]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0f0      	beq.n	8002b12 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b30:	4b36      	ldr	r3, [pc, #216]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a35      	ldr	r2, [pc, #212]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002b36:	f043 0308 	orr.w	r3, r3, #8
 8002b3a:	6013      	str	r3, [r2, #0]
 8002b3c:	4b33      	ldr	r3, [pc, #204]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	4930      	ldr	r1, [pc, #192]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b4e:	4b2f      	ldr	r3, [pc, #188]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	021b      	lsls	r3, r3, #8
 8002b5c:	492b      	ldr	r1, [pc, #172]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	604b      	str	r3, [r1, #4]
 8002b62:	e01a      	b.n	8002b9a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b64:	4b29      	ldr	r3, [pc, #164]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a28      	ldr	r2, [pc, #160]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002b6a:	f023 0301 	bic.w	r3, r3, #1
 8002b6e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b70:	f7fe fbf8 	bl	8001364 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b78:	f7fe fbf4 	bl	8001364 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e314      	b.n	80031b4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b8a:	4b20      	ldr	r3, [pc, #128]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x1dc>
 8002b96:	e000      	b.n	8002b9a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d073      	beq.n	8002c8e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	d005      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x21c>
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	2b0c      	cmp	r3, #12
 8002bb0:	d10e      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2b03      	cmp	r3, #3
 8002bb6:	d10b      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb8:	4b14      	ldr	r3, [pc, #80]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d063      	beq.n	8002c8c <HAL_RCC_OscConfig+0x2f0>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d15f      	bne.n	8002c8c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e2f1      	b.n	80031b4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bd8:	d106      	bne.n	8002be8 <HAL_RCC_OscConfig+0x24c>
 8002bda:	4b0c      	ldr	r3, [pc, #48]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a0b      	ldr	r2, [pc, #44]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002be0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	e025      	b.n	8002c34 <HAL_RCC_OscConfig+0x298>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bf0:	d114      	bne.n	8002c1c <HAL_RCC_OscConfig+0x280>
 8002bf2:	4b06      	ldr	r3, [pc, #24]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a05      	ldr	r2, [pc, #20]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002bf8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	4b03      	ldr	r3, [pc, #12]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a02      	ldr	r2, [pc, #8]	@ (8002c0c <HAL_RCC_OscConfig+0x270>)
 8002c04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	e013      	b.n	8002c34 <HAL_RCC_OscConfig+0x298>
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	0800613c 	.word	0x0800613c
 8002c14:	20000000 	.word	0x20000000
 8002c18:	20000004 	.word	0x20000004
 8002c1c:	4ba0      	ldr	r3, [pc, #640]	@ (8002ea0 <HAL_RCC_OscConfig+0x504>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a9f      	ldr	r2, [pc, #636]	@ (8002ea0 <HAL_RCC_OscConfig+0x504>)
 8002c22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c26:	6013      	str	r3, [r2, #0]
 8002c28:	4b9d      	ldr	r3, [pc, #628]	@ (8002ea0 <HAL_RCC_OscConfig+0x504>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a9c      	ldr	r2, [pc, #624]	@ (8002ea0 <HAL_RCC_OscConfig+0x504>)
 8002c2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d013      	beq.n	8002c64 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7fe fb92 	bl	8001364 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c44:	f7fe fb8e 	bl	8001364 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b64      	cmp	r3, #100	@ 0x64
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e2ae      	b.n	80031b4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c56:	4b92      	ldr	r3, [pc, #584]	@ (8002ea0 <HAL_RCC_OscConfig+0x504>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCC_OscConfig+0x2a8>
 8002c62:	e014      	b.n	8002c8e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c64:	f7fe fb7e 	bl	8001364 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c6c:	f7fe fb7a 	bl	8001364 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b64      	cmp	r3, #100	@ 0x64
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e29a      	b.n	80031b4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c7e:	4b88      	ldr	r3, [pc, #544]	@ (8002ea0 <HAL_RCC_OscConfig+0x504>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0x2d0>
 8002c8a:	e000      	b.n	8002c8e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d060      	beq.n	8002d5c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	2b04      	cmp	r3, #4
 8002c9e:	d005      	beq.n	8002cac <HAL_RCC_OscConfig+0x310>
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	2b0c      	cmp	r3, #12
 8002ca4:	d119      	bne.n	8002cda <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d116      	bne.n	8002cda <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cac:	4b7c      	ldr	r3, [pc, #496]	@ (8002ea0 <HAL_RCC_OscConfig+0x504>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d005      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x328>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e277      	b.n	80031b4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc4:	4b76      	ldr	r3, [pc, #472]	@ (8002ea0 <HAL_RCC_OscConfig+0x504>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	061b      	lsls	r3, r3, #24
 8002cd2:	4973      	ldr	r1, [pc, #460]	@ (8002ea0 <HAL_RCC_OscConfig+0x504>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cd8:	e040      	b.n	8002d5c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d023      	beq.n	8002d2a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ce2:	4b6f      	ldr	r3, [pc, #444]	@ (8002ea0 <HAL_RCC_OscConfig+0x504>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a6e      	ldr	r2, [pc, #440]	@ (8002ea0 <HAL_RCC_OscConfig+0x504>)
 8002ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cee:	f7fe fb39 	bl	8001364 <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cf6:	f7fe fb35 	bl	8001364 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e255      	b.n	80031b4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d08:	4b65      	ldr	r3, [pc, #404]	@ (8002ea0 <HAL_RCC_OscConfig+0x504>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0f0      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d14:	4b62      	ldr	r3, [pc, #392]	@ (8002ea0 <HAL_RCC_OscConfig+0x504>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	061b      	lsls	r3, r3, #24
 8002d22:	495f      	ldr	r1, [pc, #380]	@ (8002ea0 <HAL_RCC_OscConfig+0x504>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	604b      	str	r3, [r1, #4]
 8002d28:	e018      	b.n	8002d5c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d2a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ea0 <HAL_RCC_OscConfig+0x504>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a5c      	ldr	r2, [pc, #368]	@ (8002ea0 <HAL_RCC_OscConfig+0x504>)
 8002d30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d36:	f7fe fb15 	bl	8001364 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d3e:	f7fe fb11 	bl	8001364 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e231      	b.n	80031b4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d50:	4b53      	ldr	r3, [pc, #332]	@ (8002ea0 <HAL_RCC_OscConfig+0x504>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1f0      	bne.n	8002d3e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0308 	and.w	r3, r3, #8
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d03c      	beq.n	8002de2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d01c      	beq.n	8002daa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d70:	4b4b      	ldr	r3, [pc, #300]	@ (8002ea0 <HAL_RCC_OscConfig+0x504>)
 8002d72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d76:	4a4a      	ldr	r2, [pc, #296]	@ (8002ea0 <HAL_RCC_OscConfig+0x504>)
 8002d78:	f043 0301 	orr.w	r3, r3, #1
 8002d7c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d80:	f7fe faf0 	bl	8001364 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d88:	f7fe faec 	bl	8001364 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e20c      	b.n	80031b4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d9a:	4b41      	ldr	r3, [pc, #260]	@ (8002ea0 <HAL_RCC_OscConfig+0x504>)
 8002d9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0ef      	beq.n	8002d88 <HAL_RCC_OscConfig+0x3ec>
 8002da8:	e01b      	b.n	8002de2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002daa:	4b3d      	ldr	r3, [pc, #244]	@ (8002ea0 <HAL_RCC_OscConfig+0x504>)
 8002dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002db0:	4a3b      	ldr	r2, [pc, #236]	@ (8002ea0 <HAL_RCC_OscConfig+0x504>)
 8002db2:	f023 0301 	bic.w	r3, r3, #1
 8002db6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dba:	f7fe fad3 	bl	8001364 <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc2:	f7fe facf 	bl	8001364 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e1ef      	b.n	80031b4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dd4:	4b32      	ldr	r3, [pc, #200]	@ (8002ea0 <HAL_RCC_OscConfig+0x504>)
 8002dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1ef      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 80a6 	beq.w	8002f3c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002df0:	2300      	movs	r3, #0
 8002df2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002df4:	4b2a      	ldr	r3, [pc, #168]	@ (8002ea0 <HAL_RCC_OscConfig+0x504>)
 8002df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10d      	bne.n	8002e1c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e00:	4b27      	ldr	r3, [pc, #156]	@ (8002ea0 <HAL_RCC_OscConfig+0x504>)
 8002e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e04:	4a26      	ldr	r2, [pc, #152]	@ (8002ea0 <HAL_RCC_OscConfig+0x504>)
 8002e06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e0c:	4b24      	ldr	r3, [pc, #144]	@ (8002ea0 <HAL_RCC_OscConfig+0x504>)
 8002e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e14:	60bb      	str	r3, [r7, #8]
 8002e16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e1c:	4b21      	ldr	r3, [pc, #132]	@ (8002ea4 <HAL_RCC_OscConfig+0x508>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d118      	bne.n	8002e5a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e28:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea4 <HAL_RCC_OscConfig+0x508>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ea4 <HAL_RCC_OscConfig+0x508>)
 8002e2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e34:	f7fe fa96 	bl	8001364 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e3c:	f7fe fa92 	bl	8001364 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e1b2      	b.n	80031b4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e4e:	4b15      	ldr	r3, [pc, #84]	@ (8002ea4 <HAL_RCC_OscConfig+0x508>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0f0      	beq.n	8002e3c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d108      	bne.n	8002e74 <HAL_RCC_OscConfig+0x4d8>
 8002e62:	4b0f      	ldr	r3, [pc, #60]	@ (8002ea0 <HAL_RCC_OscConfig+0x504>)
 8002e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e68:	4a0d      	ldr	r2, [pc, #52]	@ (8002ea0 <HAL_RCC_OscConfig+0x504>)
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e72:	e029      	b.n	8002ec8 <HAL_RCC_OscConfig+0x52c>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	2b05      	cmp	r3, #5
 8002e7a:	d115      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x50c>
 8002e7c:	4b08      	ldr	r3, [pc, #32]	@ (8002ea0 <HAL_RCC_OscConfig+0x504>)
 8002e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e82:	4a07      	ldr	r2, [pc, #28]	@ (8002ea0 <HAL_RCC_OscConfig+0x504>)
 8002e84:	f043 0304 	orr.w	r3, r3, #4
 8002e88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e8c:	4b04      	ldr	r3, [pc, #16]	@ (8002ea0 <HAL_RCC_OscConfig+0x504>)
 8002e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e92:	4a03      	ldr	r2, [pc, #12]	@ (8002ea0 <HAL_RCC_OscConfig+0x504>)
 8002e94:	f043 0301 	orr.w	r3, r3, #1
 8002e98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e9c:	e014      	b.n	8002ec8 <HAL_RCC_OscConfig+0x52c>
 8002e9e:	bf00      	nop
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	40007000 	.word	0x40007000
 8002ea8:	4b9a      	ldr	r3, [pc, #616]	@ (8003114 <HAL_RCC_OscConfig+0x778>)
 8002eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eae:	4a99      	ldr	r2, [pc, #612]	@ (8003114 <HAL_RCC_OscConfig+0x778>)
 8002eb0:	f023 0301 	bic.w	r3, r3, #1
 8002eb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002eb8:	4b96      	ldr	r3, [pc, #600]	@ (8003114 <HAL_RCC_OscConfig+0x778>)
 8002eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ebe:	4a95      	ldr	r2, [pc, #596]	@ (8003114 <HAL_RCC_OscConfig+0x778>)
 8002ec0:	f023 0304 	bic.w	r3, r3, #4
 8002ec4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d016      	beq.n	8002efe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed0:	f7fe fa48 	bl	8001364 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ed6:	e00a      	b.n	8002eee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed8:	f7fe fa44 	bl	8001364 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e162      	b.n	80031b4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eee:	4b89      	ldr	r3, [pc, #548]	@ (8003114 <HAL_RCC_OscConfig+0x778>)
 8002ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0ed      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x53c>
 8002efc:	e015      	b.n	8002f2a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efe:	f7fe fa31 	bl	8001364 <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f04:	e00a      	b.n	8002f1c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f06:	f7fe fa2d 	bl	8001364 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e14b      	b.n	80031b4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f1c:	4b7d      	ldr	r3, [pc, #500]	@ (8003114 <HAL_RCC_OscConfig+0x778>)
 8002f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1ed      	bne.n	8002f06 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f2a:	7ffb      	ldrb	r3, [r7, #31]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d105      	bne.n	8002f3c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f30:	4b78      	ldr	r3, [pc, #480]	@ (8003114 <HAL_RCC_OscConfig+0x778>)
 8002f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f34:	4a77      	ldr	r2, [pc, #476]	@ (8003114 <HAL_RCC_OscConfig+0x778>)
 8002f36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f3a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0320 	and.w	r3, r3, #32
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d03c      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d01c      	beq.n	8002f8a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f50:	4b70      	ldr	r3, [pc, #448]	@ (8003114 <HAL_RCC_OscConfig+0x778>)
 8002f52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f56:	4a6f      	ldr	r2, [pc, #444]	@ (8003114 <HAL_RCC_OscConfig+0x778>)
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f60:	f7fe fa00 	bl	8001364 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f68:	f7fe f9fc 	bl	8001364 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e11c      	b.n	80031b4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f7a:	4b66      	ldr	r3, [pc, #408]	@ (8003114 <HAL_RCC_OscConfig+0x778>)
 8002f7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0ef      	beq.n	8002f68 <HAL_RCC_OscConfig+0x5cc>
 8002f88:	e01b      	b.n	8002fc2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f8a:	4b62      	ldr	r3, [pc, #392]	@ (8003114 <HAL_RCC_OscConfig+0x778>)
 8002f8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f90:	4a60      	ldr	r2, [pc, #384]	@ (8003114 <HAL_RCC_OscConfig+0x778>)
 8002f92:	f023 0301 	bic.w	r3, r3, #1
 8002f96:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9a:	f7fe f9e3 	bl	8001364 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fa2:	f7fe f9df 	bl	8001364 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e0ff      	b.n	80031b4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fb4:	4b57      	ldr	r3, [pc, #348]	@ (8003114 <HAL_RCC_OscConfig+0x778>)
 8002fb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1ef      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 80f3 	beq.w	80031b2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	f040 80c9 	bne.w	8003168 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002fd6:	4b4f      	ldr	r3, [pc, #316]	@ (8003114 <HAL_RCC_OscConfig+0x778>)
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f003 0203 	and.w	r2, r3, #3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d12c      	bne.n	8003044 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d123      	bne.n	8003044 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003006:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003008:	429a      	cmp	r2, r3
 800300a:	d11b      	bne.n	8003044 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003016:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003018:	429a      	cmp	r2, r3
 800301a:	d113      	bne.n	8003044 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003026:	085b      	lsrs	r3, r3, #1
 8003028:	3b01      	subs	r3, #1
 800302a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800302c:	429a      	cmp	r2, r3
 800302e:	d109      	bne.n	8003044 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303a:	085b      	lsrs	r3, r3, #1
 800303c:	3b01      	subs	r3, #1
 800303e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003040:	429a      	cmp	r2, r3
 8003042:	d06b      	beq.n	800311c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	2b0c      	cmp	r3, #12
 8003048:	d062      	beq.n	8003110 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800304a:	4b32      	ldr	r3, [pc, #200]	@ (8003114 <HAL_RCC_OscConfig+0x778>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e0ac      	b.n	80031b4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800305a:	4b2e      	ldr	r3, [pc, #184]	@ (8003114 <HAL_RCC_OscConfig+0x778>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a2d      	ldr	r2, [pc, #180]	@ (8003114 <HAL_RCC_OscConfig+0x778>)
 8003060:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003064:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003066:	f7fe f97d 	bl	8001364 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800306c:	e008      	b.n	8003080 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800306e:	f7fe f979 	bl	8001364 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e099      	b.n	80031b4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003080:	4b24      	ldr	r3, [pc, #144]	@ (8003114 <HAL_RCC_OscConfig+0x778>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1f0      	bne.n	800306e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800308c:	4b21      	ldr	r3, [pc, #132]	@ (8003114 <HAL_RCC_OscConfig+0x778>)
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	4b21      	ldr	r3, [pc, #132]	@ (8003118 <HAL_RCC_OscConfig+0x77c>)
 8003092:	4013      	ands	r3, r2
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800309c:	3a01      	subs	r2, #1
 800309e:	0112      	lsls	r2, r2, #4
 80030a0:	4311      	orrs	r1, r2
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80030a6:	0212      	lsls	r2, r2, #8
 80030a8:	4311      	orrs	r1, r2
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80030ae:	0852      	lsrs	r2, r2, #1
 80030b0:	3a01      	subs	r2, #1
 80030b2:	0552      	lsls	r2, r2, #21
 80030b4:	4311      	orrs	r1, r2
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80030ba:	0852      	lsrs	r2, r2, #1
 80030bc:	3a01      	subs	r2, #1
 80030be:	0652      	lsls	r2, r2, #25
 80030c0:	4311      	orrs	r1, r2
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80030c6:	06d2      	lsls	r2, r2, #27
 80030c8:	430a      	orrs	r2, r1
 80030ca:	4912      	ldr	r1, [pc, #72]	@ (8003114 <HAL_RCC_OscConfig+0x778>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030d0:	4b10      	ldr	r3, [pc, #64]	@ (8003114 <HAL_RCC_OscConfig+0x778>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a0f      	ldr	r2, [pc, #60]	@ (8003114 <HAL_RCC_OscConfig+0x778>)
 80030d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030dc:	4b0d      	ldr	r3, [pc, #52]	@ (8003114 <HAL_RCC_OscConfig+0x778>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	4a0c      	ldr	r2, [pc, #48]	@ (8003114 <HAL_RCC_OscConfig+0x778>)
 80030e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030e8:	f7fe f93c 	bl	8001364 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f0:	f7fe f938 	bl	8001364 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e058      	b.n	80031b4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003102:	4b04      	ldr	r3, [pc, #16]	@ (8003114 <HAL_RCC_OscConfig+0x778>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f0      	beq.n	80030f0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800310e:	e050      	b.n	80031b2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e04f      	b.n	80031b4 <HAL_RCC_OscConfig+0x818>
 8003114:	40021000 	.word	0x40021000
 8003118:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800311c:	4b27      	ldr	r3, [pc, #156]	@ (80031bc <HAL_RCC_OscConfig+0x820>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d144      	bne.n	80031b2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003128:	4b24      	ldr	r3, [pc, #144]	@ (80031bc <HAL_RCC_OscConfig+0x820>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a23      	ldr	r2, [pc, #140]	@ (80031bc <HAL_RCC_OscConfig+0x820>)
 800312e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003132:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003134:	4b21      	ldr	r3, [pc, #132]	@ (80031bc <HAL_RCC_OscConfig+0x820>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	4a20      	ldr	r2, [pc, #128]	@ (80031bc <HAL_RCC_OscConfig+0x820>)
 800313a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800313e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003140:	f7fe f910 	bl	8001364 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003148:	f7fe f90c 	bl	8001364 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e02c      	b.n	80031b4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800315a:	4b18      	ldr	r3, [pc, #96]	@ (80031bc <HAL_RCC_OscConfig+0x820>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0f0      	beq.n	8003148 <HAL_RCC_OscConfig+0x7ac>
 8003166:	e024      	b.n	80031b2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	2b0c      	cmp	r3, #12
 800316c:	d01f      	beq.n	80031ae <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800316e:	4b13      	ldr	r3, [pc, #76]	@ (80031bc <HAL_RCC_OscConfig+0x820>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a12      	ldr	r2, [pc, #72]	@ (80031bc <HAL_RCC_OscConfig+0x820>)
 8003174:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003178:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317a:	f7fe f8f3 	bl	8001364 <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003182:	f7fe f8ef 	bl	8001364 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e00f      	b.n	80031b4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003194:	4b09      	ldr	r3, [pc, #36]	@ (80031bc <HAL_RCC_OscConfig+0x820>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1f0      	bne.n	8003182 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80031a0:	4b06      	ldr	r3, [pc, #24]	@ (80031bc <HAL_RCC_OscConfig+0x820>)
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	4905      	ldr	r1, [pc, #20]	@ (80031bc <HAL_RCC_OscConfig+0x820>)
 80031a6:	4b06      	ldr	r3, [pc, #24]	@ (80031c0 <HAL_RCC_OscConfig+0x824>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	60cb      	str	r3, [r1, #12]
 80031ac:	e001      	b.n	80031b2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3720      	adds	r7, #32
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40021000 	.word	0x40021000
 80031c0:	feeefffc 	.word	0xfeeefffc

080031c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e0e7      	b.n	80033a8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031d8:	4b75      	ldr	r3, [pc, #468]	@ (80033b0 <HAL_RCC_ClockConfig+0x1ec>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d910      	bls.n	8003208 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e6:	4b72      	ldr	r3, [pc, #456]	@ (80033b0 <HAL_RCC_ClockConfig+0x1ec>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f023 0207 	bic.w	r2, r3, #7
 80031ee:	4970      	ldr	r1, [pc, #448]	@ (80033b0 <HAL_RCC_ClockConfig+0x1ec>)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f6:	4b6e      	ldr	r3, [pc, #440]	@ (80033b0 <HAL_RCC_ClockConfig+0x1ec>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	d001      	beq.n	8003208 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0cf      	b.n	80033a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d010      	beq.n	8003236 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	4b66      	ldr	r3, [pc, #408]	@ (80033b4 <HAL_RCC_ClockConfig+0x1f0>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003220:	429a      	cmp	r2, r3
 8003222:	d908      	bls.n	8003236 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003224:	4b63      	ldr	r3, [pc, #396]	@ (80033b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	4960      	ldr	r1, [pc, #384]	@ (80033b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003232:	4313      	orrs	r3, r2
 8003234:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d04c      	beq.n	80032dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b03      	cmp	r3, #3
 8003248:	d107      	bne.n	800325a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800324a:	4b5a      	ldr	r3, [pc, #360]	@ (80033b4 <HAL_RCC_ClockConfig+0x1f0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d121      	bne.n	800329a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e0a6      	b.n	80033a8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d107      	bne.n	8003272 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003262:	4b54      	ldr	r3, [pc, #336]	@ (80033b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d115      	bne.n	800329a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e09a      	b.n	80033a8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d107      	bne.n	800328a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800327a:	4b4e      	ldr	r3, [pc, #312]	@ (80033b4 <HAL_RCC_ClockConfig+0x1f0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d109      	bne.n	800329a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e08e      	b.n	80033a8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800328a:	4b4a      	ldr	r3, [pc, #296]	@ (80033b4 <HAL_RCC_ClockConfig+0x1f0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e086      	b.n	80033a8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800329a:	4b46      	ldr	r3, [pc, #280]	@ (80033b4 <HAL_RCC_ClockConfig+0x1f0>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f023 0203 	bic.w	r2, r3, #3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	4943      	ldr	r1, [pc, #268]	@ (80033b4 <HAL_RCC_ClockConfig+0x1f0>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032ac:	f7fe f85a 	bl	8001364 <HAL_GetTick>
 80032b0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b2:	e00a      	b.n	80032ca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b4:	f7fe f856 	bl	8001364 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e06e      	b.n	80033a8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ca:	4b3a      	ldr	r3, [pc, #232]	@ (80033b4 <HAL_RCC_ClockConfig+0x1f0>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 020c 	and.w	r2, r3, #12
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	429a      	cmp	r2, r3
 80032da:	d1eb      	bne.n	80032b4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d010      	beq.n	800330a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	4b31      	ldr	r3, [pc, #196]	@ (80033b4 <HAL_RCC_ClockConfig+0x1f0>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d208      	bcs.n	800330a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032f8:	4b2e      	ldr	r3, [pc, #184]	@ (80033b4 <HAL_RCC_ClockConfig+0x1f0>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	492b      	ldr	r1, [pc, #172]	@ (80033b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003306:	4313      	orrs	r3, r2
 8003308:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800330a:	4b29      	ldr	r3, [pc, #164]	@ (80033b0 <HAL_RCC_ClockConfig+0x1ec>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	429a      	cmp	r2, r3
 8003316:	d210      	bcs.n	800333a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003318:	4b25      	ldr	r3, [pc, #148]	@ (80033b0 <HAL_RCC_ClockConfig+0x1ec>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f023 0207 	bic.w	r2, r3, #7
 8003320:	4923      	ldr	r1, [pc, #140]	@ (80033b0 <HAL_RCC_ClockConfig+0x1ec>)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	4313      	orrs	r3, r2
 8003326:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003328:	4b21      	ldr	r3, [pc, #132]	@ (80033b0 <HAL_RCC_ClockConfig+0x1ec>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	429a      	cmp	r2, r3
 8003334:	d001      	beq.n	800333a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e036      	b.n	80033a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0304 	and.w	r3, r3, #4
 8003342:	2b00      	cmp	r3, #0
 8003344:	d008      	beq.n	8003358 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003346:	4b1b      	ldr	r3, [pc, #108]	@ (80033b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	4918      	ldr	r1, [pc, #96]	@ (80033b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003354:	4313      	orrs	r3, r2
 8003356:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0308 	and.w	r3, r3, #8
 8003360:	2b00      	cmp	r3, #0
 8003362:	d009      	beq.n	8003378 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003364:	4b13      	ldr	r3, [pc, #76]	@ (80033b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	4910      	ldr	r1, [pc, #64]	@ (80033b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003374:	4313      	orrs	r3, r2
 8003376:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003378:	f000 f824 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 800337c:	4602      	mov	r2, r0
 800337e:	4b0d      	ldr	r3, [pc, #52]	@ (80033b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	091b      	lsrs	r3, r3, #4
 8003384:	f003 030f 	and.w	r3, r3, #15
 8003388:	490b      	ldr	r1, [pc, #44]	@ (80033b8 <HAL_RCC_ClockConfig+0x1f4>)
 800338a:	5ccb      	ldrb	r3, [r1, r3]
 800338c:	f003 031f 	and.w	r3, r3, #31
 8003390:	fa22 f303 	lsr.w	r3, r2, r3
 8003394:	4a09      	ldr	r2, [pc, #36]	@ (80033bc <HAL_RCC_ClockConfig+0x1f8>)
 8003396:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003398:	4b09      	ldr	r3, [pc, #36]	@ (80033c0 <HAL_RCC_ClockConfig+0x1fc>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f7fd ff91 	bl	80012c4 <HAL_InitTick>
 80033a2:	4603      	mov	r3, r0
 80033a4:	72fb      	strb	r3, [r7, #11]

  return status;
 80033a6:	7afb      	ldrb	r3, [r7, #11]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40022000 	.word	0x40022000
 80033b4:	40021000 	.word	0x40021000
 80033b8:	0800613c 	.word	0x0800613c
 80033bc:	20000000 	.word	0x20000000
 80033c0:	20000004 	.word	0x20000004

080033c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b089      	sub	sp, #36	@ 0x24
 80033c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	61fb      	str	r3, [r7, #28]
 80033ce:	2300      	movs	r3, #0
 80033d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033d2:	4b3e      	ldr	r3, [pc, #248]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x108>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
 80033da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033dc:	4b3b      	ldr	r3, [pc, #236]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x108>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f003 0303 	and.w	r3, r3, #3
 80033e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d005      	beq.n	80033f8 <HAL_RCC_GetSysClockFreq+0x34>
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	2b0c      	cmp	r3, #12
 80033f0:	d121      	bne.n	8003436 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d11e      	bne.n	8003436 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033f8:	4b34      	ldr	r3, [pc, #208]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x108>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	2b00      	cmp	r3, #0
 8003402:	d107      	bne.n	8003414 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003404:	4b31      	ldr	r3, [pc, #196]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003406:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800340a:	0a1b      	lsrs	r3, r3, #8
 800340c:	f003 030f 	and.w	r3, r3, #15
 8003410:	61fb      	str	r3, [r7, #28]
 8003412:	e005      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003414:	4b2d      	ldr	r3, [pc, #180]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	091b      	lsrs	r3, r3, #4
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003420:	4a2b      	ldr	r2, [pc, #172]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003428:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10d      	bne.n	800344c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003434:	e00a      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	2b04      	cmp	r3, #4
 800343a:	d102      	bne.n	8003442 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800343c:	4b25      	ldr	r3, [pc, #148]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800343e:	61bb      	str	r3, [r7, #24]
 8003440:	e004      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	2b08      	cmp	r3, #8
 8003446:	d101      	bne.n	800344c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003448:	4b23      	ldr	r3, [pc, #140]	@ (80034d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800344a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	2b0c      	cmp	r3, #12
 8003450:	d134      	bne.n	80034bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003452:	4b1e      	ldr	r3, [pc, #120]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2b02      	cmp	r3, #2
 8003460:	d003      	beq.n	800346a <HAL_RCC_GetSysClockFreq+0xa6>
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	2b03      	cmp	r3, #3
 8003466:	d003      	beq.n	8003470 <HAL_RCC_GetSysClockFreq+0xac>
 8003468:	e005      	b.n	8003476 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800346a:	4b1a      	ldr	r3, [pc, #104]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800346c:	617b      	str	r3, [r7, #20]
      break;
 800346e:	e005      	b.n	800347c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003470:	4b19      	ldr	r3, [pc, #100]	@ (80034d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003472:	617b      	str	r3, [r7, #20]
      break;
 8003474:	e002      	b.n	800347c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	617b      	str	r3, [r7, #20]
      break;
 800347a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800347c:	4b13      	ldr	r3, [pc, #76]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x108>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	091b      	lsrs	r3, r3, #4
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	3301      	adds	r3, #1
 8003488:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800348a:	4b10      	ldr	r3, [pc, #64]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x108>)
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	0a1b      	lsrs	r3, r3, #8
 8003490:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	fb03 f202 	mul.w	r2, r3, r2
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034a2:	4b0a      	ldr	r3, [pc, #40]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x108>)
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	0e5b      	lsrs	r3, r3, #25
 80034a8:	f003 0303 	and.w	r3, r3, #3
 80034ac:	3301      	adds	r3, #1
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80034bc:	69bb      	ldr	r3, [r7, #24]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3724      	adds	r7, #36	@ 0x24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	40021000 	.word	0x40021000
 80034d0:	08006154 	.word	0x08006154
 80034d4:	00f42400 	.word	0x00f42400
 80034d8:	007a1200 	.word	0x007a1200

080034dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034e0:	4b03      	ldr	r3, [pc, #12]	@ (80034f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034e2:	681b      	ldr	r3, [r3, #0]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	20000000 	.word	0x20000000

080034f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034f8:	f7ff fff0 	bl	80034dc <HAL_RCC_GetHCLKFreq>
 80034fc:	4602      	mov	r2, r0
 80034fe:	4b06      	ldr	r3, [pc, #24]	@ (8003518 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	0a1b      	lsrs	r3, r3, #8
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	4904      	ldr	r1, [pc, #16]	@ (800351c <HAL_RCC_GetPCLK1Freq+0x28>)
 800350a:	5ccb      	ldrb	r3, [r1, r3]
 800350c:	f003 031f 	and.w	r3, r3, #31
 8003510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003514:	4618      	mov	r0, r3
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40021000 	.word	0x40021000
 800351c:	0800614c 	.word	0x0800614c

08003520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003524:	f7ff ffda 	bl	80034dc <HAL_RCC_GetHCLKFreq>
 8003528:	4602      	mov	r2, r0
 800352a:	4b06      	ldr	r3, [pc, #24]	@ (8003544 <HAL_RCC_GetPCLK2Freq+0x24>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	0adb      	lsrs	r3, r3, #11
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	4904      	ldr	r1, [pc, #16]	@ (8003548 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003536:	5ccb      	ldrb	r3, [r1, r3]
 8003538:	f003 031f 	and.w	r3, r3, #31
 800353c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003540:	4618      	mov	r0, r3
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40021000 	.word	0x40021000
 8003548:	0800614c 	.word	0x0800614c

0800354c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003554:	2300      	movs	r3, #0
 8003556:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003558:	4b2a      	ldr	r3, [pc, #168]	@ (8003604 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800355a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800355c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003564:	f7ff f9b6 	bl	80028d4 <HAL_PWREx_GetVoltageRange>
 8003568:	6178      	str	r0, [r7, #20]
 800356a:	e014      	b.n	8003596 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800356c:	4b25      	ldr	r3, [pc, #148]	@ (8003604 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800356e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003570:	4a24      	ldr	r2, [pc, #144]	@ (8003604 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003572:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003576:	6593      	str	r3, [r2, #88]	@ 0x58
 8003578:	4b22      	ldr	r3, [pc, #136]	@ (8003604 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800357a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800357c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003584:	f7ff f9a6 	bl	80028d4 <HAL_PWREx_GetVoltageRange>
 8003588:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800358a:	4b1e      	ldr	r3, [pc, #120]	@ (8003604 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800358c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800358e:	4a1d      	ldr	r2, [pc, #116]	@ (8003604 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003590:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003594:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800359c:	d10b      	bne.n	80035b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b80      	cmp	r3, #128	@ 0x80
 80035a2:	d919      	bls.n	80035d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2ba0      	cmp	r3, #160	@ 0xa0
 80035a8:	d902      	bls.n	80035b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035aa:	2302      	movs	r3, #2
 80035ac:	613b      	str	r3, [r7, #16]
 80035ae:	e013      	b.n	80035d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035b0:	2301      	movs	r3, #1
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	e010      	b.n	80035d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b80      	cmp	r3, #128	@ 0x80
 80035ba:	d902      	bls.n	80035c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80035bc:	2303      	movs	r3, #3
 80035be:	613b      	str	r3, [r7, #16]
 80035c0:	e00a      	b.n	80035d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b80      	cmp	r3, #128	@ 0x80
 80035c6:	d102      	bne.n	80035ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035c8:	2302      	movs	r3, #2
 80035ca:	613b      	str	r3, [r7, #16]
 80035cc:	e004      	b.n	80035d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b70      	cmp	r3, #112	@ 0x70
 80035d2:	d101      	bne.n	80035d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035d4:	2301      	movs	r3, #1
 80035d6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003608 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f023 0207 	bic.w	r2, r3, #7
 80035e0:	4909      	ldr	r1, [pc, #36]	@ (8003608 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035e8:	4b07      	ldr	r3, [pc, #28]	@ (8003608 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d001      	beq.n	80035fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e000      	b.n	80035fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40021000 	.word	0x40021000
 8003608:	40022000 	.word	0x40022000

0800360c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003614:	2300      	movs	r3, #0
 8003616:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003618:	2300      	movs	r3, #0
 800361a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003624:	2b00      	cmp	r3, #0
 8003626:	d031      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800362c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003630:	d01a      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003632:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003636:	d814      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003638:	2b00      	cmp	r3, #0
 800363a:	d009      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800363c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003640:	d10f      	bne.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003642:	4b5d      	ldr	r3, [pc, #372]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	4a5c      	ldr	r2, [pc, #368]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003648:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800364c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800364e:	e00c      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3304      	adds	r3, #4
 8003654:	2100      	movs	r1, #0
 8003656:	4618      	mov	r0, r3
 8003658:	f000 f9ce 	bl	80039f8 <RCCEx_PLLSAI1_Config>
 800365c:	4603      	mov	r3, r0
 800365e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003660:	e003      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	74fb      	strb	r3, [r7, #19]
      break;
 8003666:	e000      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003668:	bf00      	nop
    }

    if(ret == HAL_OK)
 800366a:	7cfb      	ldrb	r3, [r7, #19]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10b      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003670:	4b51      	ldr	r3, [pc, #324]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003676:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800367e:	494e      	ldr	r1, [pc, #312]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003680:	4313      	orrs	r3, r2
 8003682:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003686:	e001      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003688:	7cfb      	ldrb	r3, [r7, #19]
 800368a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 809e 	beq.w	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800369a:	2300      	movs	r3, #0
 800369c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800369e:	4b46      	ldr	r3, [pc, #280]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80036ae:	2300      	movs	r3, #0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00d      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036b4:	4b40      	ldr	r3, [pc, #256]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036b8:	4a3f      	ldr	r2, [pc, #252]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036be:	6593      	str	r3, [r2, #88]	@ 0x58
 80036c0:	4b3d      	ldr	r3, [pc, #244]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036c8:	60bb      	str	r3, [r7, #8]
 80036ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036cc:	2301      	movs	r3, #1
 80036ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036d0:	4b3a      	ldr	r3, [pc, #232]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a39      	ldr	r2, [pc, #228]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80036d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036dc:	f7fd fe42 	bl	8001364 <HAL_GetTick>
 80036e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036e2:	e009      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e4:	f7fd fe3e 	bl	8001364 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d902      	bls.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	74fb      	strb	r3, [r7, #19]
        break;
 80036f6:	e005      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036f8:	4b30      	ldr	r3, [pc, #192]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0ef      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003704:	7cfb      	ldrb	r3, [r7, #19]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d15a      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800370a:	4b2b      	ldr	r3, [pc, #172]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800370c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003710:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003714:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d01e      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	429a      	cmp	r2, r3
 8003724:	d019      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003726:	4b24      	ldr	r3, [pc, #144]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800372c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003730:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003732:	4b21      	ldr	r3, [pc, #132]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003738:	4a1f      	ldr	r2, [pc, #124]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800373a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800373e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003742:	4b1d      	ldr	r3, [pc, #116]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003748:	4a1b      	ldr	r2, [pc, #108]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800374a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800374e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003752:	4a19      	ldr	r2, [pc, #100]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b00      	cmp	r3, #0
 8003762:	d016      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003764:	f7fd fdfe 	bl	8001364 <HAL_GetTick>
 8003768:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800376a:	e00b      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800376c:	f7fd fdfa 	bl	8001364 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800377a:	4293      	cmp	r3, r2
 800377c:	d902      	bls.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	74fb      	strb	r3, [r7, #19]
            break;
 8003782:	e006      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003784:	4b0c      	ldr	r3, [pc, #48]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0ec      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003792:	7cfb      	ldrb	r3, [r7, #19]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10b      	bne.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003798:	4b07      	ldr	r3, [pc, #28]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800379a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800379e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037a6:	4904      	ldr	r1, [pc, #16]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80037ae:	e009      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037b0:	7cfb      	ldrb	r3, [r7, #19]
 80037b2:	74bb      	strb	r3, [r7, #18]
 80037b4:	e006      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80037b6:	bf00      	nop
 80037b8:	40021000 	.word	0x40021000
 80037bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c0:	7cfb      	ldrb	r3, [r7, #19]
 80037c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037c4:	7c7b      	ldrb	r3, [r7, #17]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d105      	bne.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ca:	4b8a      	ldr	r3, [pc, #552]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ce:	4a89      	ldr	r2, [pc, #548]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037d4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037e2:	4b84      	ldr	r3, [pc, #528]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e8:	f023 0203 	bic.w	r2, r3, #3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	4980      	ldr	r1, [pc, #512]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003804:	4b7b      	ldr	r3, [pc, #492]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800380a:	f023 020c 	bic.w	r2, r3, #12
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003812:	4978      	ldr	r1, [pc, #480]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003826:	4b73      	ldr	r3, [pc, #460]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800382c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003834:	496f      	ldr	r1, [pc, #444]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00a      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003848:	4b6a      	ldr	r3, [pc, #424]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800384a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800384e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003856:	4967      	ldr	r1, [pc, #412]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003858:	4313      	orrs	r3, r2
 800385a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800386a:	4b62      	ldr	r3, [pc, #392]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800386c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003870:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003878:	495e      	ldr	r1, [pc, #376]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800387a:	4313      	orrs	r3, r2
 800387c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800388c:	4b59      	ldr	r3, [pc, #356]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800388e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003892:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389a:	4956      	ldr	r1, [pc, #344]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038ae:	4b51      	ldr	r3, [pc, #324]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038bc:	494d      	ldr	r1, [pc, #308]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d028      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038d0:	4b48      	ldr	r3, [pc, #288]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038de:	4945      	ldr	r1, [pc, #276]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038ee:	d106      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038f0:	4b40      	ldr	r3, [pc, #256]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	4a3f      	ldr	r2, [pc, #252]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038fa:	60d3      	str	r3, [r2, #12]
 80038fc:	e011      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003902:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003906:	d10c      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3304      	adds	r3, #4
 800390c:	2101      	movs	r1, #1
 800390e:	4618      	mov	r0, r3
 8003910:	f000 f872 	bl	80039f8 <RCCEx_PLLSAI1_Config>
 8003914:	4603      	mov	r3, r0
 8003916:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003918:	7cfb      	ldrb	r3, [r7, #19]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800391e:	7cfb      	ldrb	r3, [r7, #19]
 8003920:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d028      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800392e:	4b31      	ldr	r3, [pc, #196]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003934:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800393c:	492d      	ldr	r1, [pc, #180]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800393e:	4313      	orrs	r3, r2
 8003940:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003948:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800394c:	d106      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800394e:	4b29      	ldr	r3, [pc, #164]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	4a28      	ldr	r2, [pc, #160]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003954:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003958:	60d3      	str	r3, [r2, #12]
 800395a:	e011      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003960:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003964:	d10c      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3304      	adds	r3, #4
 800396a:	2101      	movs	r1, #1
 800396c:	4618      	mov	r0, r3
 800396e:	f000 f843 	bl	80039f8 <RCCEx_PLLSAI1_Config>
 8003972:	4603      	mov	r3, r0
 8003974:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003976:	7cfb      	ldrb	r3, [r7, #19]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800397c:	7cfb      	ldrb	r3, [r7, #19]
 800397e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d01c      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800398c:	4b19      	ldr	r3, [pc, #100]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800398e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003992:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800399a:	4916      	ldr	r1, [pc, #88]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800399c:	4313      	orrs	r3, r2
 800399e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039aa:	d10c      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3304      	adds	r3, #4
 80039b0:	2102      	movs	r1, #2
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 f820 	bl	80039f8 <RCCEx_PLLSAI1_Config>
 80039b8:	4603      	mov	r3, r0
 80039ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039bc:	7cfb      	ldrb	r3, [r7, #19]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80039c2:	7cfb      	ldrb	r3, [r7, #19]
 80039c4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00a      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039d2:	4b08      	ldr	r3, [pc, #32]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039e0:	4904      	ldr	r1, [pc, #16]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80039e8:	7cbb      	ldrb	r3, [r7, #18]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3718      	adds	r7, #24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	40021000 	.word	0x40021000

080039f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a06:	4b74      	ldr	r3, [pc, #464]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d018      	beq.n	8003a44 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a12:	4b71      	ldr	r3, [pc, #452]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f003 0203 	and.w	r2, r3, #3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d10d      	bne.n	8003a3e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
       ||
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d009      	beq.n	8003a3e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a2a:	4b6b      	ldr	r3, [pc, #428]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	091b      	lsrs	r3, r3, #4
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
       ||
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d047      	beq.n	8003ace <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	73fb      	strb	r3, [r7, #15]
 8003a42:	e044      	b.n	8003ace <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b03      	cmp	r3, #3
 8003a4a:	d018      	beq.n	8003a7e <RCCEx_PLLSAI1_Config+0x86>
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d825      	bhi.n	8003a9c <RCCEx_PLLSAI1_Config+0xa4>
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d002      	beq.n	8003a5a <RCCEx_PLLSAI1_Config+0x62>
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d009      	beq.n	8003a6c <RCCEx_PLLSAI1_Config+0x74>
 8003a58:	e020      	b.n	8003a9c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a5a:	4b5f      	ldr	r3, [pc, #380]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d11d      	bne.n	8003aa2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a6a:	e01a      	b.n	8003aa2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a6c:	4b5a      	ldr	r3, [pc, #360]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d116      	bne.n	8003aa6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a7c:	e013      	b.n	8003aa6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a7e:	4b56      	ldr	r3, [pc, #344]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10f      	bne.n	8003aaa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a8a:	4b53      	ldr	r3, [pc, #332]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d109      	bne.n	8003aaa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a9a:	e006      	b.n	8003aaa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003aa0:	e004      	b.n	8003aac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003aa2:	bf00      	nop
 8003aa4:	e002      	b.n	8003aac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003aa6:	bf00      	nop
 8003aa8:	e000      	b.n	8003aac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003aaa:	bf00      	nop
    }

    if(status == HAL_OK)
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10d      	bne.n	8003ace <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ab2:	4b49      	ldr	r3, [pc, #292]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6819      	ldr	r1, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	430b      	orrs	r3, r1
 8003ac8:	4943      	ldr	r1, [pc, #268]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d17c      	bne.n	8003bce <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ad4:	4b40      	ldr	r3, [pc, #256]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a3f      	ldr	r2, [pc, #252]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ada:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003ade:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ae0:	f7fd fc40 	bl	8001364 <HAL_GetTick>
 8003ae4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ae6:	e009      	b.n	8003afc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ae8:	f7fd fc3c 	bl	8001364 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d902      	bls.n	8003afc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	73fb      	strb	r3, [r7, #15]
        break;
 8003afa:	e005      	b.n	8003b08 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003afc:	4b36      	ldr	r3, [pc, #216]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1ef      	bne.n	8003ae8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d15f      	bne.n	8003bce <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d110      	bne.n	8003b36 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b14:	4b30      	ldr	r3, [pc, #192]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003b1c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	6892      	ldr	r2, [r2, #8]
 8003b24:	0211      	lsls	r1, r2, #8
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	68d2      	ldr	r2, [r2, #12]
 8003b2a:	06d2      	lsls	r2, r2, #27
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	492a      	ldr	r1, [pc, #168]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	610b      	str	r3, [r1, #16]
 8003b34:	e027      	b.n	8003b86 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d112      	bne.n	8003b62 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b3c:	4b26      	ldr	r3, [pc, #152]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003b44:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6892      	ldr	r2, [r2, #8]
 8003b4c:	0211      	lsls	r1, r2, #8
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6912      	ldr	r2, [r2, #16]
 8003b52:	0852      	lsrs	r2, r2, #1
 8003b54:	3a01      	subs	r2, #1
 8003b56:	0552      	lsls	r2, r2, #21
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	491f      	ldr	r1, [pc, #124]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	610b      	str	r3, [r1, #16]
 8003b60:	e011      	b.n	8003b86 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b62:	4b1d      	ldr	r3, [pc, #116]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003b6a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6892      	ldr	r2, [r2, #8]
 8003b72:	0211      	lsls	r1, r2, #8
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6952      	ldr	r2, [r2, #20]
 8003b78:	0852      	lsrs	r2, r2, #1
 8003b7a:	3a01      	subs	r2, #1
 8003b7c:	0652      	lsls	r2, r2, #25
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	4915      	ldr	r1, [pc, #84]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b86:	4b14      	ldr	r3, [pc, #80]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a13      	ldr	r2, [pc, #76]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b8c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b90:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b92:	f7fd fbe7 	bl	8001364 <HAL_GetTick>
 8003b96:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b98:	e009      	b.n	8003bae <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b9a:	f7fd fbe3 	bl	8001364 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d902      	bls.n	8003bae <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	73fb      	strb	r3, [r7, #15]
          break;
 8003bac:	e005      	b.n	8003bba <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bae:	4b0a      	ldr	r3, [pc, #40]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0ef      	beq.n	8003b9a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d106      	bne.n	8003bce <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003bc0:	4b05      	ldr	r3, [pc, #20]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bc2:	691a      	ldr	r2, [r3, #16]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	4903      	ldr	r1, [pc, #12]	@ (8003bd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40021000 	.word	0x40021000

08003bdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e049      	b.n	8003c82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fd f966 	bl	8000ed4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	3304      	adds	r3, #4
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	f000 fbae 	bl	800437c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b082      	sub	sp, #8
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e049      	b.n	8003d30 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d106      	bne.n	8003cb6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 f841 	bl	8003d38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2202      	movs	r2, #2
 8003cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4610      	mov	r0, r2
 8003cca:	f000 fb57 	bl	800437c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d020      	beq.n	8003db0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d01b      	beq.n	8003db0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f06f 0202 	mvn.w	r2, #2
 8003d80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	f003 0303 	and.w	r3, r3, #3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 fad1 	bl	800433e <HAL_TIM_IC_CaptureCallback>
 8003d9c:	e005      	b.n	8003daa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fac3 	bl	800432a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 fad4 	bl	8004352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d020      	beq.n	8003dfc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d01b      	beq.n	8003dfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f06f 0204 	mvn.w	r2, #4
 8003dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2202      	movs	r2, #2
 8003dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 faab 	bl	800433e <HAL_TIM_IC_CaptureCallback>
 8003de8:	e005      	b.n	8003df6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 fa9d 	bl	800432a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 faae 	bl	8004352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d020      	beq.n	8003e48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d01b      	beq.n	8003e48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f06f 0208 	mvn.w	r2, #8
 8003e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2204      	movs	r2, #4
 8003e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 fa85 	bl	800433e <HAL_TIM_IC_CaptureCallback>
 8003e34:	e005      	b.n	8003e42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 fa77 	bl	800432a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 fa88 	bl	8004352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	f003 0310 	and.w	r3, r3, #16
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d020      	beq.n	8003e94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f003 0310 	and.w	r3, r3, #16
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d01b      	beq.n	8003e94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f06f 0210 	mvn.w	r2, #16
 8003e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2208      	movs	r2, #8
 8003e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 fa5f 	bl	800433e <HAL_TIM_IC_CaptureCallback>
 8003e80:	e005      	b.n	8003e8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 fa51 	bl	800432a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 fa62 	bl	8004352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00c      	beq.n	8003eb8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d007      	beq.n	8003eb8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f06f 0201 	mvn.w	r2, #1
 8003eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fa2f 	bl	8004316 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d104      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00c      	beq.n	8003ee6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d007      	beq.n	8003ee6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003ede:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 febb 	bl	8004c5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00c      	beq.n	8003f0a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d007      	beq.n	8003f0a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 feb3 	bl	8004c70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00c      	beq.n	8003f2e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d007      	beq.n	8003f2e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 fa1c 	bl	8004366 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	f003 0320 	and.w	r3, r3, #32
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00c      	beq.n	8003f52 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f003 0320 	and.w	r3, r3, #32
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d007      	beq.n	8003f52 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f06f 0220 	mvn.w	r2, #32
 8003f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 fe7b 	bl	8004c48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f52:	bf00      	nop
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
	...

08003f5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d101      	bne.n	8003f7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f76:	2302      	movs	r3, #2
 8003f78:	e0ff      	b.n	800417a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b14      	cmp	r3, #20
 8003f86:	f200 80f0 	bhi.w	800416a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f90:	08003fe5 	.word	0x08003fe5
 8003f94:	0800416b 	.word	0x0800416b
 8003f98:	0800416b 	.word	0x0800416b
 8003f9c:	0800416b 	.word	0x0800416b
 8003fa0:	08004025 	.word	0x08004025
 8003fa4:	0800416b 	.word	0x0800416b
 8003fa8:	0800416b 	.word	0x0800416b
 8003fac:	0800416b 	.word	0x0800416b
 8003fb0:	08004067 	.word	0x08004067
 8003fb4:	0800416b 	.word	0x0800416b
 8003fb8:	0800416b 	.word	0x0800416b
 8003fbc:	0800416b 	.word	0x0800416b
 8003fc0:	080040a7 	.word	0x080040a7
 8003fc4:	0800416b 	.word	0x0800416b
 8003fc8:	0800416b 	.word	0x0800416b
 8003fcc:	0800416b 	.word	0x0800416b
 8003fd0:	080040e9 	.word	0x080040e9
 8003fd4:	0800416b 	.word	0x0800416b
 8003fd8:	0800416b 	.word	0x0800416b
 8003fdc:	0800416b 	.word	0x0800416b
 8003fe0:	08004129 	.word	0x08004129
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68b9      	ldr	r1, [r7, #8]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fa36 	bl	800445c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699a      	ldr	r2, [r3, #24]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0208 	orr.w	r2, r2, #8
 8003ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699a      	ldr	r2, [r3, #24]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0204 	bic.w	r2, r2, #4
 800400e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6999      	ldr	r1, [r3, #24]
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	691a      	ldr	r2, [r3, #16]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	619a      	str	r2, [r3, #24]
      break;
 8004022:	e0a5      	b.n	8004170 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68b9      	ldr	r1, [r7, #8]
 800402a:	4618      	mov	r0, r3
 800402c:	f000 fa92 	bl	8004554 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699a      	ldr	r2, [r3, #24]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800403e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699a      	ldr	r2, [r3, #24]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800404e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6999      	ldr	r1, [r3, #24]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	021a      	lsls	r2, r3, #8
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	619a      	str	r2, [r3, #24]
      break;
 8004064:	e084      	b.n	8004170 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68b9      	ldr	r1, [r7, #8]
 800406c:	4618      	mov	r0, r3
 800406e:	f000 faeb 	bl	8004648 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	69da      	ldr	r2, [r3, #28]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f042 0208 	orr.w	r2, r2, #8
 8004080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	69da      	ldr	r2, [r3, #28]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0204 	bic.w	r2, r2, #4
 8004090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	69d9      	ldr	r1, [r3, #28]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	691a      	ldr	r2, [r3, #16]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	61da      	str	r2, [r3, #28]
      break;
 80040a4:	e064      	b.n	8004170 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68b9      	ldr	r1, [r7, #8]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fb43 	bl	8004738 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	69da      	ldr	r2, [r3, #28]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	69da      	ldr	r2, [r3, #28]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	69d9      	ldr	r1, [r3, #28]
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	021a      	lsls	r2, r3, #8
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	61da      	str	r2, [r3, #28]
      break;
 80040e6:	e043      	b.n	8004170 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68b9      	ldr	r1, [r7, #8]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 fb80 	bl	80047f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0208 	orr.w	r2, r2, #8
 8004102:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0204 	bic.w	r2, r2, #4
 8004112:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	691a      	ldr	r2, [r3, #16]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004126:	e023      	b.n	8004170 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68b9      	ldr	r1, [r7, #8]
 800412e:	4618      	mov	r0, r3
 8004130:	f000 fbb8 	bl	80048a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004142:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004152:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	021a      	lsls	r2, r3, #8
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004168:	e002      	b.n	8004170 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	75fb      	strb	r3, [r7, #23]
      break;
 800416e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004178:	7dfb      	ldrb	r3, [r7, #23]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3718      	adds	r7, #24
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop

08004184 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004198:	2b01      	cmp	r3, #1
 800419a:	d101      	bne.n	80041a0 <HAL_TIM_ConfigClockSource+0x1c>
 800419c:	2302      	movs	r3, #2
 800419e:	e0b6      	b.n	800430e <HAL_TIM_ConfigClockSource+0x18a>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2202      	movs	r2, #2
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80041c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041dc:	d03e      	beq.n	800425c <HAL_TIM_ConfigClockSource+0xd8>
 80041de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041e2:	f200 8087 	bhi.w	80042f4 <HAL_TIM_ConfigClockSource+0x170>
 80041e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041ea:	f000 8086 	beq.w	80042fa <HAL_TIM_ConfigClockSource+0x176>
 80041ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041f2:	d87f      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x170>
 80041f4:	2b70      	cmp	r3, #112	@ 0x70
 80041f6:	d01a      	beq.n	800422e <HAL_TIM_ConfigClockSource+0xaa>
 80041f8:	2b70      	cmp	r3, #112	@ 0x70
 80041fa:	d87b      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x170>
 80041fc:	2b60      	cmp	r3, #96	@ 0x60
 80041fe:	d050      	beq.n	80042a2 <HAL_TIM_ConfigClockSource+0x11e>
 8004200:	2b60      	cmp	r3, #96	@ 0x60
 8004202:	d877      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x170>
 8004204:	2b50      	cmp	r3, #80	@ 0x50
 8004206:	d03c      	beq.n	8004282 <HAL_TIM_ConfigClockSource+0xfe>
 8004208:	2b50      	cmp	r3, #80	@ 0x50
 800420a:	d873      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x170>
 800420c:	2b40      	cmp	r3, #64	@ 0x40
 800420e:	d058      	beq.n	80042c2 <HAL_TIM_ConfigClockSource+0x13e>
 8004210:	2b40      	cmp	r3, #64	@ 0x40
 8004212:	d86f      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x170>
 8004214:	2b30      	cmp	r3, #48	@ 0x30
 8004216:	d064      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x15e>
 8004218:	2b30      	cmp	r3, #48	@ 0x30
 800421a:	d86b      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x170>
 800421c:	2b20      	cmp	r3, #32
 800421e:	d060      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x15e>
 8004220:	2b20      	cmp	r3, #32
 8004222:	d867      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x170>
 8004224:	2b00      	cmp	r3, #0
 8004226:	d05c      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x15e>
 8004228:	2b10      	cmp	r3, #16
 800422a:	d05a      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x15e>
 800422c:	e062      	b.n	80042f4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800423e:	f000 fc05 	bl	8004a4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004250:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	609a      	str	r2, [r3, #8]
      break;
 800425a:	e04f      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800426c:	f000 fbee 	bl	8004a4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800427e:	609a      	str	r2, [r3, #8]
      break;
 8004280:	e03c      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800428e:	461a      	mov	r2, r3
 8004290:	f000 fb62 	bl	8004958 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2150      	movs	r1, #80	@ 0x50
 800429a:	4618      	mov	r0, r3
 800429c:	f000 fbbb 	bl	8004a16 <TIM_ITRx_SetConfig>
      break;
 80042a0:	e02c      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042ae:	461a      	mov	r2, r3
 80042b0:	f000 fb81 	bl	80049b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2160      	movs	r1, #96	@ 0x60
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 fbab 	bl	8004a16 <TIM_ITRx_SetConfig>
      break;
 80042c0:	e01c      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ce:	461a      	mov	r2, r3
 80042d0:	f000 fb42 	bl	8004958 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2140      	movs	r1, #64	@ 0x40
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 fb9b 	bl	8004a16 <TIM_ITRx_SetConfig>
      break;
 80042e0:	e00c      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4619      	mov	r1, r3
 80042ec:	4610      	mov	r0, r2
 80042ee:	f000 fb92 	bl	8004a16 <TIM_ITRx_SetConfig>
      break;
 80042f2:	e003      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	73fb      	strb	r3, [r7, #15]
      break;
 80042f8:	e000      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80042fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800430c:	7bfb      	ldrb	r3, [r7, #15]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
	...

0800437c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a30      	ldr	r2, [pc, #192]	@ (8004450 <TIM_Base_SetConfig+0xd4>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d003      	beq.n	800439c <TIM_Base_SetConfig+0x20>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800439a:	d108      	bne.n	80043ae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a27      	ldr	r2, [pc, #156]	@ (8004450 <TIM_Base_SetConfig+0xd4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d00b      	beq.n	80043ce <TIM_Base_SetConfig+0x52>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043bc:	d007      	beq.n	80043ce <TIM_Base_SetConfig+0x52>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a24      	ldr	r2, [pc, #144]	@ (8004454 <TIM_Base_SetConfig+0xd8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d003      	beq.n	80043ce <TIM_Base_SetConfig+0x52>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a23      	ldr	r2, [pc, #140]	@ (8004458 <TIM_Base_SetConfig+0xdc>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d108      	bne.n	80043e0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	4313      	orrs	r3, r2
 80043de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a12      	ldr	r2, [pc, #72]	@ (8004450 <TIM_Base_SetConfig+0xd4>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d007      	beq.n	800441c <TIM_Base_SetConfig+0xa0>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a11      	ldr	r2, [pc, #68]	@ (8004454 <TIM_Base_SetConfig+0xd8>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d003      	beq.n	800441c <TIM_Base_SetConfig+0xa0>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a10      	ldr	r2, [pc, #64]	@ (8004458 <TIM_Base_SetConfig+0xdc>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d103      	bne.n	8004424 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	691a      	ldr	r2, [r3, #16]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b01      	cmp	r3, #1
 8004434:	d105      	bne.n	8004442 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	f023 0201 	bic.w	r2, r3, #1
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	611a      	str	r2, [r3, #16]
  }
}
 8004442:	bf00      	nop
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	40012c00 	.word	0x40012c00
 8004454:	40014000 	.word	0x40014000
 8004458:	40014400 	.word	0x40014400

0800445c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800445c:	b480      	push	{r7}
 800445e:	b087      	sub	sp, #28
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	f023 0201 	bic.w	r2, r3, #1
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800448a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800448e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f023 0303 	bic.w	r3, r3, #3
 8004496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	4313      	orrs	r3, r2
 80044a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f023 0302 	bic.w	r3, r3, #2
 80044a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a24      	ldr	r2, [pc, #144]	@ (8004548 <TIM_OC1_SetConfig+0xec>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d007      	beq.n	80044cc <TIM_OC1_SetConfig+0x70>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a23      	ldr	r2, [pc, #140]	@ (800454c <TIM_OC1_SetConfig+0xf0>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d003      	beq.n	80044cc <TIM_OC1_SetConfig+0x70>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a22      	ldr	r2, [pc, #136]	@ (8004550 <TIM_OC1_SetConfig+0xf4>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d10c      	bne.n	80044e6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	f023 0308 	bic.w	r3, r3, #8
 80044d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	4313      	orrs	r3, r2
 80044dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f023 0304 	bic.w	r3, r3, #4
 80044e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a17      	ldr	r2, [pc, #92]	@ (8004548 <TIM_OC1_SetConfig+0xec>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d007      	beq.n	80044fe <TIM_OC1_SetConfig+0xa2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a16      	ldr	r2, [pc, #88]	@ (800454c <TIM_OC1_SetConfig+0xf0>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d003      	beq.n	80044fe <TIM_OC1_SetConfig+0xa2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a15      	ldr	r2, [pc, #84]	@ (8004550 <TIM_OC1_SetConfig+0xf4>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d111      	bne.n	8004522 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004504:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800450c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	4313      	orrs	r3, r2
 8004516:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	4313      	orrs	r3, r2
 8004520:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	621a      	str	r2, [r3, #32]
}
 800453c:	bf00      	nop
 800453e:	371c      	adds	r7, #28
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	40012c00 	.word	0x40012c00
 800454c:	40014000 	.word	0x40014000
 8004550:	40014400 	.word	0x40014400

08004554 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	f023 0210 	bic.w	r2, r3, #16
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004582:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800458e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	021b      	lsls	r3, r3, #8
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	4313      	orrs	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f023 0320 	bic.w	r3, r3, #32
 80045a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a22      	ldr	r2, [pc, #136]	@ (800463c <TIM_OC2_SetConfig+0xe8>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d10d      	bne.n	80045d4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a19      	ldr	r2, [pc, #100]	@ (800463c <TIM_OC2_SetConfig+0xe8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d007      	beq.n	80045ec <TIM_OC2_SetConfig+0x98>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a18      	ldr	r2, [pc, #96]	@ (8004640 <TIM_OC2_SetConfig+0xec>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d003      	beq.n	80045ec <TIM_OC2_SetConfig+0x98>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a17      	ldr	r2, [pc, #92]	@ (8004644 <TIM_OC2_SetConfig+0xf0>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d113      	bne.n	8004614 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80045f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80045fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	4313      	orrs	r3, r2
 8004606:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	4313      	orrs	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	621a      	str	r2, [r3, #32]
}
 800462e:	bf00      	nop
 8004630:	371c      	adds	r7, #28
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40012c00 	.word	0x40012c00
 8004640:	40014000 	.word	0x40014000
 8004644:	40014400 	.word	0x40014400

08004648 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800467a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f023 0303 	bic.w	r3, r3, #3
 8004682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	4313      	orrs	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	021b      	lsls	r3, r3, #8
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	4313      	orrs	r3, r2
 80046a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a21      	ldr	r2, [pc, #132]	@ (800472c <TIM_OC3_SetConfig+0xe4>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d10d      	bne.n	80046c6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80046b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	021b      	lsls	r3, r3, #8
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80046c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a18      	ldr	r2, [pc, #96]	@ (800472c <TIM_OC3_SetConfig+0xe4>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d007      	beq.n	80046de <TIM_OC3_SetConfig+0x96>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a17      	ldr	r2, [pc, #92]	@ (8004730 <TIM_OC3_SetConfig+0xe8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d003      	beq.n	80046de <TIM_OC3_SetConfig+0x96>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a16      	ldr	r2, [pc, #88]	@ (8004734 <TIM_OC3_SetConfig+0xec>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d113      	bne.n	8004706 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80046ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	011b      	lsls	r3, r3, #4
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	4313      	orrs	r3, r2
 8004704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	621a      	str	r2, [r3, #32]
}
 8004720:	bf00      	nop
 8004722:	371c      	adds	r7, #28
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	40012c00 	.word	0x40012c00
 8004730:	40014000 	.word	0x40014000
 8004734:	40014400 	.word	0x40014400

08004738 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004738:	b480      	push	{r7}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004766:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800476a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004772:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	021b      	lsls	r3, r3, #8
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	4313      	orrs	r3, r2
 800477e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004786:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	031b      	lsls	r3, r3, #12
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	4313      	orrs	r3, r2
 8004792:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a14      	ldr	r2, [pc, #80]	@ (80047e8 <TIM_OC4_SetConfig+0xb0>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d007      	beq.n	80047ac <TIM_OC4_SetConfig+0x74>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a13      	ldr	r2, [pc, #76]	@ (80047ec <TIM_OC4_SetConfig+0xb4>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d003      	beq.n	80047ac <TIM_OC4_SetConfig+0x74>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a12      	ldr	r2, [pc, #72]	@ (80047f0 <TIM_OC4_SetConfig+0xb8>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d109      	bne.n	80047c0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	019b      	lsls	r3, r3, #6
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	4313      	orrs	r3, r2
 80047be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	621a      	str	r2, [r3, #32]
}
 80047da:	bf00      	nop
 80047dc:	371c      	adds	r7, #28
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	40012c00 	.word	0x40012c00
 80047ec:	40014000 	.word	0x40014000
 80047f0:	40014400 	.word	0x40014400

080047f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b087      	sub	sp, #28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800481a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	4313      	orrs	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004838:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	041b      	lsls	r3, r3, #16
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	4313      	orrs	r3, r2
 8004844:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a13      	ldr	r2, [pc, #76]	@ (8004898 <TIM_OC5_SetConfig+0xa4>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d007      	beq.n	800485e <TIM_OC5_SetConfig+0x6a>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a12      	ldr	r2, [pc, #72]	@ (800489c <TIM_OC5_SetConfig+0xa8>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d003      	beq.n	800485e <TIM_OC5_SetConfig+0x6a>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a11      	ldr	r2, [pc, #68]	@ (80048a0 <TIM_OC5_SetConfig+0xac>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d109      	bne.n	8004872 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004864:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	021b      	lsls	r3, r3, #8
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	4313      	orrs	r3, r2
 8004870:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	621a      	str	r2, [r3, #32]
}
 800488c:	bf00      	nop
 800488e:	371c      	adds	r7, #28
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	40012c00 	.word	0x40012c00
 800489c:	40014000 	.word	0x40014000
 80048a0:	40014400 	.word	0x40014400

080048a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b087      	sub	sp, #28
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	021b      	lsls	r3, r3, #8
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80048ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	051b      	lsls	r3, r3, #20
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a14      	ldr	r2, [pc, #80]	@ (800494c <TIM_OC6_SetConfig+0xa8>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d007      	beq.n	8004910 <TIM_OC6_SetConfig+0x6c>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a13      	ldr	r2, [pc, #76]	@ (8004950 <TIM_OC6_SetConfig+0xac>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d003      	beq.n	8004910 <TIM_OC6_SetConfig+0x6c>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a12      	ldr	r2, [pc, #72]	@ (8004954 <TIM_OC6_SetConfig+0xb0>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d109      	bne.n	8004924 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004916:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	029b      	lsls	r3, r3, #10
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	4313      	orrs	r3, r2
 8004922:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	621a      	str	r2, [r3, #32]
}
 800493e:	bf00      	nop
 8004940:	371c      	adds	r7, #28
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	40012c00 	.word	0x40012c00
 8004950:	40014000 	.word	0x40014000
 8004954:	40014400 	.word	0x40014400

08004958 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004958:	b480      	push	{r7}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	f023 0201 	bic.w	r2, r3, #1
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004982:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	011b      	lsls	r3, r3, #4
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	4313      	orrs	r3, r2
 800498c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f023 030a 	bic.w	r3, r3, #10
 8004994:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	4313      	orrs	r3, r2
 800499c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	621a      	str	r2, [r3, #32]
}
 80049aa:	bf00      	nop
 80049ac:	371c      	adds	r7, #28
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b087      	sub	sp, #28
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	60f8      	str	r0, [r7, #12]
 80049be:	60b9      	str	r1, [r7, #8]
 80049c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	f023 0210 	bic.w	r2, r3, #16
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80049e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	031b      	lsls	r3, r3, #12
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80049f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	011b      	lsls	r3, r3, #4
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	621a      	str	r2, [r3, #32]
}
 8004a0a:	bf00      	nop
 8004a0c:	371c      	adds	r7, #28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b085      	sub	sp, #20
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
 8004a1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	f043 0307 	orr.w	r3, r3, #7
 8004a38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	609a      	str	r2, [r3, #8]
}
 8004a40:	bf00      	nop
 8004a42:	3714      	adds	r7, #20
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b087      	sub	sp, #28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
 8004a58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	021a      	lsls	r2, r3, #8
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	609a      	str	r2, [r3, #8]
}
 8004a80:	bf00      	nop
 8004a82:	371c      	adds	r7, #28
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d101      	bne.n	8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e04f      	b.n	8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a21      	ldr	r2, [pc, #132]	@ (8004b50 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d108      	bne.n	8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004ad4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ae6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a14      	ldr	r2, [pc, #80]	@ (8004b50 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d009      	beq.n	8004b18 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b0c:	d004      	beq.n	8004b18 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a10      	ldr	r2, [pc, #64]	@ (8004b54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d10c      	bne.n	8004b32 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	40012c00 	.word	0x40012c00
 8004b54:	40014000 	.word	0x40014000

08004b58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d101      	bne.n	8004b74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b70:	2302      	movs	r3, #2
 8004b72:	e060      	b.n	8004c36 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	041b      	lsls	r3, r3, #16
 8004bea:	4313      	orrs	r3, r2
 8004bec:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a14      	ldr	r2, [pc, #80]	@ (8004c44 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d115      	bne.n	8004c24 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c02:	051b      	lsls	r3, r3, #20
 8004c04:	4313      	orrs	r3, r2
 8004c06:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3714      	adds	r7, #20
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	40012c00 	.word	0x40012c00

08004c48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e040      	b.n	8004d18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d106      	bne.n	8004cac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7fc fa16 	bl	80010d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2224      	movs	r2, #36	@ 0x24
 8004cb0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 0201 	bic.w	r2, r2, #1
 8004cc0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d002      	beq.n	8004cd0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 fb1e 	bl	800530c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f8ef 	bl	8004eb4 <UART_SetConfig>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d101      	bne.n	8004ce0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e01b      	b.n	8004d18 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0201 	orr.w	r2, r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 fb9d 	bl	8005450 <UART_CheckIdleState>
 8004d16:	4603      	mov	r3, r0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3708      	adds	r7, #8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b08a      	sub	sp, #40	@ 0x28
 8004d24:	af02      	add	r7, sp, #8
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	603b      	str	r3, [r7, #0]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d36:	2b20      	cmp	r3, #32
 8004d38:	f040 80b6 	bne.w	8004ea8 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <HAL_UART_Receive+0x28>
 8004d42:	88fb      	ldrh	r3, [r7, #6]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d101      	bne.n	8004d4c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e0ae      	b.n	8004eaa <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2222      	movs	r2, #34	@ 0x22
 8004d58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d62:	f7fc faff 	bl	8001364 <HAL_GetTick>
 8004d66:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	88fa      	ldrh	r2, [r7, #6]
 8004d6c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	88fa      	ldrh	r2, [r7, #6]
 8004d74:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d80:	d10e      	bne.n	8004da0 <HAL_UART_Receive+0x80>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d105      	bne.n	8004d96 <HAL_UART_Receive+0x76>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004d90:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d94:	e02d      	b.n	8004df2 <HAL_UART_Receive+0xd2>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	22ff      	movs	r2, #255	@ 0xff
 8004d9a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d9e:	e028      	b.n	8004df2 <HAL_UART_Receive+0xd2>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10d      	bne.n	8004dc4 <HAL_UART_Receive+0xa4>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d104      	bne.n	8004dba <HAL_UART_Receive+0x9a>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	22ff      	movs	r2, #255	@ 0xff
 8004db4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004db8:	e01b      	b.n	8004df2 <HAL_UART_Receive+0xd2>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	227f      	movs	r2, #127	@ 0x7f
 8004dbe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004dc2:	e016      	b.n	8004df2 <HAL_UART_Receive+0xd2>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004dcc:	d10d      	bne.n	8004dea <HAL_UART_Receive+0xca>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d104      	bne.n	8004de0 <HAL_UART_Receive+0xc0>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	227f      	movs	r2, #127	@ 0x7f
 8004dda:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004dde:	e008      	b.n	8004df2 <HAL_UART_Receive+0xd2>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	223f      	movs	r2, #63	@ 0x3f
 8004de4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004de8:	e003      	b.n	8004df2 <HAL_UART_Receive+0xd2>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004df8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e02:	d108      	bne.n	8004e16 <HAL_UART_Receive+0xf6>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d104      	bne.n	8004e16 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	61bb      	str	r3, [r7, #24]
 8004e14:	e003      	b.n	8004e1e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004e1e:	e037      	b.n	8004e90 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	2200      	movs	r2, #0
 8004e28:	2120      	movs	r1, #32
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 fbb8 	bl	80055a0 <UART_WaitOnFlagUntilTimeout>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d005      	beq.n	8004e42 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e033      	b.n	8004eaa <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10c      	bne.n	8004e62 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	8a7b      	ldrh	r3, [r7, #18]
 8004e52:	4013      	ands	r3, r2
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	3302      	adds	r3, #2
 8004e5e:	61bb      	str	r3, [r7, #24]
 8004e60:	e00d      	b.n	8004e7e <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	b2da      	uxtb	r2, r3
 8004e6c:	8a7b      	ldrh	r3, [r7, #18]
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	4013      	ands	r3, r2
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	3b01      	subs	r3, #1
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1c1      	bne.n	8004e20 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	e000      	b.n	8004eaa <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004ea8:	2302      	movs	r3, #2
  }
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3720      	adds	r7, #32
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
	...

08004eb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eb8:	b08a      	sub	sp, #40	@ 0x28
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	69db      	ldr	r3, [r3, #28]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	4bb4      	ldr	r3, [pc, #720]	@ (80051b4 <UART_SetConfig+0x300>)
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	6812      	ldr	r2, [r2, #0]
 8004eea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004eec:	430b      	orrs	r3, r1
 8004eee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	68da      	ldr	r2, [r3, #12]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4aa9      	ldr	r2, [pc, #676]	@ (80051b8 <UART_SetConfig+0x304>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d004      	beq.n	8004f20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f30:	430a      	orrs	r2, r1
 8004f32:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4aa0      	ldr	r2, [pc, #640]	@ (80051bc <UART_SetConfig+0x308>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d126      	bne.n	8004f8c <UART_SetConfig+0xd8>
 8004f3e:	4ba0      	ldr	r3, [pc, #640]	@ (80051c0 <UART_SetConfig+0x30c>)
 8004f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f44:	f003 0303 	and.w	r3, r3, #3
 8004f48:	2b03      	cmp	r3, #3
 8004f4a:	d81b      	bhi.n	8004f84 <UART_SetConfig+0xd0>
 8004f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f54 <UART_SetConfig+0xa0>)
 8004f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f52:	bf00      	nop
 8004f54:	08004f65 	.word	0x08004f65
 8004f58:	08004f75 	.word	0x08004f75
 8004f5c:	08004f6d 	.word	0x08004f6d
 8004f60:	08004f7d 	.word	0x08004f7d
 8004f64:	2301      	movs	r3, #1
 8004f66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f6a:	e080      	b.n	800506e <UART_SetConfig+0x1ba>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f72:	e07c      	b.n	800506e <UART_SetConfig+0x1ba>
 8004f74:	2304      	movs	r3, #4
 8004f76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f7a:	e078      	b.n	800506e <UART_SetConfig+0x1ba>
 8004f7c:	2308      	movs	r3, #8
 8004f7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f82:	e074      	b.n	800506e <UART_SetConfig+0x1ba>
 8004f84:	2310      	movs	r3, #16
 8004f86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f8a:	e070      	b.n	800506e <UART_SetConfig+0x1ba>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a8c      	ldr	r2, [pc, #560]	@ (80051c4 <UART_SetConfig+0x310>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d138      	bne.n	8005008 <UART_SetConfig+0x154>
 8004f96:	4b8a      	ldr	r3, [pc, #552]	@ (80051c0 <UART_SetConfig+0x30c>)
 8004f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f9c:	f003 030c 	and.w	r3, r3, #12
 8004fa0:	2b0c      	cmp	r3, #12
 8004fa2:	d82d      	bhi.n	8005000 <UART_SetConfig+0x14c>
 8004fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8004fac <UART_SetConfig+0xf8>)
 8004fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004faa:	bf00      	nop
 8004fac:	08004fe1 	.word	0x08004fe1
 8004fb0:	08005001 	.word	0x08005001
 8004fb4:	08005001 	.word	0x08005001
 8004fb8:	08005001 	.word	0x08005001
 8004fbc:	08004ff1 	.word	0x08004ff1
 8004fc0:	08005001 	.word	0x08005001
 8004fc4:	08005001 	.word	0x08005001
 8004fc8:	08005001 	.word	0x08005001
 8004fcc:	08004fe9 	.word	0x08004fe9
 8004fd0:	08005001 	.word	0x08005001
 8004fd4:	08005001 	.word	0x08005001
 8004fd8:	08005001 	.word	0x08005001
 8004fdc:	08004ff9 	.word	0x08004ff9
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fe6:	e042      	b.n	800506e <UART_SetConfig+0x1ba>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fee:	e03e      	b.n	800506e <UART_SetConfig+0x1ba>
 8004ff0:	2304      	movs	r3, #4
 8004ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ff6:	e03a      	b.n	800506e <UART_SetConfig+0x1ba>
 8004ff8:	2308      	movs	r3, #8
 8004ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ffe:	e036      	b.n	800506e <UART_SetConfig+0x1ba>
 8005000:	2310      	movs	r3, #16
 8005002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005006:	e032      	b.n	800506e <UART_SetConfig+0x1ba>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a6a      	ldr	r2, [pc, #424]	@ (80051b8 <UART_SetConfig+0x304>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d12a      	bne.n	8005068 <UART_SetConfig+0x1b4>
 8005012:	4b6b      	ldr	r3, [pc, #428]	@ (80051c0 <UART_SetConfig+0x30c>)
 8005014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005018:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800501c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005020:	d01a      	beq.n	8005058 <UART_SetConfig+0x1a4>
 8005022:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005026:	d81b      	bhi.n	8005060 <UART_SetConfig+0x1ac>
 8005028:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800502c:	d00c      	beq.n	8005048 <UART_SetConfig+0x194>
 800502e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005032:	d815      	bhi.n	8005060 <UART_SetConfig+0x1ac>
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <UART_SetConfig+0x18c>
 8005038:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800503c:	d008      	beq.n	8005050 <UART_SetConfig+0x19c>
 800503e:	e00f      	b.n	8005060 <UART_SetConfig+0x1ac>
 8005040:	2300      	movs	r3, #0
 8005042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005046:	e012      	b.n	800506e <UART_SetConfig+0x1ba>
 8005048:	2302      	movs	r3, #2
 800504a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800504e:	e00e      	b.n	800506e <UART_SetConfig+0x1ba>
 8005050:	2304      	movs	r3, #4
 8005052:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005056:	e00a      	b.n	800506e <UART_SetConfig+0x1ba>
 8005058:	2308      	movs	r3, #8
 800505a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800505e:	e006      	b.n	800506e <UART_SetConfig+0x1ba>
 8005060:	2310      	movs	r3, #16
 8005062:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005066:	e002      	b.n	800506e <UART_SetConfig+0x1ba>
 8005068:	2310      	movs	r3, #16
 800506a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a51      	ldr	r2, [pc, #324]	@ (80051b8 <UART_SetConfig+0x304>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d17a      	bne.n	800516e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005078:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800507c:	2b08      	cmp	r3, #8
 800507e:	d824      	bhi.n	80050ca <UART_SetConfig+0x216>
 8005080:	a201      	add	r2, pc, #4	@ (adr r2, 8005088 <UART_SetConfig+0x1d4>)
 8005082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005086:	bf00      	nop
 8005088:	080050ad 	.word	0x080050ad
 800508c:	080050cb 	.word	0x080050cb
 8005090:	080050b5 	.word	0x080050b5
 8005094:	080050cb 	.word	0x080050cb
 8005098:	080050bb 	.word	0x080050bb
 800509c:	080050cb 	.word	0x080050cb
 80050a0:	080050cb 	.word	0x080050cb
 80050a4:	080050cb 	.word	0x080050cb
 80050a8:	080050c3 	.word	0x080050c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050ac:	f7fe fa22 	bl	80034f4 <HAL_RCC_GetPCLK1Freq>
 80050b0:	61f8      	str	r0, [r7, #28]
        break;
 80050b2:	e010      	b.n	80050d6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050b4:	4b44      	ldr	r3, [pc, #272]	@ (80051c8 <UART_SetConfig+0x314>)
 80050b6:	61fb      	str	r3, [r7, #28]
        break;
 80050b8:	e00d      	b.n	80050d6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050ba:	f7fe f983 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 80050be:	61f8      	str	r0, [r7, #28]
        break;
 80050c0:	e009      	b.n	80050d6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050c6:	61fb      	str	r3, [r7, #28]
        break;
 80050c8:	e005      	b.n	80050d6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80050ca:	2300      	movs	r3, #0
 80050cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80050d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 8107 	beq.w	80052ec <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	4613      	mov	r3, r2
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	4413      	add	r3, r2
 80050e8:	69fa      	ldr	r2, [r7, #28]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d305      	bcc.n	80050fa <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050f4:	69fa      	ldr	r2, [r7, #28]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d903      	bls.n	8005102 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005100:	e0f4      	b.n	80052ec <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	2200      	movs	r2, #0
 8005106:	461c      	mov	r4, r3
 8005108:	4615      	mov	r5, r2
 800510a:	f04f 0200 	mov.w	r2, #0
 800510e:	f04f 0300 	mov.w	r3, #0
 8005112:	022b      	lsls	r3, r5, #8
 8005114:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005118:	0222      	lsls	r2, r4, #8
 800511a:	68f9      	ldr	r1, [r7, #12]
 800511c:	6849      	ldr	r1, [r1, #4]
 800511e:	0849      	lsrs	r1, r1, #1
 8005120:	2000      	movs	r0, #0
 8005122:	4688      	mov	r8, r1
 8005124:	4681      	mov	r9, r0
 8005126:	eb12 0a08 	adds.w	sl, r2, r8
 800512a:	eb43 0b09 	adc.w	fp, r3, r9
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	603b      	str	r3, [r7, #0]
 8005136:	607a      	str	r2, [r7, #4]
 8005138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800513c:	4650      	mov	r0, sl
 800513e:	4659      	mov	r1, fp
 8005140:	f7fb f844 	bl	80001cc <__aeabi_uldivmod>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	4613      	mov	r3, r2
 800514a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005152:	d308      	bcc.n	8005166 <UART_SetConfig+0x2b2>
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800515a:	d204      	bcs.n	8005166 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	60da      	str	r2, [r3, #12]
 8005164:	e0c2      	b.n	80052ec <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800516c:	e0be      	b.n	80052ec <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005176:	d16a      	bne.n	800524e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005178:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800517c:	2b08      	cmp	r3, #8
 800517e:	d834      	bhi.n	80051ea <UART_SetConfig+0x336>
 8005180:	a201      	add	r2, pc, #4	@ (adr r2, 8005188 <UART_SetConfig+0x2d4>)
 8005182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005186:	bf00      	nop
 8005188:	080051ad 	.word	0x080051ad
 800518c:	080051cd 	.word	0x080051cd
 8005190:	080051d5 	.word	0x080051d5
 8005194:	080051eb 	.word	0x080051eb
 8005198:	080051db 	.word	0x080051db
 800519c:	080051eb 	.word	0x080051eb
 80051a0:	080051eb 	.word	0x080051eb
 80051a4:	080051eb 	.word	0x080051eb
 80051a8:	080051e3 	.word	0x080051e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051ac:	f7fe f9a2 	bl	80034f4 <HAL_RCC_GetPCLK1Freq>
 80051b0:	61f8      	str	r0, [r7, #28]
        break;
 80051b2:	e020      	b.n	80051f6 <UART_SetConfig+0x342>
 80051b4:	efff69f3 	.word	0xefff69f3
 80051b8:	40008000 	.word	0x40008000
 80051bc:	40013800 	.word	0x40013800
 80051c0:	40021000 	.word	0x40021000
 80051c4:	40004400 	.word	0x40004400
 80051c8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051cc:	f7fe f9a8 	bl	8003520 <HAL_RCC_GetPCLK2Freq>
 80051d0:	61f8      	str	r0, [r7, #28]
        break;
 80051d2:	e010      	b.n	80051f6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051d4:	4b4c      	ldr	r3, [pc, #304]	@ (8005308 <UART_SetConfig+0x454>)
 80051d6:	61fb      	str	r3, [r7, #28]
        break;
 80051d8:	e00d      	b.n	80051f6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051da:	f7fe f8f3 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 80051de:	61f8      	str	r0, [r7, #28]
        break;
 80051e0:	e009      	b.n	80051f6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051e6:	61fb      	str	r3, [r7, #28]
        break;
 80051e8:	e005      	b.n	80051f6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80051ea:	2300      	movs	r3, #0
 80051ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80051f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d077      	beq.n	80052ec <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	005a      	lsls	r2, r3, #1
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	085b      	lsrs	r3, r3, #1
 8005206:	441a      	add	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005210:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	2b0f      	cmp	r3, #15
 8005216:	d916      	bls.n	8005246 <UART_SetConfig+0x392>
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800521e:	d212      	bcs.n	8005246 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	b29b      	uxth	r3, r3
 8005224:	f023 030f 	bic.w	r3, r3, #15
 8005228:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	085b      	lsrs	r3, r3, #1
 800522e:	b29b      	uxth	r3, r3
 8005230:	f003 0307 	and.w	r3, r3, #7
 8005234:	b29a      	uxth	r2, r3
 8005236:	8afb      	ldrh	r3, [r7, #22]
 8005238:	4313      	orrs	r3, r2
 800523a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	8afa      	ldrh	r2, [r7, #22]
 8005242:	60da      	str	r2, [r3, #12]
 8005244:	e052      	b.n	80052ec <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800524c:	e04e      	b.n	80052ec <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800524e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005252:	2b08      	cmp	r3, #8
 8005254:	d827      	bhi.n	80052a6 <UART_SetConfig+0x3f2>
 8005256:	a201      	add	r2, pc, #4	@ (adr r2, 800525c <UART_SetConfig+0x3a8>)
 8005258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525c:	08005281 	.word	0x08005281
 8005260:	08005289 	.word	0x08005289
 8005264:	08005291 	.word	0x08005291
 8005268:	080052a7 	.word	0x080052a7
 800526c:	08005297 	.word	0x08005297
 8005270:	080052a7 	.word	0x080052a7
 8005274:	080052a7 	.word	0x080052a7
 8005278:	080052a7 	.word	0x080052a7
 800527c:	0800529f 	.word	0x0800529f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005280:	f7fe f938 	bl	80034f4 <HAL_RCC_GetPCLK1Freq>
 8005284:	61f8      	str	r0, [r7, #28]
        break;
 8005286:	e014      	b.n	80052b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005288:	f7fe f94a 	bl	8003520 <HAL_RCC_GetPCLK2Freq>
 800528c:	61f8      	str	r0, [r7, #28]
        break;
 800528e:	e010      	b.n	80052b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005290:	4b1d      	ldr	r3, [pc, #116]	@ (8005308 <UART_SetConfig+0x454>)
 8005292:	61fb      	str	r3, [r7, #28]
        break;
 8005294:	e00d      	b.n	80052b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005296:	f7fe f895 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 800529a:	61f8      	str	r0, [r7, #28]
        break;
 800529c:	e009      	b.n	80052b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800529e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052a2:	61fb      	str	r3, [r7, #28]
        break;
 80052a4:	e005      	b.n	80052b2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80052a6:	2300      	movs	r3, #0
 80052a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80052b0:	bf00      	nop
    }

    if (pclk != 0U)
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d019      	beq.n	80052ec <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	085a      	lsrs	r2, r3, #1
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	441a      	add	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	2b0f      	cmp	r3, #15
 80052d0:	d909      	bls.n	80052e6 <UART_SetConfig+0x432>
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052d8:	d205      	bcs.n	80052e6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	b29a      	uxth	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	60da      	str	r2, [r3, #12]
 80052e4:	e002      	b.n	80052ec <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80052f8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3728      	adds	r7, #40	@ 0x28
 8005300:	46bd      	mov	sp, r7
 8005302:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005306:	bf00      	nop
 8005308:	00f42400 	.word	0x00f42400

0800530c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005318:	f003 0308 	and.w	r3, r3, #8
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00a      	beq.n	8005336 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00a      	beq.n	8005358 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	430a      	orrs	r2, r1
 8005356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00a      	beq.n	800537a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	430a      	orrs	r2, r1
 8005378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537e:	f003 0304 	and.w	r3, r3, #4
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00a      	beq.n	800539c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	430a      	orrs	r2, r1
 800539a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a0:	f003 0310 	and.w	r3, r3, #16
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00a      	beq.n	80053be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c2:	f003 0320 	and.w	r3, r3, #32
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00a      	beq.n	80053e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d01a      	beq.n	8005422 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	430a      	orrs	r2, r1
 8005400:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005406:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800540a:	d10a      	bne.n	8005422 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00a      	beq.n	8005444 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	430a      	orrs	r2, r1
 8005442:	605a      	str	r2, [r3, #4]
  }
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b098      	sub	sp, #96	@ 0x60
 8005454:	af02      	add	r7, sp, #8
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005460:	f7fb ff80 	bl	8001364 <HAL_GetTick>
 8005464:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0308 	and.w	r3, r3, #8
 8005470:	2b08      	cmp	r3, #8
 8005472:	d12e      	bne.n	80054d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005474:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800547c:	2200      	movs	r2, #0
 800547e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f88c 	bl	80055a0 <UART_WaitOnFlagUntilTimeout>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d021      	beq.n	80054d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005496:	e853 3f00 	ldrex	r3, [r3]
 800549a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800549c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800549e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	461a      	mov	r2, r3
 80054aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80054ae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054b4:	e841 2300 	strex	r3, r2, [r1]
 80054b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1e6      	bne.n	800548e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2220      	movs	r2, #32
 80054c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e062      	b.n	8005598 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0304 	and.w	r3, r3, #4
 80054dc:	2b04      	cmp	r3, #4
 80054de:	d149      	bne.n	8005574 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054e8:	2200      	movs	r2, #0
 80054ea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f856 	bl	80055a0 <UART_WaitOnFlagUntilTimeout>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d03c      	beq.n	8005574 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005502:	e853 3f00 	ldrex	r3, [r3]
 8005506:	623b      	str	r3, [r7, #32]
   return(result);
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800550e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	461a      	mov	r2, r3
 8005516:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005518:	633b      	str	r3, [r7, #48]	@ 0x30
 800551a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800551e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005520:	e841 2300 	strex	r3, r2, [r1]
 8005524:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1e6      	bne.n	80054fa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3308      	adds	r3, #8
 8005532:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	e853 3f00 	ldrex	r3, [r3]
 800553a:	60fb      	str	r3, [r7, #12]
   return(result);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f023 0301 	bic.w	r3, r3, #1
 8005542:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	3308      	adds	r3, #8
 800554a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800554c:	61fa      	str	r2, [r7, #28]
 800554e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005550:	69b9      	ldr	r1, [r7, #24]
 8005552:	69fa      	ldr	r2, [r7, #28]
 8005554:	e841 2300 	strex	r3, r2, [r1]
 8005558:	617b      	str	r3, [r7, #20]
   return(result);
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1e5      	bne.n	800552c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2220      	movs	r2, #32
 8005564:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e011      	b.n	8005598 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2220      	movs	r2, #32
 8005578:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2220      	movs	r2, #32
 800557e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3758      	adds	r7, #88	@ 0x58
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	603b      	str	r3, [r7, #0]
 80055ac:	4613      	mov	r3, r2
 80055ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055b0:	e04f      	b.n	8005652 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b8:	d04b      	beq.n	8005652 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ba:	f7fb fed3 	bl	8001364 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d302      	bcc.n	80055d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e04e      	b.n	8005672 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0304 	and.w	r3, r3, #4
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d037      	beq.n	8005652 <UART_WaitOnFlagUntilTimeout+0xb2>
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2b80      	cmp	r3, #128	@ 0x80
 80055e6:	d034      	beq.n	8005652 <UART_WaitOnFlagUntilTimeout+0xb2>
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	2b40      	cmp	r3, #64	@ 0x40
 80055ec:	d031      	beq.n	8005652 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	69db      	ldr	r3, [r3, #28]
 80055f4:	f003 0308 	and.w	r3, r3, #8
 80055f8:	2b08      	cmp	r3, #8
 80055fa:	d110      	bne.n	800561e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2208      	movs	r2, #8
 8005602:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f000 f838 	bl	800567a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2208      	movs	r2, #8
 800560e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e029      	b.n	8005672 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	69db      	ldr	r3, [r3, #28]
 8005624:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005628:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800562c:	d111      	bne.n	8005652 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005636:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f000 f81e 	bl	800567a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2220      	movs	r2, #32
 8005642:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e00f      	b.n	8005672 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	69da      	ldr	r2, [r3, #28]
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	4013      	ands	r3, r2
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	429a      	cmp	r2, r3
 8005660:	bf0c      	ite	eq
 8005662:	2301      	moveq	r3, #1
 8005664:	2300      	movne	r3, #0
 8005666:	b2db      	uxtb	r3, r3
 8005668:	461a      	mov	r2, r3
 800566a:	79fb      	ldrb	r3, [r7, #7]
 800566c:	429a      	cmp	r2, r3
 800566e:	d0a0      	beq.n	80055b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800567a:	b480      	push	{r7}
 800567c:	b095      	sub	sp, #84	@ 0x54
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800568a:	e853 3f00 	ldrex	r3, [r3]
 800568e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005692:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005696:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	461a      	mov	r2, r3
 800569e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80056a2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056a8:	e841 2300 	strex	r3, r2, [r1]
 80056ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1e6      	bne.n	8005682 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3308      	adds	r3, #8
 80056ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056bc:	6a3b      	ldr	r3, [r7, #32]
 80056be:	e853 3f00 	ldrex	r3, [r3]
 80056c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	f023 0301 	bic.w	r3, r3, #1
 80056ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	3308      	adds	r3, #8
 80056d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056dc:	e841 2300 	strex	r3, r2, [r1]
 80056e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1e5      	bne.n	80056b4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d118      	bne.n	8005722 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	e853 3f00 	ldrex	r3, [r3]
 80056fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	f023 0310 	bic.w	r3, r3, #16
 8005704:	647b      	str	r3, [r7, #68]	@ 0x44
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	461a      	mov	r2, r3
 800570c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800570e:	61bb      	str	r3, [r7, #24]
 8005710:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005712:	6979      	ldr	r1, [r7, #20]
 8005714:	69ba      	ldr	r2, [r7, #24]
 8005716:	e841 2300 	strex	r3, r2, [r1]
 800571a:	613b      	str	r3, [r7, #16]
   return(result);
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1e6      	bne.n	80056f0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2220      	movs	r2, #32
 8005726:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005736:	bf00      	nop
 8005738:	3754      	adds	r7, #84	@ 0x54
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
	...

08005744 <Communication_TerminalRecev>:
}

/* ---------------------------------------------------------------
	UART1で1文字受信する関数
--------------------------------------------------------------- */
uint8_t Communication_TerminalRecev(void){
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
	uint8_t data[1];
	HAL_UART_Receive( &huart1, (uint8_t*)data, sizeof(data), 1 );
 800574a:	1d39      	adds	r1, r7, #4
 800574c:	2301      	movs	r3, #1
 800574e:	2201      	movs	r2, #1
 8005750:	4803      	ldr	r0, [pc, #12]	@ (8005760 <Communication_TerminalRecev+0x1c>)
 8005752:	f7ff fae5 	bl	8004d20 <HAL_UART_Receive>
	return (*data);
 8005756:	793b      	ldrb	r3, [r7, #4]
}
 8005758:	4618      	mov	r0, r3
 800575a:	3708      	adds	r7, #8
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	20000264 	.word	0x20000264

08005764 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
	if(ch == '\n'){
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b0a      	cmp	r3, #10
 8005770:	d108      	bne.n	8005784 <__io_putchar+0x20>
		uint8_t _ch = '\r';
 8005772:	230d      	movs	r3, #13
 8005774:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Receive(&huart1, &_ch, 1, 1);
 8005776:	f107 010f 	add.w	r1, r7, #15
 800577a:	2301      	movs	r3, #1
 800577c:	2201      	movs	r2, #1
 800577e:	4807      	ldr	r0, [pc, #28]	@ (800579c <__io_putchar+0x38>)
 8005780:	f7ff face 	bl	8004d20 <HAL_UART_Receive>
	}
	HAL_UART_Receive(&huart1, &ch, 1, 1);
 8005784:	1d39      	adds	r1, r7, #4
 8005786:	2301      	movs	r3, #1
 8005788:	2201      	movs	r2, #1
 800578a:	4804      	ldr	r0, [pc, #16]	@ (800579c <__io_putchar+0x38>)
 800578c:	f7ff fac8 	bl	8004d20 <HAL_UART_Receive>
	return 1;
 8005790:	2301      	movs	r3, #1
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	20000264 	.word	0x20000264

080057a0 <__io_getchar>:
#ifdef __GNUC__
#define GETCHAR_PROTOTYPE int __io_getchar(void)
#else
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif /* __GNUC__ */
GETCHAR_PROTOTYPE {
 80057a0:	b580      	push	{r7, lr}
 80057a2:	af00      	add	r7, sp, #0
	return Communication_TerminalRecev();
 80057a4:	f7ff ffce 	bl	8005744 <Communication_TerminalRecev>
 80057a8:	4603      	mov	r3, r0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	bd80      	pop	{r7, pc}
	...

080057b0 <mySetup>:
#include "stdio.h"

#include "41_myThread.h"


void mySetup(void){
 80057b0:	b580      	push	{r7, lr}
 80057b2:	af00      	add	r7, sp, #0
	// 初期設定
	printf("Hello\n");
 80057b4:	4802      	ldr	r0, [pc, #8]	@ (80057c0 <mySetup+0x10>)
 80057b6:	f000 f91d 	bl	80059f4 <puts>
}
 80057ba:	bf00      	nop
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	08006134 	.word	0x08006134

080057c4 <std>:
 80057c4:	2300      	movs	r3, #0
 80057c6:	b510      	push	{r4, lr}
 80057c8:	4604      	mov	r4, r0
 80057ca:	e9c0 3300 	strd	r3, r3, [r0]
 80057ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057d2:	6083      	str	r3, [r0, #8]
 80057d4:	8181      	strh	r1, [r0, #12]
 80057d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80057d8:	81c2      	strh	r2, [r0, #14]
 80057da:	6183      	str	r3, [r0, #24]
 80057dc:	4619      	mov	r1, r3
 80057de:	2208      	movs	r2, #8
 80057e0:	305c      	adds	r0, #92	@ 0x5c
 80057e2:	f000 f9e7 	bl	8005bb4 <memset>
 80057e6:	4b0d      	ldr	r3, [pc, #52]	@ (800581c <std+0x58>)
 80057e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80057ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005820 <std+0x5c>)
 80057ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80057ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005824 <std+0x60>)
 80057f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80057f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005828 <std+0x64>)
 80057f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80057f6:	4b0d      	ldr	r3, [pc, #52]	@ (800582c <std+0x68>)
 80057f8:	6224      	str	r4, [r4, #32]
 80057fa:	429c      	cmp	r4, r3
 80057fc:	d006      	beq.n	800580c <std+0x48>
 80057fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005802:	4294      	cmp	r4, r2
 8005804:	d002      	beq.n	800580c <std+0x48>
 8005806:	33d0      	adds	r3, #208	@ 0xd0
 8005808:	429c      	cmp	r4, r3
 800580a:	d105      	bne.n	8005818 <std+0x54>
 800580c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005814:	f000 ba46 	b.w	8005ca4 <__retarget_lock_init_recursive>
 8005818:	bd10      	pop	{r4, pc}
 800581a:	bf00      	nop
 800581c:	08005a05 	.word	0x08005a05
 8005820:	08005a27 	.word	0x08005a27
 8005824:	08005a5f 	.word	0x08005a5f
 8005828:	08005a83 	.word	0x08005a83
 800582c:	20000380 	.word	0x20000380

08005830 <stdio_exit_handler>:
 8005830:	4a02      	ldr	r2, [pc, #8]	@ (800583c <stdio_exit_handler+0xc>)
 8005832:	4903      	ldr	r1, [pc, #12]	@ (8005840 <stdio_exit_handler+0x10>)
 8005834:	4803      	ldr	r0, [pc, #12]	@ (8005844 <stdio_exit_handler+0x14>)
 8005836:	f000 b869 	b.w	800590c <_fwalk_sglue>
 800583a:	bf00      	nop
 800583c:	2000000c 	.word	0x2000000c
 8005840:	08005fa5 	.word	0x08005fa5
 8005844:	2000001c 	.word	0x2000001c

08005848 <cleanup_stdio>:
 8005848:	6841      	ldr	r1, [r0, #4]
 800584a:	4b0c      	ldr	r3, [pc, #48]	@ (800587c <cleanup_stdio+0x34>)
 800584c:	4299      	cmp	r1, r3
 800584e:	b510      	push	{r4, lr}
 8005850:	4604      	mov	r4, r0
 8005852:	d001      	beq.n	8005858 <cleanup_stdio+0x10>
 8005854:	f000 fba6 	bl	8005fa4 <_fflush_r>
 8005858:	68a1      	ldr	r1, [r4, #8]
 800585a:	4b09      	ldr	r3, [pc, #36]	@ (8005880 <cleanup_stdio+0x38>)
 800585c:	4299      	cmp	r1, r3
 800585e:	d002      	beq.n	8005866 <cleanup_stdio+0x1e>
 8005860:	4620      	mov	r0, r4
 8005862:	f000 fb9f 	bl	8005fa4 <_fflush_r>
 8005866:	68e1      	ldr	r1, [r4, #12]
 8005868:	4b06      	ldr	r3, [pc, #24]	@ (8005884 <cleanup_stdio+0x3c>)
 800586a:	4299      	cmp	r1, r3
 800586c:	d004      	beq.n	8005878 <cleanup_stdio+0x30>
 800586e:	4620      	mov	r0, r4
 8005870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005874:	f000 bb96 	b.w	8005fa4 <_fflush_r>
 8005878:	bd10      	pop	{r4, pc}
 800587a:	bf00      	nop
 800587c:	20000380 	.word	0x20000380
 8005880:	200003e8 	.word	0x200003e8
 8005884:	20000450 	.word	0x20000450

08005888 <global_stdio_init.part.0>:
 8005888:	b510      	push	{r4, lr}
 800588a:	4b0b      	ldr	r3, [pc, #44]	@ (80058b8 <global_stdio_init.part.0+0x30>)
 800588c:	4c0b      	ldr	r4, [pc, #44]	@ (80058bc <global_stdio_init.part.0+0x34>)
 800588e:	4a0c      	ldr	r2, [pc, #48]	@ (80058c0 <global_stdio_init.part.0+0x38>)
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	4620      	mov	r0, r4
 8005894:	2200      	movs	r2, #0
 8005896:	2104      	movs	r1, #4
 8005898:	f7ff ff94 	bl	80057c4 <std>
 800589c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80058a0:	2201      	movs	r2, #1
 80058a2:	2109      	movs	r1, #9
 80058a4:	f7ff ff8e 	bl	80057c4 <std>
 80058a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80058ac:	2202      	movs	r2, #2
 80058ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058b2:	2112      	movs	r1, #18
 80058b4:	f7ff bf86 	b.w	80057c4 <std>
 80058b8:	200004b8 	.word	0x200004b8
 80058bc:	20000380 	.word	0x20000380
 80058c0:	08005831 	.word	0x08005831

080058c4 <__sfp_lock_acquire>:
 80058c4:	4801      	ldr	r0, [pc, #4]	@ (80058cc <__sfp_lock_acquire+0x8>)
 80058c6:	f000 b9ee 	b.w	8005ca6 <__retarget_lock_acquire_recursive>
 80058ca:	bf00      	nop
 80058cc:	200004c1 	.word	0x200004c1

080058d0 <__sfp_lock_release>:
 80058d0:	4801      	ldr	r0, [pc, #4]	@ (80058d8 <__sfp_lock_release+0x8>)
 80058d2:	f000 b9e9 	b.w	8005ca8 <__retarget_lock_release_recursive>
 80058d6:	bf00      	nop
 80058d8:	200004c1 	.word	0x200004c1

080058dc <__sinit>:
 80058dc:	b510      	push	{r4, lr}
 80058de:	4604      	mov	r4, r0
 80058e0:	f7ff fff0 	bl	80058c4 <__sfp_lock_acquire>
 80058e4:	6a23      	ldr	r3, [r4, #32]
 80058e6:	b11b      	cbz	r3, 80058f0 <__sinit+0x14>
 80058e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058ec:	f7ff bff0 	b.w	80058d0 <__sfp_lock_release>
 80058f0:	4b04      	ldr	r3, [pc, #16]	@ (8005904 <__sinit+0x28>)
 80058f2:	6223      	str	r3, [r4, #32]
 80058f4:	4b04      	ldr	r3, [pc, #16]	@ (8005908 <__sinit+0x2c>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1f5      	bne.n	80058e8 <__sinit+0xc>
 80058fc:	f7ff ffc4 	bl	8005888 <global_stdio_init.part.0>
 8005900:	e7f2      	b.n	80058e8 <__sinit+0xc>
 8005902:	bf00      	nop
 8005904:	08005849 	.word	0x08005849
 8005908:	200004b8 	.word	0x200004b8

0800590c <_fwalk_sglue>:
 800590c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005910:	4607      	mov	r7, r0
 8005912:	4688      	mov	r8, r1
 8005914:	4614      	mov	r4, r2
 8005916:	2600      	movs	r6, #0
 8005918:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800591c:	f1b9 0901 	subs.w	r9, r9, #1
 8005920:	d505      	bpl.n	800592e <_fwalk_sglue+0x22>
 8005922:	6824      	ldr	r4, [r4, #0]
 8005924:	2c00      	cmp	r4, #0
 8005926:	d1f7      	bne.n	8005918 <_fwalk_sglue+0xc>
 8005928:	4630      	mov	r0, r6
 800592a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800592e:	89ab      	ldrh	r3, [r5, #12]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d907      	bls.n	8005944 <_fwalk_sglue+0x38>
 8005934:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005938:	3301      	adds	r3, #1
 800593a:	d003      	beq.n	8005944 <_fwalk_sglue+0x38>
 800593c:	4629      	mov	r1, r5
 800593e:	4638      	mov	r0, r7
 8005940:	47c0      	blx	r8
 8005942:	4306      	orrs	r6, r0
 8005944:	3568      	adds	r5, #104	@ 0x68
 8005946:	e7e9      	b.n	800591c <_fwalk_sglue+0x10>

08005948 <_puts_r>:
 8005948:	6a03      	ldr	r3, [r0, #32]
 800594a:	b570      	push	{r4, r5, r6, lr}
 800594c:	6884      	ldr	r4, [r0, #8]
 800594e:	4605      	mov	r5, r0
 8005950:	460e      	mov	r6, r1
 8005952:	b90b      	cbnz	r3, 8005958 <_puts_r+0x10>
 8005954:	f7ff ffc2 	bl	80058dc <__sinit>
 8005958:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800595a:	07db      	lsls	r3, r3, #31
 800595c:	d405      	bmi.n	800596a <_puts_r+0x22>
 800595e:	89a3      	ldrh	r3, [r4, #12]
 8005960:	0598      	lsls	r0, r3, #22
 8005962:	d402      	bmi.n	800596a <_puts_r+0x22>
 8005964:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005966:	f000 f99e 	bl	8005ca6 <__retarget_lock_acquire_recursive>
 800596a:	89a3      	ldrh	r3, [r4, #12]
 800596c:	0719      	lsls	r1, r3, #28
 800596e:	d502      	bpl.n	8005976 <_puts_r+0x2e>
 8005970:	6923      	ldr	r3, [r4, #16]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d135      	bne.n	80059e2 <_puts_r+0x9a>
 8005976:	4621      	mov	r1, r4
 8005978:	4628      	mov	r0, r5
 800597a:	f000 f8c5 	bl	8005b08 <__swsetup_r>
 800597e:	b380      	cbz	r0, 80059e2 <_puts_r+0x9a>
 8005980:	f04f 35ff 	mov.w	r5, #4294967295
 8005984:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005986:	07da      	lsls	r2, r3, #31
 8005988:	d405      	bmi.n	8005996 <_puts_r+0x4e>
 800598a:	89a3      	ldrh	r3, [r4, #12]
 800598c:	059b      	lsls	r3, r3, #22
 800598e:	d402      	bmi.n	8005996 <_puts_r+0x4e>
 8005990:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005992:	f000 f989 	bl	8005ca8 <__retarget_lock_release_recursive>
 8005996:	4628      	mov	r0, r5
 8005998:	bd70      	pop	{r4, r5, r6, pc}
 800599a:	2b00      	cmp	r3, #0
 800599c:	da04      	bge.n	80059a8 <_puts_r+0x60>
 800599e:	69a2      	ldr	r2, [r4, #24]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	dc17      	bgt.n	80059d4 <_puts_r+0x8c>
 80059a4:	290a      	cmp	r1, #10
 80059a6:	d015      	beq.n	80059d4 <_puts_r+0x8c>
 80059a8:	6823      	ldr	r3, [r4, #0]
 80059aa:	1c5a      	adds	r2, r3, #1
 80059ac:	6022      	str	r2, [r4, #0]
 80059ae:	7019      	strb	r1, [r3, #0]
 80059b0:	68a3      	ldr	r3, [r4, #8]
 80059b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80059b6:	3b01      	subs	r3, #1
 80059b8:	60a3      	str	r3, [r4, #8]
 80059ba:	2900      	cmp	r1, #0
 80059bc:	d1ed      	bne.n	800599a <_puts_r+0x52>
 80059be:	2b00      	cmp	r3, #0
 80059c0:	da11      	bge.n	80059e6 <_puts_r+0x9e>
 80059c2:	4622      	mov	r2, r4
 80059c4:	210a      	movs	r1, #10
 80059c6:	4628      	mov	r0, r5
 80059c8:	f000 f85f 	bl	8005a8a <__swbuf_r>
 80059cc:	3001      	adds	r0, #1
 80059ce:	d0d7      	beq.n	8005980 <_puts_r+0x38>
 80059d0:	250a      	movs	r5, #10
 80059d2:	e7d7      	b.n	8005984 <_puts_r+0x3c>
 80059d4:	4622      	mov	r2, r4
 80059d6:	4628      	mov	r0, r5
 80059d8:	f000 f857 	bl	8005a8a <__swbuf_r>
 80059dc:	3001      	adds	r0, #1
 80059de:	d1e7      	bne.n	80059b0 <_puts_r+0x68>
 80059e0:	e7ce      	b.n	8005980 <_puts_r+0x38>
 80059e2:	3e01      	subs	r6, #1
 80059e4:	e7e4      	b.n	80059b0 <_puts_r+0x68>
 80059e6:	6823      	ldr	r3, [r4, #0]
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	6022      	str	r2, [r4, #0]
 80059ec:	220a      	movs	r2, #10
 80059ee:	701a      	strb	r2, [r3, #0]
 80059f0:	e7ee      	b.n	80059d0 <_puts_r+0x88>
	...

080059f4 <puts>:
 80059f4:	4b02      	ldr	r3, [pc, #8]	@ (8005a00 <puts+0xc>)
 80059f6:	4601      	mov	r1, r0
 80059f8:	6818      	ldr	r0, [r3, #0]
 80059fa:	f7ff bfa5 	b.w	8005948 <_puts_r>
 80059fe:	bf00      	nop
 8005a00:	20000018 	.word	0x20000018

08005a04 <__sread>:
 8005a04:	b510      	push	{r4, lr}
 8005a06:	460c      	mov	r4, r1
 8005a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a0c:	f000 f8fc 	bl	8005c08 <_read_r>
 8005a10:	2800      	cmp	r0, #0
 8005a12:	bfab      	itete	ge
 8005a14:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005a16:	89a3      	ldrhlt	r3, [r4, #12]
 8005a18:	181b      	addge	r3, r3, r0
 8005a1a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005a1e:	bfac      	ite	ge
 8005a20:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005a22:	81a3      	strhlt	r3, [r4, #12]
 8005a24:	bd10      	pop	{r4, pc}

08005a26 <__swrite>:
 8005a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a2a:	461f      	mov	r7, r3
 8005a2c:	898b      	ldrh	r3, [r1, #12]
 8005a2e:	05db      	lsls	r3, r3, #23
 8005a30:	4605      	mov	r5, r0
 8005a32:	460c      	mov	r4, r1
 8005a34:	4616      	mov	r6, r2
 8005a36:	d505      	bpl.n	8005a44 <__swrite+0x1e>
 8005a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f000 f8d0 	bl	8005be4 <_lseek_r>
 8005a44:	89a3      	ldrh	r3, [r4, #12]
 8005a46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a4e:	81a3      	strh	r3, [r4, #12]
 8005a50:	4632      	mov	r2, r6
 8005a52:	463b      	mov	r3, r7
 8005a54:	4628      	mov	r0, r5
 8005a56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a5a:	f000 b8e7 	b.w	8005c2c <_write_r>

08005a5e <__sseek>:
 8005a5e:	b510      	push	{r4, lr}
 8005a60:	460c      	mov	r4, r1
 8005a62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a66:	f000 f8bd 	bl	8005be4 <_lseek_r>
 8005a6a:	1c43      	adds	r3, r0, #1
 8005a6c:	89a3      	ldrh	r3, [r4, #12]
 8005a6e:	bf15      	itete	ne
 8005a70:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a72:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a76:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a7a:	81a3      	strheq	r3, [r4, #12]
 8005a7c:	bf18      	it	ne
 8005a7e:	81a3      	strhne	r3, [r4, #12]
 8005a80:	bd10      	pop	{r4, pc}

08005a82 <__sclose>:
 8005a82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a86:	f000 b89d 	b.w	8005bc4 <_close_r>

08005a8a <__swbuf_r>:
 8005a8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a8c:	460e      	mov	r6, r1
 8005a8e:	4614      	mov	r4, r2
 8005a90:	4605      	mov	r5, r0
 8005a92:	b118      	cbz	r0, 8005a9c <__swbuf_r+0x12>
 8005a94:	6a03      	ldr	r3, [r0, #32]
 8005a96:	b90b      	cbnz	r3, 8005a9c <__swbuf_r+0x12>
 8005a98:	f7ff ff20 	bl	80058dc <__sinit>
 8005a9c:	69a3      	ldr	r3, [r4, #24]
 8005a9e:	60a3      	str	r3, [r4, #8]
 8005aa0:	89a3      	ldrh	r3, [r4, #12]
 8005aa2:	071a      	lsls	r2, r3, #28
 8005aa4:	d501      	bpl.n	8005aaa <__swbuf_r+0x20>
 8005aa6:	6923      	ldr	r3, [r4, #16]
 8005aa8:	b943      	cbnz	r3, 8005abc <__swbuf_r+0x32>
 8005aaa:	4621      	mov	r1, r4
 8005aac:	4628      	mov	r0, r5
 8005aae:	f000 f82b 	bl	8005b08 <__swsetup_r>
 8005ab2:	b118      	cbz	r0, 8005abc <__swbuf_r+0x32>
 8005ab4:	f04f 37ff 	mov.w	r7, #4294967295
 8005ab8:	4638      	mov	r0, r7
 8005aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005abc:	6823      	ldr	r3, [r4, #0]
 8005abe:	6922      	ldr	r2, [r4, #16]
 8005ac0:	1a98      	subs	r0, r3, r2
 8005ac2:	6963      	ldr	r3, [r4, #20]
 8005ac4:	b2f6      	uxtb	r6, r6
 8005ac6:	4283      	cmp	r3, r0
 8005ac8:	4637      	mov	r7, r6
 8005aca:	dc05      	bgt.n	8005ad8 <__swbuf_r+0x4e>
 8005acc:	4621      	mov	r1, r4
 8005ace:	4628      	mov	r0, r5
 8005ad0:	f000 fa68 	bl	8005fa4 <_fflush_r>
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	d1ed      	bne.n	8005ab4 <__swbuf_r+0x2a>
 8005ad8:	68a3      	ldr	r3, [r4, #8]
 8005ada:	3b01      	subs	r3, #1
 8005adc:	60a3      	str	r3, [r4, #8]
 8005ade:	6823      	ldr	r3, [r4, #0]
 8005ae0:	1c5a      	adds	r2, r3, #1
 8005ae2:	6022      	str	r2, [r4, #0]
 8005ae4:	701e      	strb	r6, [r3, #0]
 8005ae6:	6962      	ldr	r2, [r4, #20]
 8005ae8:	1c43      	adds	r3, r0, #1
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d004      	beq.n	8005af8 <__swbuf_r+0x6e>
 8005aee:	89a3      	ldrh	r3, [r4, #12]
 8005af0:	07db      	lsls	r3, r3, #31
 8005af2:	d5e1      	bpl.n	8005ab8 <__swbuf_r+0x2e>
 8005af4:	2e0a      	cmp	r6, #10
 8005af6:	d1df      	bne.n	8005ab8 <__swbuf_r+0x2e>
 8005af8:	4621      	mov	r1, r4
 8005afa:	4628      	mov	r0, r5
 8005afc:	f000 fa52 	bl	8005fa4 <_fflush_r>
 8005b00:	2800      	cmp	r0, #0
 8005b02:	d0d9      	beq.n	8005ab8 <__swbuf_r+0x2e>
 8005b04:	e7d6      	b.n	8005ab4 <__swbuf_r+0x2a>
	...

08005b08 <__swsetup_r>:
 8005b08:	b538      	push	{r3, r4, r5, lr}
 8005b0a:	4b29      	ldr	r3, [pc, #164]	@ (8005bb0 <__swsetup_r+0xa8>)
 8005b0c:	4605      	mov	r5, r0
 8005b0e:	6818      	ldr	r0, [r3, #0]
 8005b10:	460c      	mov	r4, r1
 8005b12:	b118      	cbz	r0, 8005b1c <__swsetup_r+0x14>
 8005b14:	6a03      	ldr	r3, [r0, #32]
 8005b16:	b90b      	cbnz	r3, 8005b1c <__swsetup_r+0x14>
 8005b18:	f7ff fee0 	bl	80058dc <__sinit>
 8005b1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b20:	0719      	lsls	r1, r3, #28
 8005b22:	d422      	bmi.n	8005b6a <__swsetup_r+0x62>
 8005b24:	06da      	lsls	r2, r3, #27
 8005b26:	d407      	bmi.n	8005b38 <__swsetup_r+0x30>
 8005b28:	2209      	movs	r2, #9
 8005b2a:	602a      	str	r2, [r5, #0]
 8005b2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b30:	81a3      	strh	r3, [r4, #12]
 8005b32:	f04f 30ff 	mov.w	r0, #4294967295
 8005b36:	e033      	b.n	8005ba0 <__swsetup_r+0x98>
 8005b38:	0758      	lsls	r0, r3, #29
 8005b3a:	d512      	bpl.n	8005b62 <__swsetup_r+0x5a>
 8005b3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b3e:	b141      	cbz	r1, 8005b52 <__swsetup_r+0x4a>
 8005b40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b44:	4299      	cmp	r1, r3
 8005b46:	d002      	beq.n	8005b4e <__swsetup_r+0x46>
 8005b48:	4628      	mov	r0, r5
 8005b4a:	f000 f8af 	bl	8005cac <_free_r>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b52:	89a3      	ldrh	r3, [r4, #12]
 8005b54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005b58:	81a3      	strh	r3, [r4, #12]
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	6063      	str	r3, [r4, #4]
 8005b5e:	6923      	ldr	r3, [r4, #16]
 8005b60:	6023      	str	r3, [r4, #0]
 8005b62:	89a3      	ldrh	r3, [r4, #12]
 8005b64:	f043 0308 	orr.w	r3, r3, #8
 8005b68:	81a3      	strh	r3, [r4, #12]
 8005b6a:	6923      	ldr	r3, [r4, #16]
 8005b6c:	b94b      	cbnz	r3, 8005b82 <__swsetup_r+0x7a>
 8005b6e:	89a3      	ldrh	r3, [r4, #12]
 8005b70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005b74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b78:	d003      	beq.n	8005b82 <__swsetup_r+0x7a>
 8005b7a:	4621      	mov	r1, r4
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	f000 fa5f 	bl	8006040 <__smakebuf_r>
 8005b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b86:	f013 0201 	ands.w	r2, r3, #1
 8005b8a:	d00a      	beq.n	8005ba2 <__swsetup_r+0x9a>
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	60a2      	str	r2, [r4, #8]
 8005b90:	6962      	ldr	r2, [r4, #20]
 8005b92:	4252      	negs	r2, r2
 8005b94:	61a2      	str	r2, [r4, #24]
 8005b96:	6922      	ldr	r2, [r4, #16]
 8005b98:	b942      	cbnz	r2, 8005bac <__swsetup_r+0xa4>
 8005b9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005b9e:	d1c5      	bne.n	8005b2c <__swsetup_r+0x24>
 8005ba0:	bd38      	pop	{r3, r4, r5, pc}
 8005ba2:	0799      	lsls	r1, r3, #30
 8005ba4:	bf58      	it	pl
 8005ba6:	6962      	ldrpl	r2, [r4, #20]
 8005ba8:	60a2      	str	r2, [r4, #8]
 8005baa:	e7f4      	b.n	8005b96 <__swsetup_r+0x8e>
 8005bac:	2000      	movs	r0, #0
 8005bae:	e7f7      	b.n	8005ba0 <__swsetup_r+0x98>
 8005bb0:	20000018 	.word	0x20000018

08005bb4 <memset>:
 8005bb4:	4402      	add	r2, r0
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d100      	bne.n	8005bbe <memset+0xa>
 8005bbc:	4770      	bx	lr
 8005bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8005bc2:	e7f9      	b.n	8005bb8 <memset+0x4>

08005bc4 <_close_r>:
 8005bc4:	b538      	push	{r3, r4, r5, lr}
 8005bc6:	4d06      	ldr	r5, [pc, #24]	@ (8005be0 <_close_r+0x1c>)
 8005bc8:	2300      	movs	r3, #0
 8005bca:	4604      	mov	r4, r0
 8005bcc:	4608      	mov	r0, r1
 8005bce:	602b      	str	r3, [r5, #0]
 8005bd0:	f7fa ffa8 	bl	8000b24 <_close>
 8005bd4:	1c43      	adds	r3, r0, #1
 8005bd6:	d102      	bne.n	8005bde <_close_r+0x1a>
 8005bd8:	682b      	ldr	r3, [r5, #0]
 8005bda:	b103      	cbz	r3, 8005bde <_close_r+0x1a>
 8005bdc:	6023      	str	r3, [r4, #0]
 8005bde:	bd38      	pop	{r3, r4, r5, pc}
 8005be0:	200004bc 	.word	0x200004bc

08005be4 <_lseek_r>:
 8005be4:	b538      	push	{r3, r4, r5, lr}
 8005be6:	4d07      	ldr	r5, [pc, #28]	@ (8005c04 <_lseek_r+0x20>)
 8005be8:	4604      	mov	r4, r0
 8005bea:	4608      	mov	r0, r1
 8005bec:	4611      	mov	r1, r2
 8005bee:	2200      	movs	r2, #0
 8005bf0:	602a      	str	r2, [r5, #0]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	f7fa ffbd 	bl	8000b72 <_lseek>
 8005bf8:	1c43      	adds	r3, r0, #1
 8005bfa:	d102      	bne.n	8005c02 <_lseek_r+0x1e>
 8005bfc:	682b      	ldr	r3, [r5, #0]
 8005bfe:	b103      	cbz	r3, 8005c02 <_lseek_r+0x1e>
 8005c00:	6023      	str	r3, [r4, #0]
 8005c02:	bd38      	pop	{r3, r4, r5, pc}
 8005c04:	200004bc 	.word	0x200004bc

08005c08 <_read_r>:
 8005c08:	b538      	push	{r3, r4, r5, lr}
 8005c0a:	4d07      	ldr	r5, [pc, #28]	@ (8005c28 <_read_r+0x20>)
 8005c0c:	4604      	mov	r4, r0
 8005c0e:	4608      	mov	r0, r1
 8005c10:	4611      	mov	r1, r2
 8005c12:	2200      	movs	r2, #0
 8005c14:	602a      	str	r2, [r5, #0]
 8005c16:	461a      	mov	r2, r3
 8005c18:	f7fa ff42 	bl	8000aa0 <_read>
 8005c1c:	1c43      	adds	r3, r0, #1
 8005c1e:	d102      	bne.n	8005c26 <_read_r+0x1e>
 8005c20:	682b      	ldr	r3, [r5, #0]
 8005c22:	b103      	cbz	r3, 8005c26 <_read_r+0x1e>
 8005c24:	6023      	str	r3, [r4, #0]
 8005c26:	bd38      	pop	{r3, r4, r5, pc}
 8005c28:	200004bc 	.word	0x200004bc

08005c2c <_write_r>:
 8005c2c:	b538      	push	{r3, r4, r5, lr}
 8005c2e:	4d07      	ldr	r5, [pc, #28]	@ (8005c4c <_write_r+0x20>)
 8005c30:	4604      	mov	r4, r0
 8005c32:	4608      	mov	r0, r1
 8005c34:	4611      	mov	r1, r2
 8005c36:	2200      	movs	r2, #0
 8005c38:	602a      	str	r2, [r5, #0]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	f7fa ff56 	bl	8000aec <_write>
 8005c40:	1c43      	adds	r3, r0, #1
 8005c42:	d102      	bne.n	8005c4a <_write_r+0x1e>
 8005c44:	682b      	ldr	r3, [r5, #0]
 8005c46:	b103      	cbz	r3, 8005c4a <_write_r+0x1e>
 8005c48:	6023      	str	r3, [r4, #0]
 8005c4a:	bd38      	pop	{r3, r4, r5, pc}
 8005c4c:	200004bc 	.word	0x200004bc

08005c50 <__errno>:
 8005c50:	4b01      	ldr	r3, [pc, #4]	@ (8005c58 <__errno+0x8>)
 8005c52:	6818      	ldr	r0, [r3, #0]
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	20000018 	.word	0x20000018

08005c5c <__libc_init_array>:
 8005c5c:	b570      	push	{r4, r5, r6, lr}
 8005c5e:	4d0d      	ldr	r5, [pc, #52]	@ (8005c94 <__libc_init_array+0x38>)
 8005c60:	4c0d      	ldr	r4, [pc, #52]	@ (8005c98 <__libc_init_array+0x3c>)
 8005c62:	1b64      	subs	r4, r4, r5
 8005c64:	10a4      	asrs	r4, r4, #2
 8005c66:	2600      	movs	r6, #0
 8005c68:	42a6      	cmp	r6, r4
 8005c6a:	d109      	bne.n	8005c80 <__libc_init_array+0x24>
 8005c6c:	4d0b      	ldr	r5, [pc, #44]	@ (8005c9c <__libc_init_array+0x40>)
 8005c6e:	4c0c      	ldr	r4, [pc, #48]	@ (8005ca0 <__libc_init_array+0x44>)
 8005c70:	f000 fa54 	bl	800611c <_init>
 8005c74:	1b64      	subs	r4, r4, r5
 8005c76:	10a4      	asrs	r4, r4, #2
 8005c78:	2600      	movs	r6, #0
 8005c7a:	42a6      	cmp	r6, r4
 8005c7c:	d105      	bne.n	8005c8a <__libc_init_array+0x2e>
 8005c7e:	bd70      	pop	{r4, r5, r6, pc}
 8005c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c84:	4798      	blx	r3
 8005c86:	3601      	adds	r6, #1
 8005c88:	e7ee      	b.n	8005c68 <__libc_init_array+0xc>
 8005c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c8e:	4798      	blx	r3
 8005c90:	3601      	adds	r6, #1
 8005c92:	e7f2      	b.n	8005c7a <__libc_init_array+0x1e>
 8005c94:	0800618c 	.word	0x0800618c
 8005c98:	0800618c 	.word	0x0800618c
 8005c9c:	0800618c 	.word	0x0800618c
 8005ca0:	08006190 	.word	0x08006190

08005ca4 <__retarget_lock_init_recursive>:
 8005ca4:	4770      	bx	lr

08005ca6 <__retarget_lock_acquire_recursive>:
 8005ca6:	4770      	bx	lr

08005ca8 <__retarget_lock_release_recursive>:
 8005ca8:	4770      	bx	lr
	...

08005cac <_free_r>:
 8005cac:	b538      	push	{r3, r4, r5, lr}
 8005cae:	4605      	mov	r5, r0
 8005cb0:	2900      	cmp	r1, #0
 8005cb2:	d041      	beq.n	8005d38 <_free_r+0x8c>
 8005cb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cb8:	1f0c      	subs	r4, r1, #4
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	bfb8      	it	lt
 8005cbe:	18e4      	addlt	r4, r4, r3
 8005cc0:	f000 f8e0 	bl	8005e84 <__malloc_lock>
 8005cc4:	4a1d      	ldr	r2, [pc, #116]	@ (8005d3c <_free_r+0x90>)
 8005cc6:	6813      	ldr	r3, [r2, #0]
 8005cc8:	b933      	cbnz	r3, 8005cd8 <_free_r+0x2c>
 8005cca:	6063      	str	r3, [r4, #4]
 8005ccc:	6014      	str	r4, [r2, #0]
 8005cce:	4628      	mov	r0, r5
 8005cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cd4:	f000 b8dc 	b.w	8005e90 <__malloc_unlock>
 8005cd8:	42a3      	cmp	r3, r4
 8005cda:	d908      	bls.n	8005cee <_free_r+0x42>
 8005cdc:	6820      	ldr	r0, [r4, #0]
 8005cde:	1821      	adds	r1, r4, r0
 8005ce0:	428b      	cmp	r3, r1
 8005ce2:	bf01      	itttt	eq
 8005ce4:	6819      	ldreq	r1, [r3, #0]
 8005ce6:	685b      	ldreq	r3, [r3, #4]
 8005ce8:	1809      	addeq	r1, r1, r0
 8005cea:	6021      	streq	r1, [r4, #0]
 8005cec:	e7ed      	b.n	8005cca <_free_r+0x1e>
 8005cee:	461a      	mov	r2, r3
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	b10b      	cbz	r3, 8005cf8 <_free_r+0x4c>
 8005cf4:	42a3      	cmp	r3, r4
 8005cf6:	d9fa      	bls.n	8005cee <_free_r+0x42>
 8005cf8:	6811      	ldr	r1, [r2, #0]
 8005cfa:	1850      	adds	r0, r2, r1
 8005cfc:	42a0      	cmp	r0, r4
 8005cfe:	d10b      	bne.n	8005d18 <_free_r+0x6c>
 8005d00:	6820      	ldr	r0, [r4, #0]
 8005d02:	4401      	add	r1, r0
 8005d04:	1850      	adds	r0, r2, r1
 8005d06:	4283      	cmp	r3, r0
 8005d08:	6011      	str	r1, [r2, #0]
 8005d0a:	d1e0      	bne.n	8005cce <_free_r+0x22>
 8005d0c:	6818      	ldr	r0, [r3, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	6053      	str	r3, [r2, #4]
 8005d12:	4408      	add	r0, r1
 8005d14:	6010      	str	r0, [r2, #0]
 8005d16:	e7da      	b.n	8005cce <_free_r+0x22>
 8005d18:	d902      	bls.n	8005d20 <_free_r+0x74>
 8005d1a:	230c      	movs	r3, #12
 8005d1c:	602b      	str	r3, [r5, #0]
 8005d1e:	e7d6      	b.n	8005cce <_free_r+0x22>
 8005d20:	6820      	ldr	r0, [r4, #0]
 8005d22:	1821      	adds	r1, r4, r0
 8005d24:	428b      	cmp	r3, r1
 8005d26:	bf04      	itt	eq
 8005d28:	6819      	ldreq	r1, [r3, #0]
 8005d2a:	685b      	ldreq	r3, [r3, #4]
 8005d2c:	6063      	str	r3, [r4, #4]
 8005d2e:	bf04      	itt	eq
 8005d30:	1809      	addeq	r1, r1, r0
 8005d32:	6021      	streq	r1, [r4, #0]
 8005d34:	6054      	str	r4, [r2, #4]
 8005d36:	e7ca      	b.n	8005cce <_free_r+0x22>
 8005d38:	bd38      	pop	{r3, r4, r5, pc}
 8005d3a:	bf00      	nop
 8005d3c:	200004c8 	.word	0x200004c8

08005d40 <sbrk_aligned>:
 8005d40:	b570      	push	{r4, r5, r6, lr}
 8005d42:	4e0f      	ldr	r6, [pc, #60]	@ (8005d80 <sbrk_aligned+0x40>)
 8005d44:	460c      	mov	r4, r1
 8005d46:	6831      	ldr	r1, [r6, #0]
 8005d48:	4605      	mov	r5, r0
 8005d4a:	b911      	cbnz	r1, 8005d52 <sbrk_aligned+0x12>
 8005d4c:	f000 f9d6 	bl	80060fc <_sbrk_r>
 8005d50:	6030      	str	r0, [r6, #0]
 8005d52:	4621      	mov	r1, r4
 8005d54:	4628      	mov	r0, r5
 8005d56:	f000 f9d1 	bl	80060fc <_sbrk_r>
 8005d5a:	1c43      	adds	r3, r0, #1
 8005d5c:	d103      	bne.n	8005d66 <sbrk_aligned+0x26>
 8005d5e:	f04f 34ff 	mov.w	r4, #4294967295
 8005d62:	4620      	mov	r0, r4
 8005d64:	bd70      	pop	{r4, r5, r6, pc}
 8005d66:	1cc4      	adds	r4, r0, #3
 8005d68:	f024 0403 	bic.w	r4, r4, #3
 8005d6c:	42a0      	cmp	r0, r4
 8005d6e:	d0f8      	beq.n	8005d62 <sbrk_aligned+0x22>
 8005d70:	1a21      	subs	r1, r4, r0
 8005d72:	4628      	mov	r0, r5
 8005d74:	f000 f9c2 	bl	80060fc <_sbrk_r>
 8005d78:	3001      	adds	r0, #1
 8005d7a:	d1f2      	bne.n	8005d62 <sbrk_aligned+0x22>
 8005d7c:	e7ef      	b.n	8005d5e <sbrk_aligned+0x1e>
 8005d7e:	bf00      	nop
 8005d80:	200004c4 	.word	0x200004c4

08005d84 <_malloc_r>:
 8005d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d88:	1ccd      	adds	r5, r1, #3
 8005d8a:	f025 0503 	bic.w	r5, r5, #3
 8005d8e:	3508      	adds	r5, #8
 8005d90:	2d0c      	cmp	r5, #12
 8005d92:	bf38      	it	cc
 8005d94:	250c      	movcc	r5, #12
 8005d96:	2d00      	cmp	r5, #0
 8005d98:	4606      	mov	r6, r0
 8005d9a:	db01      	blt.n	8005da0 <_malloc_r+0x1c>
 8005d9c:	42a9      	cmp	r1, r5
 8005d9e:	d904      	bls.n	8005daa <_malloc_r+0x26>
 8005da0:	230c      	movs	r3, #12
 8005da2:	6033      	str	r3, [r6, #0]
 8005da4:	2000      	movs	r0, #0
 8005da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005daa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005e80 <_malloc_r+0xfc>
 8005dae:	f000 f869 	bl	8005e84 <__malloc_lock>
 8005db2:	f8d8 3000 	ldr.w	r3, [r8]
 8005db6:	461c      	mov	r4, r3
 8005db8:	bb44      	cbnz	r4, 8005e0c <_malloc_r+0x88>
 8005dba:	4629      	mov	r1, r5
 8005dbc:	4630      	mov	r0, r6
 8005dbe:	f7ff ffbf 	bl	8005d40 <sbrk_aligned>
 8005dc2:	1c43      	adds	r3, r0, #1
 8005dc4:	4604      	mov	r4, r0
 8005dc6:	d158      	bne.n	8005e7a <_malloc_r+0xf6>
 8005dc8:	f8d8 4000 	ldr.w	r4, [r8]
 8005dcc:	4627      	mov	r7, r4
 8005dce:	2f00      	cmp	r7, #0
 8005dd0:	d143      	bne.n	8005e5a <_malloc_r+0xd6>
 8005dd2:	2c00      	cmp	r4, #0
 8005dd4:	d04b      	beq.n	8005e6e <_malloc_r+0xea>
 8005dd6:	6823      	ldr	r3, [r4, #0]
 8005dd8:	4639      	mov	r1, r7
 8005dda:	4630      	mov	r0, r6
 8005ddc:	eb04 0903 	add.w	r9, r4, r3
 8005de0:	f000 f98c 	bl	80060fc <_sbrk_r>
 8005de4:	4581      	cmp	r9, r0
 8005de6:	d142      	bne.n	8005e6e <_malloc_r+0xea>
 8005de8:	6821      	ldr	r1, [r4, #0]
 8005dea:	1a6d      	subs	r5, r5, r1
 8005dec:	4629      	mov	r1, r5
 8005dee:	4630      	mov	r0, r6
 8005df0:	f7ff ffa6 	bl	8005d40 <sbrk_aligned>
 8005df4:	3001      	adds	r0, #1
 8005df6:	d03a      	beq.n	8005e6e <_malloc_r+0xea>
 8005df8:	6823      	ldr	r3, [r4, #0]
 8005dfa:	442b      	add	r3, r5
 8005dfc:	6023      	str	r3, [r4, #0]
 8005dfe:	f8d8 3000 	ldr.w	r3, [r8]
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	bb62      	cbnz	r2, 8005e60 <_malloc_r+0xdc>
 8005e06:	f8c8 7000 	str.w	r7, [r8]
 8005e0a:	e00f      	b.n	8005e2c <_malloc_r+0xa8>
 8005e0c:	6822      	ldr	r2, [r4, #0]
 8005e0e:	1b52      	subs	r2, r2, r5
 8005e10:	d420      	bmi.n	8005e54 <_malloc_r+0xd0>
 8005e12:	2a0b      	cmp	r2, #11
 8005e14:	d917      	bls.n	8005e46 <_malloc_r+0xc2>
 8005e16:	1961      	adds	r1, r4, r5
 8005e18:	42a3      	cmp	r3, r4
 8005e1a:	6025      	str	r5, [r4, #0]
 8005e1c:	bf18      	it	ne
 8005e1e:	6059      	strne	r1, [r3, #4]
 8005e20:	6863      	ldr	r3, [r4, #4]
 8005e22:	bf08      	it	eq
 8005e24:	f8c8 1000 	streq.w	r1, [r8]
 8005e28:	5162      	str	r2, [r4, r5]
 8005e2a:	604b      	str	r3, [r1, #4]
 8005e2c:	4630      	mov	r0, r6
 8005e2e:	f000 f82f 	bl	8005e90 <__malloc_unlock>
 8005e32:	f104 000b 	add.w	r0, r4, #11
 8005e36:	1d23      	adds	r3, r4, #4
 8005e38:	f020 0007 	bic.w	r0, r0, #7
 8005e3c:	1ac2      	subs	r2, r0, r3
 8005e3e:	bf1c      	itt	ne
 8005e40:	1a1b      	subne	r3, r3, r0
 8005e42:	50a3      	strne	r3, [r4, r2]
 8005e44:	e7af      	b.n	8005da6 <_malloc_r+0x22>
 8005e46:	6862      	ldr	r2, [r4, #4]
 8005e48:	42a3      	cmp	r3, r4
 8005e4a:	bf0c      	ite	eq
 8005e4c:	f8c8 2000 	streq.w	r2, [r8]
 8005e50:	605a      	strne	r2, [r3, #4]
 8005e52:	e7eb      	b.n	8005e2c <_malloc_r+0xa8>
 8005e54:	4623      	mov	r3, r4
 8005e56:	6864      	ldr	r4, [r4, #4]
 8005e58:	e7ae      	b.n	8005db8 <_malloc_r+0x34>
 8005e5a:	463c      	mov	r4, r7
 8005e5c:	687f      	ldr	r7, [r7, #4]
 8005e5e:	e7b6      	b.n	8005dce <_malloc_r+0x4a>
 8005e60:	461a      	mov	r2, r3
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	42a3      	cmp	r3, r4
 8005e66:	d1fb      	bne.n	8005e60 <_malloc_r+0xdc>
 8005e68:	2300      	movs	r3, #0
 8005e6a:	6053      	str	r3, [r2, #4]
 8005e6c:	e7de      	b.n	8005e2c <_malloc_r+0xa8>
 8005e6e:	230c      	movs	r3, #12
 8005e70:	6033      	str	r3, [r6, #0]
 8005e72:	4630      	mov	r0, r6
 8005e74:	f000 f80c 	bl	8005e90 <__malloc_unlock>
 8005e78:	e794      	b.n	8005da4 <_malloc_r+0x20>
 8005e7a:	6005      	str	r5, [r0, #0]
 8005e7c:	e7d6      	b.n	8005e2c <_malloc_r+0xa8>
 8005e7e:	bf00      	nop
 8005e80:	200004c8 	.word	0x200004c8

08005e84 <__malloc_lock>:
 8005e84:	4801      	ldr	r0, [pc, #4]	@ (8005e8c <__malloc_lock+0x8>)
 8005e86:	f7ff bf0e 	b.w	8005ca6 <__retarget_lock_acquire_recursive>
 8005e8a:	bf00      	nop
 8005e8c:	200004c0 	.word	0x200004c0

08005e90 <__malloc_unlock>:
 8005e90:	4801      	ldr	r0, [pc, #4]	@ (8005e98 <__malloc_unlock+0x8>)
 8005e92:	f7ff bf09 	b.w	8005ca8 <__retarget_lock_release_recursive>
 8005e96:	bf00      	nop
 8005e98:	200004c0 	.word	0x200004c0

08005e9c <__sflush_r>:
 8005e9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea4:	0716      	lsls	r6, r2, #28
 8005ea6:	4605      	mov	r5, r0
 8005ea8:	460c      	mov	r4, r1
 8005eaa:	d454      	bmi.n	8005f56 <__sflush_r+0xba>
 8005eac:	684b      	ldr	r3, [r1, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	dc02      	bgt.n	8005eb8 <__sflush_r+0x1c>
 8005eb2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	dd48      	ble.n	8005f4a <__sflush_r+0xae>
 8005eb8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005eba:	2e00      	cmp	r6, #0
 8005ebc:	d045      	beq.n	8005f4a <__sflush_r+0xae>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005ec4:	682f      	ldr	r7, [r5, #0]
 8005ec6:	6a21      	ldr	r1, [r4, #32]
 8005ec8:	602b      	str	r3, [r5, #0]
 8005eca:	d030      	beq.n	8005f2e <__sflush_r+0x92>
 8005ecc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005ece:	89a3      	ldrh	r3, [r4, #12]
 8005ed0:	0759      	lsls	r1, r3, #29
 8005ed2:	d505      	bpl.n	8005ee0 <__sflush_r+0x44>
 8005ed4:	6863      	ldr	r3, [r4, #4]
 8005ed6:	1ad2      	subs	r2, r2, r3
 8005ed8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005eda:	b10b      	cbz	r3, 8005ee0 <__sflush_r+0x44>
 8005edc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005ede:	1ad2      	subs	r2, r2, r3
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ee4:	6a21      	ldr	r1, [r4, #32]
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	47b0      	blx	r6
 8005eea:	1c43      	adds	r3, r0, #1
 8005eec:	89a3      	ldrh	r3, [r4, #12]
 8005eee:	d106      	bne.n	8005efe <__sflush_r+0x62>
 8005ef0:	6829      	ldr	r1, [r5, #0]
 8005ef2:	291d      	cmp	r1, #29
 8005ef4:	d82b      	bhi.n	8005f4e <__sflush_r+0xb2>
 8005ef6:	4a2a      	ldr	r2, [pc, #168]	@ (8005fa0 <__sflush_r+0x104>)
 8005ef8:	410a      	asrs	r2, r1
 8005efa:	07d6      	lsls	r6, r2, #31
 8005efc:	d427      	bmi.n	8005f4e <__sflush_r+0xb2>
 8005efe:	2200      	movs	r2, #0
 8005f00:	6062      	str	r2, [r4, #4]
 8005f02:	04d9      	lsls	r1, r3, #19
 8005f04:	6922      	ldr	r2, [r4, #16]
 8005f06:	6022      	str	r2, [r4, #0]
 8005f08:	d504      	bpl.n	8005f14 <__sflush_r+0x78>
 8005f0a:	1c42      	adds	r2, r0, #1
 8005f0c:	d101      	bne.n	8005f12 <__sflush_r+0x76>
 8005f0e:	682b      	ldr	r3, [r5, #0]
 8005f10:	b903      	cbnz	r3, 8005f14 <__sflush_r+0x78>
 8005f12:	6560      	str	r0, [r4, #84]	@ 0x54
 8005f14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f16:	602f      	str	r7, [r5, #0]
 8005f18:	b1b9      	cbz	r1, 8005f4a <__sflush_r+0xae>
 8005f1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f1e:	4299      	cmp	r1, r3
 8005f20:	d002      	beq.n	8005f28 <__sflush_r+0x8c>
 8005f22:	4628      	mov	r0, r5
 8005f24:	f7ff fec2 	bl	8005cac <_free_r>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f2c:	e00d      	b.n	8005f4a <__sflush_r+0xae>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	4628      	mov	r0, r5
 8005f32:	47b0      	blx	r6
 8005f34:	4602      	mov	r2, r0
 8005f36:	1c50      	adds	r0, r2, #1
 8005f38:	d1c9      	bne.n	8005ece <__sflush_r+0x32>
 8005f3a:	682b      	ldr	r3, [r5, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d0c6      	beq.n	8005ece <__sflush_r+0x32>
 8005f40:	2b1d      	cmp	r3, #29
 8005f42:	d001      	beq.n	8005f48 <__sflush_r+0xac>
 8005f44:	2b16      	cmp	r3, #22
 8005f46:	d11e      	bne.n	8005f86 <__sflush_r+0xea>
 8005f48:	602f      	str	r7, [r5, #0]
 8005f4a:	2000      	movs	r0, #0
 8005f4c:	e022      	b.n	8005f94 <__sflush_r+0xf8>
 8005f4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f52:	b21b      	sxth	r3, r3
 8005f54:	e01b      	b.n	8005f8e <__sflush_r+0xf2>
 8005f56:	690f      	ldr	r7, [r1, #16]
 8005f58:	2f00      	cmp	r7, #0
 8005f5a:	d0f6      	beq.n	8005f4a <__sflush_r+0xae>
 8005f5c:	0793      	lsls	r3, r2, #30
 8005f5e:	680e      	ldr	r6, [r1, #0]
 8005f60:	bf08      	it	eq
 8005f62:	694b      	ldreq	r3, [r1, #20]
 8005f64:	600f      	str	r7, [r1, #0]
 8005f66:	bf18      	it	ne
 8005f68:	2300      	movne	r3, #0
 8005f6a:	eba6 0807 	sub.w	r8, r6, r7
 8005f6e:	608b      	str	r3, [r1, #8]
 8005f70:	f1b8 0f00 	cmp.w	r8, #0
 8005f74:	dde9      	ble.n	8005f4a <__sflush_r+0xae>
 8005f76:	6a21      	ldr	r1, [r4, #32]
 8005f78:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005f7a:	4643      	mov	r3, r8
 8005f7c:	463a      	mov	r2, r7
 8005f7e:	4628      	mov	r0, r5
 8005f80:	47b0      	blx	r6
 8005f82:	2800      	cmp	r0, #0
 8005f84:	dc08      	bgt.n	8005f98 <__sflush_r+0xfc>
 8005f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f8e:	81a3      	strh	r3, [r4, #12]
 8005f90:	f04f 30ff 	mov.w	r0, #4294967295
 8005f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f98:	4407      	add	r7, r0
 8005f9a:	eba8 0800 	sub.w	r8, r8, r0
 8005f9e:	e7e7      	b.n	8005f70 <__sflush_r+0xd4>
 8005fa0:	dfbffffe 	.word	0xdfbffffe

08005fa4 <_fflush_r>:
 8005fa4:	b538      	push	{r3, r4, r5, lr}
 8005fa6:	690b      	ldr	r3, [r1, #16]
 8005fa8:	4605      	mov	r5, r0
 8005faa:	460c      	mov	r4, r1
 8005fac:	b913      	cbnz	r3, 8005fb4 <_fflush_r+0x10>
 8005fae:	2500      	movs	r5, #0
 8005fb0:	4628      	mov	r0, r5
 8005fb2:	bd38      	pop	{r3, r4, r5, pc}
 8005fb4:	b118      	cbz	r0, 8005fbe <_fflush_r+0x1a>
 8005fb6:	6a03      	ldr	r3, [r0, #32]
 8005fb8:	b90b      	cbnz	r3, 8005fbe <_fflush_r+0x1a>
 8005fba:	f7ff fc8f 	bl	80058dc <__sinit>
 8005fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d0f3      	beq.n	8005fae <_fflush_r+0xa>
 8005fc6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005fc8:	07d0      	lsls	r0, r2, #31
 8005fca:	d404      	bmi.n	8005fd6 <_fflush_r+0x32>
 8005fcc:	0599      	lsls	r1, r3, #22
 8005fce:	d402      	bmi.n	8005fd6 <_fflush_r+0x32>
 8005fd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fd2:	f7ff fe68 	bl	8005ca6 <__retarget_lock_acquire_recursive>
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	4621      	mov	r1, r4
 8005fda:	f7ff ff5f 	bl	8005e9c <__sflush_r>
 8005fde:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005fe0:	07da      	lsls	r2, r3, #31
 8005fe2:	4605      	mov	r5, r0
 8005fe4:	d4e4      	bmi.n	8005fb0 <_fflush_r+0xc>
 8005fe6:	89a3      	ldrh	r3, [r4, #12]
 8005fe8:	059b      	lsls	r3, r3, #22
 8005fea:	d4e1      	bmi.n	8005fb0 <_fflush_r+0xc>
 8005fec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fee:	f7ff fe5b 	bl	8005ca8 <__retarget_lock_release_recursive>
 8005ff2:	e7dd      	b.n	8005fb0 <_fflush_r+0xc>

08005ff4 <__swhatbuf_r>:
 8005ff4:	b570      	push	{r4, r5, r6, lr}
 8005ff6:	460c      	mov	r4, r1
 8005ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ffc:	2900      	cmp	r1, #0
 8005ffe:	b096      	sub	sp, #88	@ 0x58
 8006000:	4615      	mov	r5, r2
 8006002:	461e      	mov	r6, r3
 8006004:	da0d      	bge.n	8006022 <__swhatbuf_r+0x2e>
 8006006:	89a3      	ldrh	r3, [r4, #12]
 8006008:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800600c:	f04f 0100 	mov.w	r1, #0
 8006010:	bf14      	ite	ne
 8006012:	2340      	movne	r3, #64	@ 0x40
 8006014:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006018:	2000      	movs	r0, #0
 800601a:	6031      	str	r1, [r6, #0]
 800601c:	602b      	str	r3, [r5, #0]
 800601e:	b016      	add	sp, #88	@ 0x58
 8006020:	bd70      	pop	{r4, r5, r6, pc}
 8006022:	466a      	mov	r2, sp
 8006024:	f000 f848 	bl	80060b8 <_fstat_r>
 8006028:	2800      	cmp	r0, #0
 800602a:	dbec      	blt.n	8006006 <__swhatbuf_r+0x12>
 800602c:	9901      	ldr	r1, [sp, #4]
 800602e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006032:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006036:	4259      	negs	r1, r3
 8006038:	4159      	adcs	r1, r3
 800603a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800603e:	e7eb      	b.n	8006018 <__swhatbuf_r+0x24>

08006040 <__smakebuf_r>:
 8006040:	898b      	ldrh	r3, [r1, #12]
 8006042:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006044:	079d      	lsls	r5, r3, #30
 8006046:	4606      	mov	r6, r0
 8006048:	460c      	mov	r4, r1
 800604a:	d507      	bpl.n	800605c <__smakebuf_r+0x1c>
 800604c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006050:	6023      	str	r3, [r4, #0]
 8006052:	6123      	str	r3, [r4, #16]
 8006054:	2301      	movs	r3, #1
 8006056:	6163      	str	r3, [r4, #20]
 8006058:	b003      	add	sp, #12
 800605a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800605c:	ab01      	add	r3, sp, #4
 800605e:	466a      	mov	r2, sp
 8006060:	f7ff ffc8 	bl	8005ff4 <__swhatbuf_r>
 8006064:	9f00      	ldr	r7, [sp, #0]
 8006066:	4605      	mov	r5, r0
 8006068:	4639      	mov	r1, r7
 800606a:	4630      	mov	r0, r6
 800606c:	f7ff fe8a 	bl	8005d84 <_malloc_r>
 8006070:	b948      	cbnz	r0, 8006086 <__smakebuf_r+0x46>
 8006072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006076:	059a      	lsls	r2, r3, #22
 8006078:	d4ee      	bmi.n	8006058 <__smakebuf_r+0x18>
 800607a:	f023 0303 	bic.w	r3, r3, #3
 800607e:	f043 0302 	orr.w	r3, r3, #2
 8006082:	81a3      	strh	r3, [r4, #12]
 8006084:	e7e2      	b.n	800604c <__smakebuf_r+0xc>
 8006086:	89a3      	ldrh	r3, [r4, #12]
 8006088:	6020      	str	r0, [r4, #0]
 800608a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800608e:	81a3      	strh	r3, [r4, #12]
 8006090:	9b01      	ldr	r3, [sp, #4]
 8006092:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006096:	b15b      	cbz	r3, 80060b0 <__smakebuf_r+0x70>
 8006098:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800609c:	4630      	mov	r0, r6
 800609e:	f000 f81d 	bl	80060dc <_isatty_r>
 80060a2:	b128      	cbz	r0, 80060b0 <__smakebuf_r+0x70>
 80060a4:	89a3      	ldrh	r3, [r4, #12]
 80060a6:	f023 0303 	bic.w	r3, r3, #3
 80060aa:	f043 0301 	orr.w	r3, r3, #1
 80060ae:	81a3      	strh	r3, [r4, #12]
 80060b0:	89a3      	ldrh	r3, [r4, #12]
 80060b2:	431d      	orrs	r5, r3
 80060b4:	81a5      	strh	r5, [r4, #12]
 80060b6:	e7cf      	b.n	8006058 <__smakebuf_r+0x18>

080060b8 <_fstat_r>:
 80060b8:	b538      	push	{r3, r4, r5, lr}
 80060ba:	4d07      	ldr	r5, [pc, #28]	@ (80060d8 <_fstat_r+0x20>)
 80060bc:	2300      	movs	r3, #0
 80060be:	4604      	mov	r4, r0
 80060c0:	4608      	mov	r0, r1
 80060c2:	4611      	mov	r1, r2
 80060c4:	602b      	str	r3, [r5, #0]
 80060c6:	f7fa fd39 	bl	8000b3c <_fstat>
 80060ca:	1c43      	adds	r3, r0, #1
 80060cc:	d102      	bne.n	80060d4 <_fstat_r+0x1c>
 80060ce:	682b      	ldr	r3, [r5, #0]
 80060d0:	b103      	cbz	r3, 80060d4 <_fstat_r+0x1c>
 80060d2:	6023      	str	r3, [r4, #0]
 80060d4:	bd38      	pop	{r3, r4, r5, pc}
 80060d6:	bf00      	nop
 80060d8:	200004bc 	.word	0x200004bc

080060dc <_isatty_r>:
 80060dc:	b538      	push	{r3, r4, r5, lr}
 80060de:	4d06      	ldr	r5, [pc, #24]	@ (80060f8 <_isatty_r+0x1c>)
 80060e0:	2300      	movs	r3, #0
 80060e2:	4604      	mov	r4, r0
 80060e4:	4608      	mov	r0, r1
 80060e6:	602b      	str	r3, [r5, #0]
 80060e8:	f7fa fd38 	bl	8000b5c <_isatty>
 80060ec:	1c43      	adds	r3, r0, #1
 80060ee:	d102      	bne.n	80060f6 <_isatty_r+0x1a>
 80060f0:	682b      	ldr	r3, [r5, #0]
 80060f2:	b103      	cbz	r3, 80060f6 <_isatty_r+0x1a>
 80060f4:	6023      	str	r3, [r4, #0]
 80060f6:	bd38      	pop	{r3, r4, r5, pc}
 80060f8:	200004bc 	.word	0x200004bc

080060fc <_sbrk_r>:
 80060fc:	b538      	push	{r3, r4, r5, lr}
 80060fe:	4d06      	ldr	r5, [pc, #24]	@ (8006118 <_sbrk_r+0x1c>)
 8006100:	2300      	movs	r3, #0
 8006102:	4604      	mov	r4, r0
 8006104:	4608      	mov	r0, r1
 8006106:	602b      	str	r3, [r5, #0]
 8006108:	f7fa fd40 	bl	8000b8c <_sbrk>
 800610c:	1c43      	adds	r3, r0, #1
 800610e:	d102      	bne.n	8006116 <_sbrk_r+0x1a>
 8006110:	682b      	ldr	r3, [r5, #0]
 8006112:	b103      	cbz	r3, 8006116 <_sbrk_r+0x1a>
 8006114:	6023      	str	r3, [r4, #0]
 8006116:	bd38      	pop	{r3, r4, r5, pc}
 8006118:	200004bc 	.word	0x200004bc

0800611c <_init>:
 800611c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800611e:	bf00      	nop
 8006120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006122:	bc08      	pop	{r3}
 8006124:	469e      	mov	lr, r3
 8006126:	4770      	bx	lr

08006128 <_fini>:
 8006128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800612a:	bf00      	nop
 800612c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800612e:	bc08      	pop	{r3}
 8006130:	469e      	mov	lr, r3
 8006132:	4770      	bx	lr

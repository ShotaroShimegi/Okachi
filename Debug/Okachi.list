
Okachi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000493c  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004ac8  08004ac8  00005ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b10  08004b10  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b10  08004b10  00005b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b18  08004b18  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b18  08004b18  00005b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b1c  08004b1c  00005b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004b20  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  2000000c  08004b2c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08004b2c  000061b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ac3  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002548  00000000  00000000  00017aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  0001a048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf4  00000000  00000000  0001b0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021df7  00000000  00000000  0001bde4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d69  00000000  00000000  0003dbdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5fac  00000000  00000000  00051944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001278f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004628  00000000  00000000  00127934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0012bf5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004ab0 	.word	0x08004ab0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08004ab0 	.word	0x08004ab0

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96a 	b.w	80004b8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	460c      	mov	r4, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14e      	bne.n	80002a6 <__udivmoddi4+0xaa>
 8000208:	4694      	mov	ip, r2
 800020a:	458c      	cmp	ip, r1
 800020c:	4686      	mov	lr, r0
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	d962      	bls.n	80002da <__udivmoddi4+0xde>
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0320 	rsb	r3, r2, #32
 800021a:	4091      	lsls	r1, r2
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	fa0c fc02 	lsl.w	ip, ip, r2
 8000224:	4319      	orrs	r1, r3
 8000226:	fa00 fe02 	lsl.w	lr, r0, r2
 800022a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022e:	fa1f f68c 	uxth.w	r6, ip
 8000232:	fbb1 f4f7 	udiv	r4, r1, r7
 8000236:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023a:	fb07 1114 	mls	r1, r7, r4, r1
 800023e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000242:	fb04 f106 	mul.w	r1, r4, r6
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000252:	f080 8112 	bcs.w	800047a <__udivmoddi4+0x27e>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 810f 	bls.w	800047a <__udivmoddi4+0x27e>
 800025c:	3c02      	subs	r4, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a59      	subs	r1, r3, r1
 8000262:	fa1f f38e 	uxth.w	r3, lr
 8000266:	fbb1 f0f7 	udiv	r0, r1, r7
 800026a:	fb07 1110 	mls	r1, r7, r0, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb00 f606 	mul.w	r6, r0, r6
 8000276:	429e      	cmp	r6, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x94>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000282:	f080 80fc 	bcs.w	800047e <__udivmoddi4+0x282>
 8000286:	429e      	cmp	r6, r3
 8000288:	f240 80f9 	bls.w	800047e <__udivmoddi4+0x282>
 800028c:	4463      	add	r3, ip
 800028e:	3802      	subs	r0, #2
 8000290:	1b9b      	subs	r3, r3, r6
 8000292:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa6>
 800029a:	40d3      	lsrs	r3, r2
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xba>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb4>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x150>
 80002be:	42a3      	cmp	r3, r4
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xcc>
 80002c2:	4290      	cmp	r0, r2
 80002c4:	f0c0 80f0 	bcc.w	80004a8 <__udivmoddi4+0x2ac>
 80002c8:	1a86      	subs	r6, r0, r2
 80002ca:	eb64 0303 	sbc.w	r3, r4, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	2d00      	cmp	r5, #0
 80002d2:	d0e6      	beq.n	80002a2 <__udivmoddi4+0xa6>
 80002d4:	e9c5 6300 	strd	r6, r3, [r5]
 80002d8:	e7e3      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002da:	2a00      	cmp	r2, #0
 80002dc:	f040 8090 	bne.w	8000400 <__udivmoddi4+0x204>
 80002e0:	eba1 040c 	sub.w	r4, r1, ip
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	fa1f f78c 	uxth.w	r7, ip
 80002ec:	2101      	movs	r1, #1
 80002ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	fb08 4416 	mls	r4, r8, r6, r4
 80002fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fe:	fb07 f006 	mul.w	r0, r7, r6
 8000302:	4298      	cmp	r0, r3
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0x11c>
 8000306:	eb1c 0303 	adds.w	r3, ip, r3
 800030a:	f106 34ff 	add.w	r4, r6, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x11a>
 8000310:	4298      	cmp	r0, r3
 8000312:	f200 80cd 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 8000316:	4626      	mov	r6, r4
 8000318:	1a1c      	subs	r4, r3, r0
 800031a:	fa1f f38e 	uxth.w	r3, lr
 800031e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000322:	fb08 4410 	mls	r4, r8, r0, r4
 8000326:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032a:	fb00 f707 	mul.w	r7, r0, r7
 800032e:	429f      	cmp	r7, r3
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x148>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f100 34ff 	add.w	r4, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x146>
 800033c:	429f      	cmp	r7, r3
 800033e:	f200 80b0 	bhi.w	80004a2 <__udivmoddi4+0x2a6>
 8000342:	4620      	mov	r0, r4
 8000344:	1bdb      	subs	r3, r3, r7
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x9c>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa20 fc06 	lsr.w	ip, r0, r6
 800035c:	fa04 f301 	lsl.w	r3, r4, r1
 8000360:	ea43 030c 	orr.w	r3, r3, ip
 8000364:	40f4      	lsrs	r4, r6
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	0c38      	lsrs	r0, r7, #16
 800036c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000370:	fbb4 fef0 	udiv	lr, r4, r0
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fb00 441e 	mls	r4, r0, lr, r4
 800037c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000380:	fb0e f90c 	mul.w	r9, lr, ip
 8000384:	45a1      	cmp	r9, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x1a6>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000392:	f080 8084 	bcs.w	800049e <__udivmoddi4+0x2a2>
 8000396:	45a1      	cmp	r9, r4
 8000398:	f240 8081 	bls.w	800049e <__udivmoddi4+0x2a2>
 800039c:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a0:	443c      	add	r4, r7
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	fa1f f983 	uxth.w	r9, r3
 80003aa:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ae:	fb00 4413 	mls	r4, r0, r3, r4
 80003b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ba:	45a4      	cmp	ip, r4
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x1d2>
 80003be:	193c      	adds	r4, r7, r4
 80003c0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c4:	d267      	bcs.n	8000496 <__udivmoddi4+0x29a>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d965      	bls.n	8000496 <__udivmoddi4+0x29a>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d2:	fba0 9302 	umull	r9, r3, r0, r2
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	429c      	cmp	r4, r3
 80003dc:	46ce      	mov	lr, r9
 80003de:	469c      	mov	ip, r3
 80003e0:	d351      	bcc.n	8000486 <__udivmoddi4+0x28a>
 80003e2:	d04e      	beq.n	8000482 <__udivmoddi4+0x286>
 80003e4:	b155      	cbz	r5, 80003fc <__udivmoddi4+0x200>
 80003e6:	ebb8 030e 	subs.w	r3, r8, lr
 80003ea:	eb64 040c 	sbc.w	r4, r4, ip
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	431e      	orrs	r6, r3
 80003f6:	40cc      	lsrs	r4, r1
 80003f8:	e9c5 6400 	strd	r6, r4, [r5]
 80003fc:	2100      	movs	r1, #0
 80003fe:	e750      	b.n	80002a2 <__udivmoddi4+0xa6>
 8000400:	f1c2 0320 	rsb	r3, r2, #32
 8000404:	fa20 f103 	lsr.w	r1, r0, r3
 8000408:	fa0c fc02 	lsl.w	ip, ip, r2
 800040c:	fa24 f303 	lsr.w	r3, r4, r3
 8000410:	4094      	lsls	r4, r2
 8000412:	430c      	orrs	r4, r1
 8000414:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000418:	fa00 fe02 	lsl.w	lr, r0, r2
 800041c:	fa1f f78c 	uxth.w	r7, ip
 8000420:	fbb3 f0f8 	udiv	r0, r3, r8
 8000424:	fb08 3110 	mls	r1, r8, r0, r3
 8000428:	0c23      	lsrs	r3, r4, #16
 800042a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042e:	fb00 f107 	mul.w	r1, r0, r7
 8000432:	4299      	cmp	r1, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x24c>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 36ff 	add.w	r6, r0, #4294967295
 800043e:	d22c      	bcs.n	800049a <__udivmoddi4+0x29e>
 8000440:	4299      	cmp	r1, r3
 8000442:	d92a      	bls.n	800049a <__udivmoddi4+0x29e>
 8000444:	3802      	subs	r0, #2
 8000446:	4463      	add	r3, ip
 8000448:	1a5b      	subs	r3, r3, r1
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000450:	fb08 3311 	mls	r3, r8, r1, r3
 8000454:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000458:	fb01 f307 	mul.w	r3, r1, r7
 800045c:	42a3      	cmp	r3, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x276>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f101 36ff 	add.w	r6, r1, #4294967295
 8000468:	d213      	bcs.n	8000492 <__udivmoddi4+0x296>
 800046a:	42a3      	cmp	r3, r4
 800046c:	d911      	bls.n	8000492 <__udivmoddi4+0x296>
 800046e:	3902      	subs	r1, #2
 8000470:	4464      	add	r4, ip
 8000472:	1ae4      	subs	r4, r4, r3
 8000474:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000478:	e739      	b.n	80002ee <__udivmoddi4+0xf2>
 800047a:	4604      	mov	r4, r0
 800047c:	e6f0      	b.n	8000260 <__udivmoddi4+0x64>
 800047e:	4608      	mov	r0, r1
 8000480:	e706      	b.n	8000290 <__udivmoddi4+0x94>
 8000482:	45c8      	cmp	r8, r9
 8000484:	d2ae      	bcs.n	80003e4 <__udivmoddi4+0x1e8>
 8000486:	ebb9 0e02 	subs.w	lr, r9, r2
 800048a:	eb63 0c07 	sbc.w	ip, r3, r7
 800048e:	3801      	subs	r0, #1
 8000490:	e7a8      	b.n	80003e4 <__udivmoddi4+0x1e8>
 8000492:	4631      	mov	r1, r6
 8000494:	e7ed      	b.n	8000472 <__udivmoddi4+0x276>
 8000496:	4603      	mov	r3, r0
 8000498:	e799      	b.n	80003ce <__udivmoddi4+0x1d2>
 800049a:	4630      	mov	r0, r6
 800049c:	e7d4      	b.n	8000448 <__udivmoddi4+0x24c>
 800049e:	46d6      	mov	lr, sl
 80004a0:	e77f      	b.n	80003a2 <__udivmoddi4+0x1a6>
 80004a2:	4463      	add	r3, ip
 80004a4:	3802      	subs	r0, #2
 80004a6:	e74d      	b.n	8000344 <__udivmoddi4+0x148>
 80004a8:	4606      	mov	r6, r0
 80004aa:	4623      	mov	r3, r4
 80004ac:	4608      	mov	r0, r1
 80004ae:	e70f      	b.n	80002d0 <__udivmoddi4+0xd4>
 80004b0:	3e02      	subs	r6, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	e730      	b.n	8000318 <__udivmoddi4+0x11c>
 80004b6:	bf00      	nop

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop

080004bc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004c2:	463b      	mov	r3, r7
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	609a      	str	r2, [r3, #8]
 80004cc:	60da      	str	r2, [r3, #12]
 80004ce:	611a      	str	r2, [r3, #16]
 80004d0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004d2:	4b29      	ldr	r3, [pc, #164]	@ (8000578 <MX_ADC1_Init+0xbc>)
 80004d4:	4a29      	ldr	r2, [pc, #164]	@ (800057c <MX_ADC1_Init+0xc0>)
 80004d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004d8:	4b27      	ldr	r3, [pc, #156]	@ (8000578 <MX_ADC1_Init+0xbc>)
 80004da:	2200      	movs	r2, #0
 80004dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004de:	4b26      	ldr	r3, [pc, #152]	@ (8000578 <MX_ADC1_Init+0xbc>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004e4:	4b24      	ldr	r3, [pc, #144]	@ (8000578 <MX_ADC1_Init+0xbc>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004ea:	4b23      	ldr	r3, [pc, #140]	@ (8000578 <MX_ADC1_Init+0xbc>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004f0:	4b21      	ldr	r3, [pc, #132]	@ (8000578 <MX_ADC1_Init+0xbc>)
 80004f2:	2204      	movs	r2, #4
 80004f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004f6:	4b20      	ldr	r3, [pc, #128]	@ (8000578 <MX_ADC1_Init+0xbc>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000578 <MX_ADC1_Init+0xbc>)
 80004fe:	2200      	movs	r2, #0
 8000500:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000502:	4b1d      	ldr	r3, [pc, #116]	@ (8000578 <MX_ADC1_Init+0xbc>)
 8000504:	2201      	movs	r2, #1
 8000506:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000508:	4b1b      	ldr	r3, [pc, #108]	@ (8000578 <MX_ADC1_Init+0xbc>)
 800050a:	2200      	movs	r2, #0
 800050c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000510:	4b19      	ldr	r3, [pc, #100]	@ (8000578 <MX_ADC1_Init+0xbc>)
 8000512:	2200      	movs	r2, #0
 8000514:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000516:	4b18      	ldr	r3, [pc, #96]	@ (8000578 <MX_ADC1_Init+0xbc>)
 8000518:	2200      	movs	r2, #0
 800051a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800051c:	4b16      	ldr	r3, [pc, #88]	@ (8000578 <MX_ADC1_Init+0xbc>)
 800051e:	2200      	movs	r2, #0
 8000520:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000524:	4b14      	ldr	r3, [pc, #80]	@ (8000578 <MX_ADC1_Init+0xbc>)
 8000526:	2200      	movs	r2, #0
 8000528:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800052a:	4b13      	ldr	r3, [pc, #76]	@ (8000578 <MX_ADC1_Init+0xbc>)
 800052c:	2200      	movs	r2, #0
 800052e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000532:	4811      	ldr	r0, [pc, #68]	@ (8000578 <MX_ADC1_Init+0xbc>)
 8000534:	f000 fd76 	bl	8001024 <HAL_ADC_Init>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800053e:	f000 f91d 	bl	800077c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000542:	4b0f      	ldr	r3, [pc, #60]	@ (8000580 <MX_ADC1_Init+0xc4>)
 8000544:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000546:	2306      	movs	r3, #6
 8000548:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800054a:	2300      	movs	r3, #0
 800054c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800054e:	237f      	movs	r3, #127	@ 0x7f
 8000550:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000552:	2304      	movs	r3, #4
 8000554:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800055a:	463b      	mov	r3, r7
 800055c:	4619      	mov	r1, r3
 800055e:	4806      	ldr	r0, [pc, #24]	@ (8000578 <MX_ADC1_Init+0xbc>)
 8000560:	f000 fea2 	bl	80012a8 <HAL_ADC_ConfigChannel>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800056a:	f000 f907 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800056e:	bf00      	nop
 8000570:	3718      	adds	r7, #24
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20000028 	.word	0x20000028
 800057c:	50040000 	.word	0x50040000
 8000580:	2a000400 	.word	0x2a000400

08000584 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b09e      	sub	sp, #120	@ 0x78
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800059c:	f107 0310 	add.w	r3, r7, #16
 80005a0:	2254      	movs	r2, #84	@ 0x54
 80005a2:	2100      	movs	r1, #0
 80005a4:	4618      	mov	r0, r3
 80005a6:	f004 fa56 	bl	8004a56 <memset>
  if(adcHandle->Instance==ADC1)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a25      	ldr	r2, [pc, #148]	@ (8000644 <HAL_ADC_MspInit+0xc0>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d143      	bne.n	800063c <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80005b8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80005ba:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80005be:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80005c0:	2301      	movs	r3, #1
 80005c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80005c4:	2301      	movs	r3, #1
 80005c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80005c8:	2308      	movs	r3, #8
 80005ca:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80005cc:	2307      	movs	r3, #7
 80005ce:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80005d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80005dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005de:	f107 0310 	add.w	r3, r7, #16
 80005e2:	4618      	mov	r0, r3
 80005e4:	f002 fb72 	bl	8002ccc <HAL_RCCEx_PeriphCLKConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80005ee:	f000 f8c5 	bl	800077c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80005f2:	4b15      	ldr	r3, [pc, #84]	@ (8000648 <HAL_ADC_MspInit+0xc4>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f6:	4a14      	ldr	r2, [pc, #80]	@ (8000648 <HAL_ADC_MspInit+0xc4>)
 80005f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005fe:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <HAL_ADC_MspInit+0xc4>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000602:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <HAL_ADC_MspInit+0xc4>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060e:	4a0e      	ldr	r2, [pc, #56]	@ (8000648 <HAL_ADC_MspInit+0xc4>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000616:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <HAL_ADC_MspInit+0xc4>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA2     ------> ADC1_IN7
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_5;
 8000622:	2325      	movs	r3, #37	@ 0x25
 8000624:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000626:	230b      	movs	r3, #11
 8000628:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000632:	4619      	mov	r1, r3
 8000634:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000638:	f001 fb2a 	bl	8001c90 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800063c:	bf00      	nop
 800063e:	3778      	adds	r7, #120	@ 0x78
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	50040000 	.word	0x50040000
 8000648:	40021000 	.word	0x40021000

0800064c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000660:	4b19      	ldr	r3, [pc, #100]	@ (80006c8 <MX_GPIO_Init+0x7c>)
 8000662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000664:	4a18      	ldr	r2, [pc, #96]	@ (80006c8 <MX_GPIO_Init+0x7c>)
 8000666:	f043 0301 	orr.w	r3, r3, #1
 800066a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066c:	4b16      	ldr	r3, [pc, #88]	@ (80006c8 <MX_GPIO_Init+0x7c>)
 800066e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000670:	f003 0301 	and.w	r3, r3, #1
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800067e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000682:	f001 fc6f 	bl	8001f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000686:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800068a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	4619      	mov	r1, r3
 8000698:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800069c:	f001 faf8 	bl	8001c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80006a0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80006a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a6:	2301      	movs	r3, #1
 80006a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	4619      	mov	r1, r3
 80006b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ba:	f001 fae9 	bl	8001c90 <HAL_GPIO_Init>

}
 80006be:	bf00      	nop
 80006c0:	3718      	adds	r7, #24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000

080006cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d0:	f000 faa7 	bl	8000c22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d4:	f000 f80c 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d8:	f7ff ffb8 	bl	800064c <MX_GPIO_Init>
  MX_ADC1_Init();
 80006dc:	f7ff feee 	bl	80004bc <MX_ADC1_Init>
  MX_TIM2_Init();
 80006e0:	f000 f8cc 	bl	800087c <MX_TIM2_Init>
  MX_TIM6_Init();
 80006e4:	f000 f938 	bl	8000958 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 80006e8:	f000 f9ea 	bl	8000ac0 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ec:	bf00      	nop
 80006ee:	e7fd      	b.n	80006ec <main+0x20>

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b096      	sub	sp, #88	@ 0x58
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	2244      	movs	r2, #68	@ 0x44
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f004 f9a9 	bl	8004a56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	463b      	mov	r3, r7
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000712:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000716:	f001 fc4b 	bl	8001fb0 <HAL_PWREx_ControlVoltageScaling>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000720:	f000 f82c 	bl	800077c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000724:	2310      	movs	r3, #16
 8000726:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000728:	2301      	movs	r3, #1
 800072a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000730:	2360      	movs	r3, #96	@ 0x60
 8000732:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000734:	2300      	movs	r3, #0
 8000736:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4618      	mov	r0, r3
 800073e:	f001 fc8d 	bl	800205c <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000748:	f000 f818 	bl	800077c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074c:	230f      	movs	r3, #15
 800074e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000750:	2300      	movs	r3, #0
 8000752:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000760:	463b      	mov	r3, r7
 8000762:	2100      	movs	r1, #0
 8000764:	4618      	mov	r0, r3
 8000766:	f002 f88d 	bl	8002884 <HAL_RCC_ClockConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000770:	f000 f804 	bl	800077c <Error_Handler>
  }
}
 8000774:	bf00      	nop
 8000776:	3758      	adds	r7, #88	@ 0x58
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000780:	b672      	cpsid	i
}
 8000782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <Error_Handler+0x8>

08000788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078e:	4b0f      	ldr	r3, [pc, #60]	@ (80007cc <HAL_MspInit+0x44>)
 8000790:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000792:	4a0e      	ldr	r2, [pc, #56]	@ (80007cc <HAL_MspInit+0x44>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6613      	str	r3, [r2, #96]	@ 0x60
 800079a:	4b0c      	ldr	r3, [pc, #48]	@ (80007cc <HAL_MspInit+0x44>)
 800079c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <HAL_MspInit+0x44>)
 80007a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007aa:	4a08      	ldr	r2, [pc, #32]	@ (80007cc <HAL_MspInit+0x44>)
 80007ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80007b2:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <HAL_MspInit+0x44>)
 80007b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40021000 	.word	0x40021000

080007d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <NMI_Handler+0x4>

080007d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <HardFault_Handler+0x4>

080007e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <MemManage_Handler+0x4>

080007e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <BusFault_Handler+0x4>

080007f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <UsageFault_Handler+0x4>

080007f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr

08000806 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000826:	f000 fa51 	bl	8000ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000834:	4802      	ldr	r0, [pc, #8]	@ (8000840 <TIM2_IRQHandler+0x10>)
 8000836:	f002 fe40 	bl	80034ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	2000008c 	.word	0x2000008c

08000844 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000848:	4802      	ldr	r0, [pc, #8]	@ (8000854 <TIM6_DAC_IRQHandler+0x10>)
 800084a:	f002 fe36 	bl	80034ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200000d8 	.word	0x200000d8

08000858 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800085c:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <SystemInit+0x20>)
 800085e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000862:	4a05      	ldr	r2, [pc, #20]	@ (8000878 <SystemInit+0x20>)
 8000864:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000868:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	@ 0x28
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800088e:	463b      	mov	r3, r7
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
 800089c:	615a      	str	r2, [r3, #20]
 800089e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008a0:	4b2c      	ldr	r3, [pc, #176]	@ (8000954 <MX_TIM2_Init+0xd8>)
 80008a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008a8:	4b2a      	ldr	r3, [pc, #168]	@ (8000954 <MX_TIM2_Init+0xd8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ae:	4b29      	ldr	r3, [pc, #164]	@ (8000954 <MX_TIM2_Init+0xd8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80008b4:	4b27      	ldr	r3, [pc, #156]	@ (8000954 <MX_TIM2_Init+0xd8>)
 80008b6:	f04f 32ff 	mov.w	r2, #4294967295
 80008ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008bc:	4b25      	ldr	r3, [pc, #148]	@ (8000954 <MX_TIM2_Init+0xd8>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c2:	4b24      	ldr	r3, [pc, #144]	@ (8000954 <MX_TIM2_Init+0xd8>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008c8:	4822      	ldr	r0, [pc, #136]	@ (8000954 <MX_TIM2_Init+0xd8>)
 80008ca:	f002 fd9f 	bl	800340c <HAL_TIM_PWM_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80008d4:	f7ff ff52 	bl	800077c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80008d8:	481e      	ldr	r0, [pc, #120]	@ (8000954 <MX_TIM2_Init+0xd8>)
 80008da:	f002 fd36 	bl	800334a <HAL_TIM_OC_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80008e4:	f7ff ff4a 	bl	800077c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	4817      	ldr	r0, [pc, #92]	@ (8000954 <MX_TIM2_Init+0xd8>)
 80008f8:	f003 fb94 	bl	8004024 <HAL_TIMEx_MasterConfigSynchronization>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000902:	f7ff ff3b 	bl	800077c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000906:	2360      	movs	r3, #96	@ 0x60
 8000908:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800090e:	2300      	movs	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000916:	463b      	mov	r3, r7
 8000918:	2204      	movs	r2, #4
 800091a:	4619      	mov	r1, r3
 800091c:	480d      	ldr	r0, [pc, #52]	@ (8000954 <MX_TIM2_Init+0xd8>)
 800091e:	f002 ff4d 	bl	80037bc <HAL_TIM_PWM_ConfigChannel>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000928:	f7ff ff28 	bl	800077c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800092c:	2300      	movs	r3, #0
 800092e:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000930:	463b      	mov	r3, r7
 8000932:	220c      	movs	r2, #12
 8000934:	4619      	mov	r1, r3
 8000936:	4807      	ldr	r0, [pc, #28]	@ (8000954 <MX_TIM2_Init+0xd8>)
 8000938:	f002 fec6 	bl	80036c8 <HAL_TIM_OC_ConfigChannel>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8000942:	f7ff ff1b 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000946:	4803      	ldr	r0, [pc, #12]	@ (8000954 <MX_TIM2_Init+0xd8>)
 8000948:	f000 f886 	bl	8000a58 <HAL_TIM_MspPostInit>

}
 800094c:	bf00      	nop
 800094e:	3728      	adds	r7, #40	@ 0x28
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	2000008c 	.word	0x2000008c

08000958 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000968:	4b14      	ldr	r3, [pc, #80]	@ (80009bc <MX_TIM6_Init+0x64>)
 800096a:	4a15      	ldr	r2, [pc, #84]	@ (80009c0 <MX_TIM6_Init+0x68>)
 800096c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800096e:	4b13      	ldr	r3, [pc, #76]	@ (80009bc <MX_TIM6_Init+0x64>)
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000974:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <MX_TIM6_Init+0x64>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800097a:	4b10      	ldr	r3, [pc, #64]	@ (80009bc <MX_TIM6_Init+0x64>)
 800097c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000980:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000982:	4b0e      	ldr	r3, [pc, #56]	@ (80009bc <MX_TIM6_Init+0x64>)
 8000984:	2280      	movs	r2, #128	@ 0x80
 8000986:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000988:	480c      	ldr	r0, [pc, #48]	@ (80009bc <MX_TIM6_Init+0x64>)
 800098a:	f002 fc87 	bl	800329c <HAL_TIM_Base_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000994:	f7ff fef2 	bl	800077c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000998:	2300      	movs	r3, #0
 800099a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	4619      	mov	r1, r3
 80009a4:	4805      	ldr	r0, [pc, #20]	@ (80009bc <MX_TIM6_Init+0x64>)
 80009a6:	f003 fb3d 	bl	8004024 <HAL_TIMEx_MasterConfigSynchronization>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80009b0:	f7ff fee4 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	3710      	adds	r7, #16
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	200000d8 	.word	0x200000d8
 80009c0:	40001000 	.word	0x40001000

080009c4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009d4:	d113      	bne.n	80009fe <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <HAL_TIM_PWM_MspInit+0x44>)
 80009d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009da:	4a0b      	ldr	r2, [pc, #44]	@ (8000a08 <HAL_TIM_PWM_MspInit+0x44>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80009e2:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <HAL_TIM_PWM_MspInit+0x44>)
 80009e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2100      	movs	r1, #0
 80009f2:	201c      	movs	r0, #28
 80009f4:	f001 f915 	bl	8001c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009f8:	201c      	movs	r0, #28
 80009fa:	f001 f92e 	bl	8001c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80009fe:	bf00      	nop
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40021000 	.word	0x40021000

08000a0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a0d      	ldr	r2, [pc, #52]	@ (8000a50 <HAL_TIM_Base_MspInit+0x44>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d113      	bne.n	8000a46 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a54 <HAL_TIM_Base_MspInit+0x48>)
 8000a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a22:	4a0c      	ldr	r2, [pc, #48]	@ (8000a54 <HAL_TIM_Base_MspInit+0x48>)
 8000a24:	f043 0310 	orr.w	r3, r3, #16
 8000a28:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a54 <HAL_TIM_Base_MspInit+0x48>)
 8000a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a2e:	f003 0310 	and.w	r3, r3, #16
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2100      	movs	r1, #0
 8000a3a:	2036      	movs	r0, #54	@ 0x36
 8000a3c:	f001 f8f1 	bl	8001c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a40:	2036      	movs	r0, #54	@ 0x36
 8000a42:	f001 f90a 	bl	8001c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40001000 	.word	0x40001000
 8000a54:	40021000 	.word	0x40021000

08000a58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a78:	d11c      	bne.n	8000ab4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b10      	ldr	r3, [pc, #64]	@ (8000abc <HAL_TIM_MspPostInit+0x64>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000abc <HAL_TIM_MspPostInit+0x64>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a86:	4b0d      	ldr	r3, [pc, #52]	@ (8000abc <HAL_TIM_MspPostInit+0x64>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000a92:	230a      	movs	r3, #10
 8000a94:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	4619      	mov	r1, r3
 8000aac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ab0:	f001 f8ee 	bl	8001c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ab4:	bf00      	nop
 8000ab6:	3720      	adds	r7, #32
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40021000 	.word	0x40021000

08000ac0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ac4:	4b14      	ldr	r3, [pc, #80]	@ (8000b18 <MX_USART1_UART_Init+0x58>)
 8000ac6:	4a15      	ldr	r2, [pc, #84]	@ (8000b1c <MX_USART1_UART_Init+0x5c>)
 8000ac8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aca:	4b13      	ldr	r3, [pc, #76]	@ (8000b18 <MX_USART1_UART_Init+0x58>)
 8000acc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ad0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad2:	4b11      	ldr	r3, [pc, #68]	@ (8000b18 <MX_USART1_UART_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <MX_USART1_UART_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	@ (8000b18 <MX_USART1_UART_Init+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b18 <MX_USART1_UART_Init+0x58>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	@ (8000b18 <MX_USART1_UART_Init+0x58>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af0:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <MX_USART1_UART_Init+0x58>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000af6:	4b08      	ldr	r3, [pc, #32]	@ (8000b18 <MX_USART1_UART_Init+0x58>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000afc:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <MX_USART1_UART_Init+0x58>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b02:	4805      	ldr	r0, [pc, #20]	@ (8000b18 <MX_USART1_UART_Init+0x58>)
 8000b04:	f003 fb12 	bl	800412c <HAL_UART_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b0e:	f7ff fe35 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000124 	.word	0x20000124
 8000b1c:	40013800 	.word	0x40013800

08000b20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b09e      	sub	sp, #120	@ 0x78
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b38:	f107 0310 	add.w	r3, r7, #16
 8000b3c:	2254      	movs	r2, #84	@ 0x54
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f003 ff88 	bl	8004a56 <memset>
  if(uartHandle->Instance==USART1)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a1f      	ldr	r2, [pc, #124]	@ (8000bc8 <HAL_UART_MspInit+0xa8>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d137      	bne.n	8000bc0 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b50:	2301      	movs	r3, #1
 8000b52:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b54:	2300      	movs	r3, #0
 8000b56:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f002 f8b5 	bl	8002ccc <HAL_RCCEx_PeriphCLKConfig>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b68:	f7ff fe08 	bl	800077c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b6c:	4b17      	ldr	r3, [pc, #92]	@ (8000bcc <HAL_UART_MspInit+0xac>)
 8000b6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b70:	4a16      	ldr	r2, [pc, #88]	@ (8000bcc <HAL_UART_MspInit+0xac>)
 8000b72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b76:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b78:	4b14      	ldr	r3, [pc, #80]	@ (8000bcc <HAL_UART_MspInit+0xac>)
 8000b7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b84:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <HAL_UART_MspInit+0xac>)
 8000b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b88:	4a10      	ldr	r2, [pc, #64]	@ (8000bcc <HAL_UART_MspInit+0xac>)
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b90:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <HAL_UART_MspInit+0xac>)
 8000b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b9c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ba0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bae:	2307      	movs	r3, #7
 8000bb0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bbc:	f001 f868 	bl	8001c90 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	3778      	adds	r7, #120	@ 0x78
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40013800 	.word	0x40013800
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c08 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bd4:	f7ff fe40 	bl	8000858 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd8:	480c      	ldr	r0, [pc, #48]	@ (8000c0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000bda:	490d      	ldr	r1, [pc, #52]	@ (8000c10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bdc:	4a0d      	ldr	r2, [pc, #52]	@ (8000c14 <LoopForever+0xe>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be0:	e002      	b.n	8000be8 <LoopCopyDataInit>

08000be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be6:	3304      	adds	r3, #4

08000be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bec:	d3f9      	bcc.n	8000be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bee:	4a0a      	ldr	r2, [pc, #40]	@ (8000c18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bf0:	4c0a      	ldr	r4, [pc, #40]	@ (8000c1c <LoopForever+0x16>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf4:	e001      	b.n	8000bfa <LoopFillZerobss>

08000bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf8:	3204      	adds	r2, #4

08000bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bfc:	d3fb      	bcc.n	8000bf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bfe:	f003 ff33 	bl	8004a68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c02:	f7ff fd63 	bl	80006cc <main>

08000c06 <LoopForever>:

LoopForever:
    b LoopForever
 8000c06:	e7fe      	b.n	8000c06 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c08:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c14:	08004b20 	.word	0x08004b20
  ldr r2, =_sbss
 8000c18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c1c:	200001b0 	.word	0x200001b0

08000c20 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c20:	e7fe      	b.n	8000c20 <ADC1_IRQHandler>

08000c22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	f000 ffed 	bl	8001c0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c32:	200f      	movs	r0, #15
 8000c34:	f000 f80e 	bl	8000c54 <HAL_InitTick>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d002      	beq.n	8000c44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	71fb      	strb	r3, [r7, #7]
 8000c42:	e001      	b.n	8000c48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c44:	f7ff fda0 	bl	8000788 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c48:	79fb      	ldrb	r3, [r7, #7]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c60:	4b17      	ldr	r3, [pc, #92]	@ (8000cc0 <HAL_InitTick+0x6c>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d023      	beq.n	8000cb0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c68:	4b16      	ldr	r3, [pc, #88]	@ (8000cc4 <HAL_InitTick+0x70>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4b14      	ldr	r3, [pc, #80]	@ (8000cc0 <HAL_InitTick+0x6c>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	4619      	mov	r1, r3
 8000c72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 fff9 	bl	8001c76 <HAL_SYSTICK_Config>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d10f      	bne.n	8000caa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b0f      	cmp	r3, #15
 8000c8e:	d809      	bhi.n	8000ca4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c90:	2200      	movs	r2, #0
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295
 8000c98:	f000 ffc3 	bl	8001c22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc8 <HAL_InitTick+0x74>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6013      	str	r3, [r2, #0]
 8000ca2:	e007      	b.n	8000cb4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	73fb      	strb	r3, [r7, #15]
 8000ca8:	e004      	b.n	8000cb4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	73fb      	strb	r3, [r7, #15]
 8000cae:	e001      	b.n	8000cb4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	20000000 	.word	0x20000000
 8000cc8:	20000004 	.word	0x20000004

08000ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <HAL_IncTick+0x20>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <HAL_IncTick+0x24>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	4a04      	ldr	r2, [pc, #16]	@ (8000cf0 <HAL_IncTick+0x24>)
 8000cde:	6013      	str	r3, [r2, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	200001ac 	.word	0x200001ac

08000cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf8:	4b03      	ldr	r3, [pc, #12]	@ (8000d08 <HAL_GetTick+0x14>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	200001ac 	.word	0x200001ac

08000d0c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	431a      	orrs	r2, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	609a      	str	r2, [r3, #8]
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d32:	b480      	push	{r7}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
 8000d3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	431a      	orrs	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b087      	sub	sp, #28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
 8000d80:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	3360      	adds	r3, #96	@ 0x60
 8000d86:	461a      	mov	r2, r3
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	4413      	add	r3, r2
 8000d8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4b08      	ldr	r3, [pc, #32]	@ (8000db8 <LL_ADC_SetOffset+0x44>)
 8000d96:	4013      	ands	r3, r2
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000d9e:	683a      	ldr	r2, [r7, #0]
 8000da0:	430a      	orrs	r2, r1
 8000da2:	4313      	orrs	r3, r2
 8000da4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000dac:	bf00      	nop
 8000dae:	371c      	adds	r7, #28
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	03fff000 	.word	0x03fff000

08000dbc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	3360      	adds	r3, #96	@ 0x60
 8000dca:	461a      	mov	r2, r3
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	4413      	add	r3, r2
 8000dd2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3714      	adds	r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b087      	sub	sp, #28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	3360      	adds	r3, #96	@ 0x60
 8000df8:	461a      	mov	r2, r3
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	4413      	add	r3, r2
 8000e00:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	431a      	orrs	r2, r3
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000e12:	bf00      	nop
 8000e14:	371c      	adds	r7, #28
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b087      	sub	sp, #28
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	60f8      	str	r0, [r7, #12]
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	3330      	adds	r3, #48	@ 0x30
 8000e2e:	461a      	mov	r2, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	0a1b      	lsrs	r3, r3, #8
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	f003 030c 	and.w	r3, r3, #12
 8000e3a:	4413      	add	r3, r2
 8000e3c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	f003 031f 	and.w	r3, r3, #31
 8000e48:	211f      	movs	r1, #31
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	401a      	ands	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	0e9b      	lsrs	r3, r3, #26
 8000e56:	f003 011f 	and.w	r1, r3, #31
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	f003 031f 	and.w	r3, r3, #31
 8000e60:	fa01 f303 	lsl.w	r3, r1, r3
 8000e64:	431a      	orrs	r2, r3
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e6a:	bf00      	nop
 8000e6c:	371c      	adds	r7, #28
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b087      	sub	sp, #28
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	60f8      	str	r0, [r7, #12]
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	3314      	adds	r3, #20
 8000e86:	461a      	mov	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	0e5b      	lsrs	r3, r3, #25
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	f003 0304 	and.w	r3, r3, #4
 8000e92:	4413      	add	r3, r2
 8000e94:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	0d1b      	lsrs	r3, r3, #20
 8000e9e:	f003 031f 	and.w	r3, r3, #31
 8000ea2:	2107      	movs	r1, #7
 8000ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	401a      	ands	r2, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	0d1b      	lsrs	r3, r3, #20
 8000eb0:	f003 031f 	and.w	r3, r3, #31
 8000eb4:	6879      	ldr	r1, [r7, #4]
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000ec0:	bf00      	nop
 8000ec2:	371c      	adds	r7, #28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	401a      	ands	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0318 	and.w	r3, r3, #24
 8000eee:	4908      	ldr	r1, [pc, #32]	@ (8000f10 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000ef0:	40d9      	lsrs	r1, r3
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	400b      	ands	r3, r1
 8000ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000efa:	431a      	orrs	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	0007ffff 	.word	0x0007ffff

08000f14 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000f24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	6093      	str	r3, [r2, #8]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000f48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f4c:	d101      	bne.n	8000f52 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e000      	b.n	8000f54 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000f70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f74:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000f9c:	d101      	bne.n	8000fa2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e000      	b.n	8000fa4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000fa2:	2300      	movs	r3, #0
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d101      	bne.n	8000fc8 <LL_ADC_IsEnabled+0x18>
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e000      	b.n	8000fca <LL_ADC_IsEnabled+0x1a>
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	d101      	bne.n	8000fee <LL_ADC_REG_IsConversionOngoing+0x18>
 8000fea:	2301      	movs	r3, #1
 8000fec:	e000      	b.n	8000ff0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f003 0308 	and.w	r3, r3, #8
 800100c:	2b08      	cmp	r3, #8
 800100e:	d101      	bne.n	8001014 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001010:	2301      	movs	r3, #1
 8001012:	e000      	b.n	8001016 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800102c:	2300      	movs	r3, #0
 800102e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e126      	b.n	800128c <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	691b      	ldr	r3, [r3, #16]
 8001042:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001048:	2b00      	cmp	r3, #0
 800104a:	d109      	bne.n	8001060 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff fa99 	bl	8000584 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff67 	bl	8000f38 <LL_ADC_IsDeepPowerDownEnabled>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d004      	beq.n	800107a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff4d 	bl	8000f14 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ff82 	bl	8000f88 <LL_ADC_IsInternalRegulatorEnabled>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d115      	bne.n	80010b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff ff66 	bl	8000f60 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001094:	4b7f      	ldr	r3, [pc, #508]	@ (8001294 <HAL_ADC_Init+0x270>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	099b      	lsrs	r3, r3, #6
 800109a:	4a7f      	ldr	r2, [pc, #508]	@ (8001298 <HAL_ADC_Init+0x274>)
 800109c:	fba2 2303 	umull	r2, r3, r2, r3
 80010a0:	099b      	lsrs	r3, r3, #6
 80010a2:	3301      	adds	r3, #1
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80010a8:	e002      	b.n	80010b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	3b01      	subs	r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1f9      	bne.n	80010aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ff64 	bl	8000f88 <LL_ADC_IsInternalRegulatorEnabled>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d10d      	bne.n	80010e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010ca:	f043 0210 	orr.w	r2, r3, #16
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d6:	f043 0201 	orr.w	r2, r3, #1
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ff75 	bl	8000fd6 <LL_ADC_REG_IsConversionOngoing>
 80010ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010f2:	f003 0310 	and.w	r3, r3, #16
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f040 80bf 	bne.w	800127a <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f040 80bb 	bne.w	800127a <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001108:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800110c:	f043 0202 	orr.w	r2, r3, #2
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff49 	bl	8000fb0 <LL_ADC_IsEnabled>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d10b      	bne.n	800113c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001124:	485d      	ldr	r0, [pc, #372]	@ (800129c <HAL_ADC_Init+0x278>)
 8001126:	f7ff ff43 	bl	8000fb0 <LL_ADC_IsEnabled>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d105      	bne.n	800113c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	4619      	mov	r1, r3
 8001136:	485a      	ldr	r0, [pc, #360]	@ (80012a0 <HAL_ADC_Init+0x27c>)
 8001138:	f7ff fde8 	bl	8000d0c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	7e5b      	ldrb	r3, [r3, #25]
 8001140:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001146:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800114c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001152:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f893 3020 	ldrb.w	r3, [r3, #32]
 800115a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d106      	bne.n	8001178 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800116e:	3b01      	subs	r3, #1
 8001170:	045b      	lsls	r3, r3, #17
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800117c:	2b00      	cmp	r3, #0
 800117e:	d009      	beq.n	8001194 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001184:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800118c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	68da      	ldr	r2, [r3, #12]
 800119a:	4b42      	ldr	r3, [pc, #264]	@ (80012a4 <HAL_ADC_Init+0x280>)
 800119c:	4013      	ands	r3, r2
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	6812      	ldr	r2, [r2, #0]
 80011a2:	69b9      	ldr	r1, [r7, #24]
 80011a4:	430b      	orrs	r3, r1
 80011a6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff25 	bl	8000ffc <LL_ADC_INJ_IsConversionOngoing>
 80011b2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d13d      	bne.n	8001236 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d13a      	bne.n	8001236 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80011c4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80011cc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80011dc:	f023 0302 	bic.w	r3, r3, #2
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	6812      	ldr	r2, [r2, #0]
 80011e4:	69b9      	ldr	r1, [r7, #24]
 80011e6:	430b      	orrs	r3, r1
 80011e8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d118      	bne.n	8001226 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80011fe:	f023 0304 	bic.w	r3, r3, #4
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800120a:	4311      	orrs	r1, r2
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001210:	4311      	orrs	r1, r2
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001216:	430a      	orrs	r2, r1
 8001218:	431a      	orrs	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f042 0201 	orr.w	r2, r2, #1
 8001222:	611a      	str	r2, [r3, #16]
 8001224:	e007      	b.n	8001236 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	691a      	ldr	r2, [r3, #16]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f022 0201 	bic.w	r2, r2, #1
 8001234:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d10c      	bne.n	8001258 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001244:	f023 010f 	bic.w	r1, r3, #15
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	1e5a      	subs	r2, r3, #1
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	430a      	orrs	r2, r1
 8001254:	631a      	str	r2, [r3, #48]	@ 0x30
 8001256:	e007      	b.n	8001268 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f022 020f 	bic.w	r2, r2, #15
 8001266:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800126c:	f023 0303 	bic.w	r3, r3, #3
 8001270:	f043 0201 	orr.w	r2, r3, #1
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	655a      	str	r2, [r3, #84]	@ 0x54
 8001278:	e007      	b.n	800128a <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800127e:	f043 0210 	orr.w	r2, r3, #16
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800128a:	7ffb      	ldrb	r3, [r7, #31]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3720      	adds	r7, #32
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000000 	.word	0x20000000
 8001298:	053e2d63 	.word	0x053e2d63
 800129c:	50040000 	.word	0x50040000
 80012a0:	50040300 	.word	0x50040300
 80012a4:	fff0c007 	.word	0xfff0c007

080012a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b0b6      	sub	sp, #216	@ 0xd8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d101      	bne.n	80012ca <HAL_ADC_ConfigChannel+0x22>
 80012c6:	2302      	movs	r3, #2
 80012c8:	e3bb      	b.n	8001a42 <HAL_ADC_ConfigChannel+0x79a>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fe7d 	bl	8000fd6 <LL_ADC_REG_IsConversionOngoing>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f040 83a0 	bne.w	8001a24 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b05      	cmp	r3, #5
 80012f2:	d824      	bhi.n	800133e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	3b02      	subs	r3, #2
 80012fa:	2b03      	cmp	r3, #3
 80012fc:	d81b      	bhi.n	8001336 <HAL_ADC_ConfigChannel+0x8e>
 80012fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001304 <HAL_ADC_ConfigChannel+0x5c>)
 8001300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001304:	08001315 	.word	0x08001315
 8001308:	0800131d 	.word	0x0800131d
 800130c:	08001325 	.word	0x08001325
 8001310:	0800132d 	.word	0x0800132d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001314:	230c      	movs	r3, #12
 8001316:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800131a:	e010      	b.n	800133e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800131c:	2312      	movs	r3, #18
 800131e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001322:	e00c      	b.n	800133e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001324:	2318      	movs	r3, #24
 8001326:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800132a:	e008      	b.n	800133e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800132c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001330:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001334:	e003      	b.n	800133e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001336:	2306      	movs	r3, #6
 8001338:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800133c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6818      	ldr	r0, [r3, #0]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800134c:	f7ff fd67 	bl	8000e1e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fe3e 	bl	8000fd6 <LL_ADC_REG_IsConversionOngoing>
 800135a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fe4a 	bl	8000ffc <LL_ADC_INJ_IsConversionOngoing>
 8001368:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800136c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001370:	2b00      	cmp	r3, #0
 8001372:	f040 81a4 	bne.w	80016be <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001376:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800137a:	2b00      	cmp	r3, #0
 800137c:	f040 819f 	bne.w	80016be <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6818      	ldr	r0, [r3, #0]
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	6819      	ldr	r1, [r3, #0]
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	461a      	mov	r2, r3
 800138e:	f7ff fd72 	bl	8000e76 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	695a      	ldr	r2, [r3, #20]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	08db      	lsrs	r3, r3, #3
 800139e:	f003 0303 	and.w	r3, r3, #3
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	2b04      	cmp	r3, #4
 80013b2:	d00a      	beq.n	80013ca <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6818      	ldr	r0, [r3, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	6919      	ldr	r1, [r3, #16]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80013c4:	f7ff fcd6 	bl	8000d74 <LL_ADC_SetOffset>
 80013c8:	e179      	b.n	80016be <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fcf3 	bl	8000dbc <LL_ADC_GetOffsetChannel>
 80013d6:	4603      	mov	r3, r0
 80013d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d10a      	bne.n	80013f6 <HAL_ADC_ConfigChannel+0x14e>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fce8 	bl	8000dbc <LL_ADC_GetOffsetChannel>
 80013ec:	4603      	mov	r3, r0
 80013ee:	0e9b      	lsrs	r3, r3, #26
 80013f0:	f003 021f 	and.w	r2, r3, #31
 80013f4:	e01e      	b.n	8001434 <HAL_ADC_ConfigChannel+0x18c>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2100      	movs	r1, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fcdd 	bl	8000dbc <LL_ADC_GetOffsetChannel>
 8001402:	4603      	mov	r3, r0
 8001404:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001408:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800140c:	fa93 f3a3 	rbit	r3, r3
 8001410:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001414:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001418:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800141c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001420:	2b00      	cmp	r3, #0
 8001422:	d101      	bne.n	8001428 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001424:	2320      	movs	r3, #32
 8001426:	e004      	b.n	8001432 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001428:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800142c:	fab3 f383 	clz	r3, r3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800143c:	2b00      	cmp	r3, #0
 800143e:	d105      	bne.n	800144c <HAL_ADC_ConfigChannel+0x1a4>
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	0e9b      	lsrs	r3, r3, #26
 8001446:	f003 031f 	and.w	r3, r3, #31
 800144a:	e018      	b.n	800147e <HAL_ADC_ConfigChannel+0x1d6>
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001454:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001458:	fa93 f3a3 	rbit	r3, r3
 800145c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001460:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001464:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001468:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001470:	2320      	movs	r3, #32
 8001472:	e004      	b.n	800147e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001474:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001478:	fab3 f383 	clz	r3, r3
 800147c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800147e:	429a      	cmp	r2, r3
 8001480:	d106      	bne.n	8001490 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fcac 	bl	8000de8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2101      	movs	r1, #1
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fc90 	bl	8000dbc <LL_ADC_GetOffsetChannel>
 800149c:	4603      	mov	r3, r0
 800149e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10a      	bne.n	80014bc <HAL_ADC_ConfigChannel+0x214>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2101      	movs	r1, #1
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fc85 	bl	8000dbc <LL_ADC_GetOffsetChannel>
 80014b2:	4603      	mov	r3, r0
 80014b4:	0e9b      	lsrs	r3, r3, #26
 80014b6:	f003 021f 	and.w	r2, r3, #31
 80014ba:	e01e      	b.n	80014fa <HAL_ADC_ConfigChannel+0x252>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2101      	movs	r1, #1
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fc7a 	bl	8000dbc <LL_ADC_GetOffsetChannel>
 80014c8:	4603      	mov	r3, r0
 80014ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80014d2:	fa93 f3a3 	rbit	r3, r3
 80014d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80014da:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80014de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80014e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80014ea:	2320      	movs	r3, #32
 80014ec:	e004      	b.n	80014f8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80014ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80014f2:	fab3 f383 	clz	r3, r3
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001502:	2b00      	cmp	r3, #0
 8001504:	d105      	bne.n	8001512 <HAL_ADC_ConfigChannel+0x26a>
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	0e9b      	lsrs	r3, r3, #26
 800150c:	f003 031f 	and.w	r3, r3, #31
 8001510:	e018      	b.n	8001544 <HAL_ADC_ConfigChannel+0x29c>
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800151e:	fa93 f3a3 	rbit	r3, r3
 8001522:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001526:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800152a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800152e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001536:	2320      	movs	r3, #32
 8001538:	e004      	b.n	8001544 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800153a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800153e:	fab3 f383 	clz	r3, r3
 8001542:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001544:	429a      	cmp	r2, r3
 8001546:	d106      	bne.n	8001556 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2200      	movs	r2, #0
 800154e:	2101      	movs	r1, #1
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fc49 	bl	8000de8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2102      	movs	r1, #2
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fc2d 	bl	8000dbc <LL_ADC_GetOffsetChannel>
 8001562:	4603      	mov	r3, r0
 8001564:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001568:	2b00      	cmp	r3, #0
 800156a:	d10a      	bne.n	8001582 <HAL_ADC_ConfigChannel+0x2da>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2102      	movs	r1, #2
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fc22 	bl	8000dbc <LL_ADC_GetOffsetChannel>
 8001578:	4603      	mov	r3, r0
 800157a:	0e9b      	lsrs	r3, r3, #26
 800157c:	f003 021f 	and.w	r2, r3, #31
 8001580:	e01e      	b.n	80015c0 <HAL_ADC_ConfigChannel+0x318>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2102      	movs	r1, #2
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fc17 	bl	8000dbc <LL_ADC_GetOffsetChannel>
 800158e:	4603      	mov	r3, r0
 8001590:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001594:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001598:	fa93 f3a3 	rbit	r3, r3
 800159c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80015a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80015a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80015a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80015b0:	2320      	movs	r3, #32
 80015b2:	e004      	b.n	80015be <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80015b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015b8:	fab3 f383 	clz	r3, r3
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d105      	bne.n	80015d8 <HAL_ADC_ConfigChannel+0x330>
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	0e9b      	lsrs	r3, r3, #26
 80015d2:	f003 031f 	and.w	r3, r3, #31
 80015d6:	e014      	b.n	8001602 <HAL_ADC_ConfigChannel+0x35a>
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80015e0:	fa93 f3a3 	rbit	r3, r3
 80015e4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80015e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80015e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80015ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80015f4:	2320      	movs	r3, #32
 80015f6:	e004      	b.n	8001602 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80015f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80015fc:	fab3 f383 	clz	r3, r3
 8001600:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001602:	429a      	cmp	r2, r3
 8001604:	d106      	bne.n	8001614 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2200      	movs	r2, #0
 800160c:	2102      	movs	r1, #2
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fbea 	bl	8000de8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2103      	movs	r1, #3
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fbce 	bl	8000dbc <LL_ADC_GetOffsetChannel>
 8001620:	4603      	mov	r3, r0
 8001622:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10a      	bne.n	8001640 <HAL_ADC_ConfigChannel+0x398>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2103      	movs	r1, #3
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fbc3 	bl	8000dbc <LL_ADC_GetOffsetChannel>
 8001636:	4603      	mov	r3, r0
 8001638:	0e9b      	lsrs	r3, r3, #26
 800163a:	f003 021f 	and.w	r2, r3, #31
 800163e:	e017      	b.n	8001670 <HAL_ADC_ConfigChannel+0x3c8>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2103      	movs	r1, #3
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fbb8 	bl	8000dbc <LL_ADC_GetOffsetChannel>
 800164c:	4603      	mov	r3, r0
 800164e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001650:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001652:	fa93 f3a3 	rbit	r3, r3
 8001656:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001658:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800165a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800165c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001662:	2320      	movs	r3, #32
 8001664:	e003      	b.n	800166e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001666:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001668:	fab3 f383 	clz	r3, r3
 800166c:	b2db      	uxtb	r3, r3
 800166e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001678:	2b00      	cmp	r3, #0
 800167a:	d105      	bne.n	8001688 <HAL_ADC_ConfigChannel+0x3e0>
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	0e9b      	lsrs	r3, r3, #26
 8001682:	f003 031f 	and.w	r3, r3, #31
 8001686:	e011      	b.n	80016ac <HAL_ADC_ConfigChannel+0x404>
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001690:	fa93 f3a3 	rbit	r3, r3
 8001694:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001696:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001698:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800169a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80016a0:	2320      	movs	r3, #32
 80016a2:	e003      	b.n	80016ac <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80016a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80016a6:	fab3 f383 	clz	r3, r3
 80016aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d106      	bne.n	80016be <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2200      	movs	r2, #0
 80016b6:	2103      	movs	r1, #3
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fb95 	bl	8000de8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fc74 	bl	8000fb0 <LL_ADC_IsEnabled>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f040 8140 	bne.w	8001950 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6818      	ldr	r0, [r3, #0]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	6819      	ldr	r1, [r3, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	461a      	mov	r2, r3
 80016de:	f7ff fbf5 	bl	8000ecc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	4a8f      	ldr	r2, [pc, #572]	@ (8001924 <HAL_ADC_ConfigChannel+0x67c>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	f040 8131 	bne.w	8001950 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10b      	bne.n	8001716 <HAL_ADC_ConfigChannel+0x46e>
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	0e9b      	lsrs	r3, r3, #26
 8001704:	3301      	adds	r3, #1
 8001706:	f003 031f 	and.w	r3, r3, #31
 800170a:	2b09      	cmp	r3, #9
 800170c:	bf94      	ite	ls
 800170e:	2301      	movls	r3, #1
 8001710:	2300      	movhi	r3, #0
 8001712:	b2db      	uxtb	r3, r3
 8001714:	e019      	b.n	800174a <HAL_ADC_ConfigChannel+0x4a2>
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800171e:	fa93 f3a3 	rbit	r3, r3
 8001722:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001726:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001728:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800172e:	2320      	movs	r3, #32
 8001730:	e003      	b.n	800173a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001732:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001734:	fab3 f383 	clz	r3, r3
 8001738:	b2db      	uxtb	r3, r3
 800173a:	3301      	adds	r3, #1
 800173c:	f003 031f 	and.w	r3, r3, #31
 8001740:	2b09      	cmp	r3, #9
 8001742:	bf94      	ite	ls
 8001744:	2301      	movls	r3, #1
 8001746:	2300      	movhi	r3, #0
 8001748:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800174a:	2b00      	cmp	r3, #0
 800174c:	d079      	beq.n	8001842 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001756:	2b00      	cmp	r3, #0
 8001758:	d107      	bne.n	800176a <HAL_ADC_ConfigChannel+0x4c2>
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	0e9b      	lsrs	r3, r3, #26
 8001760:	3301      	adds	r3, #1
 8001762:	069b      	lsls	r3, r3, #26
 8001764:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001768:	e015      	b.n	8001796 <HAL_ADC_ConfigChannel+0x4ee>
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001770:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001772:	fa93 f3a3 	rbit	r3, r3
 8001776:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001778:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800177a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800177c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001782:	2320      	movs	r3, #32
 8001784:	e003      	b.n	800178e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001786:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001788:	fab3 f383 	clz	r3, r3
 800178c:	b2db      	uxtb	r3, r3
 800178e:	3301      	adds	r3, #1
 8001790:	069b      	lsls	r3, r3, #26
 8001792:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d109      	bne.n	80017b6 <HAL_ADC_ConfigChannel+0x50e>
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	0e9b      	lsrs	r3, r3, #26
 80017a8:	3301      	adds	r3, #1
 80017aa:	f003 031f 	and.w	r3, r3, #31
 80017ae:	2101      	movs	r1, #1
 80017b0:	fa01 f303 	lsl.w	r3, r1, r3
 80017b4:	e017      	b.n	80017e6 <HAL_ADC_ConfigChannel+0x53e>
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017be:	fa93 f3a3 	rbit	r3, r3
 80017c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80017c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017c6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80017c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80017ce:	2320      	movs	r3, #32
 80017d0:	e003      	b.n	80017da <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80017d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017d4:	fab3 f383 	clz	r3, r3
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	3301      	adds	r3, #1
 80017dc:	f003 031f 	and.w	r3, r3, #31
 80017e0:	2101      	movs	r1, #1
 80017e2:	fa01 f303 	lsl.w	r3, r1, r3
 80017e6:	ea42 0103 	orr.w	r1, r2, r3
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10a      	bne.n	800180c <HAL_ADC_ConfigChannel+0x564>
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	0e9b      	lsrs	r3, r3, #26
 80017fc:	3301      	adds	r3, #1
 80017fe:	f003 021f 	and.w	r2, r3, #31
 8001802:	4613      	mov	r3, r2
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	4413      	add	r3, r2
 8001808:	051b      	lsls	r3, r3, #20
 800180a:	e018      	b.n	800183e <HAL_ADC_ConfigChannel+0x596>
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001814:	fa93 f3a3 	rbit	r3, r3
 8001818:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800181a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800181c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800181e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001824:	2320      	movs	r3, #32
 8001826:	e003      	b.n	8001830 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800182a:	fab3 f383 	clz	r3, r3
 800182e:	b2db      	uxtb	r3, r3
 8001830:	3301      	adds	r3, #1
 8001832:	f003 021f 	and.w	r2, r3, #31
 8001836:	4613      	mov	r3, r2
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	4413      	add	r3, r2
 800183c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800183e:	430b      	orrs	r3, r1
 8001840:	e081      	b.n	8001946 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800184a:	2b00      	cmp	r3, #0
 800184c:	d107      	bne.n	800185e <HAL_ADC_ConfigChannel+0x5b6>
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	0e9b      	lsrs	r3, r3, #26
 8001854:	3301      	adds	r3, #1
 8001856:	069b      	lsls	r3, r3, #26
 8001858:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800185c:	e015      	b.n	800188a <HAL_ADC_ConfigChannel+0x5e2>
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001866:	fa93 f3a3 	rbit	r3, r3
 800186a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800186c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001876:	2320      	movs	r3, #32
 8001878:	e003      	b.n	8001882 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800187a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800187c:	fab3 f383 	clz	r3, r3
 8001880:	b2db      	uxtb	r3, r3
 8001882:	3301      	adds	r3, #1
 8001884:	069b      	lsls	r3, r3, #26
 8001886:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001892:	2b00      	cmp	r3, #0
 8001894:	d109      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x602>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	0e9b      	lsrs	r3, r3, #26
 800189c:	3301      	adds	r3, #1
 800189e:	f003 031f 	and.w	r3, r3, #31
 80018a2:	2101      	movs	r1, #1
 80018a4:	fa01 f303 	lsl.w	r3, r1, r3
 80018a8:	e017      	b.n	80018da <HAL_ADC_ConfigChannel+0x632>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	fa93 f3a3 	rbit	r3, r3
 80018b6:	61bb      	str	r3, [r7, #24]
  return result;
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80018bc:	6a3b      	ldr	r3, [r7, #32]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80018c2:	2320      	movs	r3, #32
 80018c4:	e003      	b.n	80018ce <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	fab3 f383 	clz	r3, r3
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	3301      	adds	r3, #1
 80018d0:	f003 031f 	and.w	r3, r3, #31
 80018d4:	2101      	movs	r1, #1
 80018d6:	fa01 f303 	lsl.w	r3, r1, r3
 80018da:	ea42 0103 	orr.w	r1, r2, r3
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10d      	bne.n	8001906 <HAL_ADC_ConfigChannel+0x65e>
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	0e9b      	lsrs	r3, r3, #26
 80018f0:	3301      	adds	r3, #1
 80018f2:	f003 021f 	and.w	r2, r3, #31
 80018f6:	4613      	mov	r3, r2
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	4413      	add	r3, r2
 80018fc:	3b1e      	subs	r3, #30
 80018fe:	051b      	lsls	r3, r3, #20
 8001900:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001904:	e01e      	b.n	8001944 <HAL_ADC_ConfigChannel+0x69c>
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	fa93 f3a3 	rbit	r3, r3
 8001912:	60fb      	str	r3, [r7, #12]
  return result;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d104      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800191e:	2320      	movs	r3, #32
 8001920:	e006      	b.n	8001930 <HAL_ADC_ConfigChannel+0x688>
 8001922:	bf00      	nop
 8001924:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fab3 f383 	clz	r3, r3
 800192e:	b2db      	uxtb	r3, r3
 8001930:	3301      	adds	r3, #1
 8001932:	f003 021f 	and.w	r2, r3, #31
 8001936:	4613      	mov	r3, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	4413      	add	r3, r2
 800193c:	3b1e      	subs	r3, #30
 800193e:	051b      	lsls	r3, r3, #20
 8001940:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001944:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800194a:	4619      	mov	r1, r3
 800194c:	f7ff fa93 	bl	8000e76 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b3d      	ldr	r3, [pc, #244]	@ (8001a4c <HAL_ADC_ConfigChannel+0x7a4>)
 8001956:	4013      	ands	r3, r2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d06c      	beq.n	8001a36 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800195c:	483c      	ldr	r0, [pc, #240]	@ (8001a50 <HAL_ADC_ConfigChannel+0x7a8>)
 800195e:	f7ff f9fb 	bl	8000d58 <LL_ADC_GetCommonPathInternalCh>
 8001962:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a3a      	ldr	r2, [pc, #232]	@ (8001a54 <HAL_ADC_ConfigChannel+0x7ac>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d127      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001970:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001974:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d121      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a35      	ldr	r2, [pc, #212]	@ (8001a58 <HAL_ADC_ConfigChannel+0x7b0>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d157      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001986:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800198a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800198e:	4619      	mov	r1, r3
 8001990:	482f      	ldr	r0, [pc, #188]	@ (8001a50 <HAL_ADC_ConfigChannel+0x7a8>)
 8001992:	f7ff f9ce 	bl	8000d32 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001996:	4b31      	ldr	r3, [pc, #196]	@ (8001a5c <HAL_ADC_ConfigChannel+0x7b4>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	099b      	lsrs	r3, r3, #6
 800199c:	4a30      	ldr	r2, [pc, #192]	@ (8001a60 <HAL_ADC_ConfigChannel+0x7b8>)
 800199e:	fba2 2303 	umull	r2, r3, r2, r3
 80019a2:	099b      	lsrs	r3, r3, #6
 80019a4:	1c5a      	adds	r2, r3, #1
 80019a6:	4613      	mov	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4413      	add	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80019b0:	e002      	b.n	80019b8 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	3b01      	subs	r3, #1
 80019b6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f9      	bne.n	80019b2 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80019be:	e03a      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a27      	ldr	r2, [pc, #156]	@ (8001a64 <HAL_ADC_ConfigChannel+0x7bc>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d113      	bne.n	80019f2 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80019ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80019ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10d      	bne.n	80019f2 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a1f      	ldr	r2, [pc, #124]	@ (8001a58 <HAL_ADC_ConfigChannel+0x7b0>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d12a      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80019e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019e8:	4619      	mov	r1, r3
 80019ea:	4819      	ldr	r0, [pc, #100]	@ (8001a50 <HAL_ADC_ConfigChannel+0x7a8>)
 80019ec:	f7ff f9a1 	bl	8000d32 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80019f0:	e021      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001a68 <HAL_ADC_ConfigChannel+0x7c0>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d11c      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80019fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d116      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a12      	ldr	r2, [pc, #72]	@ (8001a58 <HAL_ADC_ConfigChannel+0x7b0>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d111      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a16:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	480c      	ldr	r0, [pc, #48]	@ (8001a50 <HAL_ADC_ConfigChannel+0x7a8>)
 8001a1e:	f7ff f988 	bl	8000d32 <LL_ADC_SetCommonPathInternalCh>
 8001a22:	e008      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a28:	f043 0220 	orr.w	r2, r3, #32
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001a3e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	37d8      	adds	r7, #216	@ 0xd8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	80080000 	.word	0x80080000
 8001a50:	50040300 	.word	0x50040300
 8001a54:	c7520000 	.word	0xc7520000
 8001a58:	50040000 	.word	0x50040000
 8001a5c:	20000000 	.word	0x20000000
 8001a60:	053e2d63 	.word	0x053e2d63
 8001a64:	cb840000 	.word	0xcb840000
 8001a68:	80000001 	.word	0x80000001

08001a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a9e:	4a04      	ldr	r2, [pc, #16]	@ (8001ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	60d3      	str	r3, [r2, #12]
}
 8001aa4:	bf00      	nop
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab8:	4b04      	ldr	r3, [pc, #16]	@ (8001acc <__NVIC_GetPriorityGrouping+0x18>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	0a1b      	lsrs	r3, r3, #8
 8001abe:	f003 0307 	and.w	r3, r3, #7
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	db0b      	blt.n	8001afa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	f003 021f 	and.w	r2, r3, #31
 8001ae8:	4907      	ldr	r1, [pc, #28]	@ (8001b08 <__NVIC_EnableIRQ+0x38>)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	095b      	lsrs	r3, r3, #5
 8001af0:	2001      	movs	r0, #1
 8001af2:	fa00 f202 	lsl.w	r2, r0, r2
 8001af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	e000e100 	.word	0xe000e100

08001b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	6039      	str	r1, [r7, #0]
 8001b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	db0a      	blt.n	8001b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	490c      	ldr	r1, [pc, #48]	@ (8001b58 <__NVIC_SetPriority+0x4c>)
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	0112      	lsls	r2, r2, #4
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	440b      	add	r3, r1
 8001b30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b34:	e00a      	b.n	8001b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	4908      	ldr	r1, [pc, #32]	@ (8001b5c <__NVIC_SetPriority+0x50>)
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	3b04      	subs	r3, #4
 8001b44:	0112      	lsls	r2, r2, #4
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	440b      	add	r3, r1
 8001b4a:	761a      	strb	r2, [r3, #24]
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000e100 	.word	0xe000e100
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b089      	sub	sp, #36	@ 0x24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f1c3 0307 	rsb	r3, r3, #7
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	bf28      	it	cs
 8001b7e:	2304      	movcs	r3, #4
 8001b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3304      	adds	r3, #4
 8001b86:	2b06      	cmp	r3, #6
 8001b88:	d902      	bls.n	8001b90 <NVIC_EncodePriority+0x30>
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3b03      	subs	r3, #3
 8001b8e:	e000      	b.n	8001b92 <NVIC_EncodePriority+0x32>
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b94:	f04f 32ff 	mov.w	r2, #4294967295
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb2:	43d9      	mvns	r1, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb8:	4313      	orrs	r3, r2
         );
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3724      	adds	r7, #36	@ 0x24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bd8:	d301      	bcc.n	8001bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e00f      	b.n	8001bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bde:	4a0a      	ldr	r2, [pc, #40]	@ (8001c08 <SysTick_Config+0x40>)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001be6:	210f      	movs	r1, #15
 8001be8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bec:	f7ff ff8e 	bl	8001b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf0:	4b05      	ldr	r3, [pc, #20]	@ (8001c08 <SysTick_Config+0x40>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bf6:	4b04      	ldr	r3, [pc, #16]	@ (8001c08 <SysTick_Config+0x40>)
 8001bf8:	2207      	movs	r2, #7
 8001bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	e000e010 	.word	0xe000e010

08001c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7ff ff29 	bl	8001a6c <__NVIC_SetPriorityGrouping>
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b086      	sub	sp, #24
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	4603      	mov	r3, r0
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	607a      	str	r2, [r7, #4]
 8001c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c34:	f7ff ff3e 	bl	8001ab4 <__NVIC_GetPriorityGrouping>
 8001c38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	68b9      	ldr	r1, [r7, #8]
 8001c3e:	6978      	ldr	r0, [r7, #20]
 8001c40:	f7ff ff8e 	bl	8001b60 <NVIC_EncodePriority>
 8001c44:	4602      	mov	r2, r0
 8001c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff5d 	bl	8001b0c <__NVIC_SetPriority>
}
 8001c52:	bf00      	nop
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	4603      	mov	r3, r0
 8001c62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff31 	bl	8001ad0 <__NVIC_EnableIRQ>
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff ffa2 	bl	8001bc8 <SysTick_Config>
 8001c84:	4603      	mov	r3, r0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
	...

08001c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b087      	sub	sp, #28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c9e:	e148      	b.n	8001f32 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cac:	4013      	ands	r3, r2
 8001cae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 813a 	beq.w	8001f2c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d005      	beq.n	8001cd0 <HAL_GPIO_Init+0x40>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d130      	bne.n	8001d32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	2203      	movs	r2, #3
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	68da      	ldr	r2, [r3, #12]
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d06:	2201      	movs	r2, #1
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	4013      	ands	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	091b      	lsrs	r3, r3, #4
 8001d1c:	f003 0201 	and.w	r2, r3, #1
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	2b03      	cmp	r3, #3
 8001d3c:	d017      	beq.n	8001d6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	2203      	movs	r2, #3
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4013      	ands	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d123      	bne.n	8001dc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	08da      	lsrs	r2, r3, #3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3208      	adds	r2, #8
 8001d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	220f      	movs	r2, #15
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43db      	mvns	r3, r3
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	691a      	ldr	r2, [r3, #16]
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	08da      	lsrs	r2, r3, #3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3208      	adds	r2, #8
 8001dbc:	6939      	ldr	r1, [r7, #16]
 8001dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	2203      	movs	r2, #3
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 0203 	and.w	r2, r3, #3
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 8094 	beq.w	8001f2c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e04:	4b52      	ldr	r3, [pc, #328]	@ (8001f50 <HAL_GPIO_Init+0x2c0>)
 8001e06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e08:	4a51      	ldr	r2, [pc, #324]	@ (8001f50 <HAL_GPIO_Init+0x2c0>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e10:	4b4f      	ldr	r3, [pc, #316]	@ (8001f50 <HAL_GPIO_Init+0x2c0>)
 8001e12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e1c:	4a4d      	ldr	r2, [pc, #308]	@ (8001f54 <HAL_GPIO_Init+0x2c4>)
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	089b      	lsrs	r3, r3, #2
 8001e22:	3302      	adds	r3, #2
 8001e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	220f      	movs	r2, #15
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e46:	d00d      	beq.n	8001e64 <HAL_GPIO_Init+0x1d4>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a43      	ldr	r2, [pc, #268]	@ (8001f58 <HAL_GPIO_Init+0x2c8>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d007      	beq.n	8001e60 <HAL_GPIO_Init+0x1d0>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a42      	ldr	r2, [pc, #264]	@ (8001f5c <HAL_GPIO_Init+0x2cc>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d101      	bne.n	8001e5c <HAL_GPIO_Init+0x1cc>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e004      	b.n	8001e66 <HAL_GPIO_Init+0x1d6>
 8001e5c:	2307      	movs	r3, #7
 8001e5e:	e002      	b.n	8001e66 <HAL_GPIO_Init+0x1d6>
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <HAL_GPIO_Init+0x1d6>
 8001e64:	2300      	movs	r3, #0
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	f002 0203 	and.w	r2, r2, #3
 8001e6c:	0092      	lsls	r2, r2, #2
 8001e6e:	4093      	lsls	r3, r2
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e76:	4937      	ldr	r1, [pc, #220]	@ (8001f54 <HAL_GPIO_Init+0x2c4>)
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	089b      	lsrs	r3, r3, #2
 8001e7c:	3302      	adds	r3, #2
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e84:	4b36      	ldr	r3, [pc, #216]	@ (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4013      	ands	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ea8:	4a2d      	ldr	r2, [pc, #180]	@ (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001eae:	4b2c      	ldr	r3, [pc, #176]	@ (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ed2:	4a23      	ldr	r2, [pc, #140]	@ (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ed8:	4b21      	ldr	r3, [pc, #132]	@ (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001efc:	4a18      	ldr	r2, [pc, #96]	@ (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f02:	4b17      	ldr	r3, [pc, #92]	@ (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f26:	4a0e      	ldr	r2, [pc, #56]	@ (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f47f aeaf 	bne.w	8001ca0 <HAL_GPIO_Init+0x10>
  }
}
 8001f42:	bf00      	nop
 8001f44:	bf00      	nop
 8001f46:	371c      	adds	r7, #28
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	40021000 	.word	0x40021000
 8001f54:	40010000 	.word	0x40010000
 8001f58:	48000400 	.word	0x48000400
 8001f5c:	48000800 	.word	0x48000800
 8001f60:	40010400 	.word	0x40010400

08001f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	807b      	strh	r3, [r7, #2]
 8001f70:	4613      	mov	r3, r2
 8001f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f74:	787b      	ldrb	r3, [r7, #1]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f7a:	887a      	ldrh	r2, [r7, #2]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f80:	e002      	b.n	8001f88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f82:	887a      	ldrh	r2, [r7, #2]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f98:	4b04      	ldr	r3, [pc, #16]	@ (8001fac <HAL_PWREx_GetVoltageRange+0x18>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40007000 	.word	0x40007000

08001fb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fbe:	d130      	bne.n	8002022 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fc0:	4b23      	ldr	r3, [pc, #140]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fcc:	d038      	beq.n	8002040 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fce:	4b20      	ldr	r3, [pc, #128]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fd8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fdc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fde:	4b1d      	ldr	r3, [pc, #116]	@ (8002054 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2232      	movs	r2, #50	@ 0x32
 8001fe4:	fb02 f303 	mul.w	r3, r2, r3
 8001fe8:	4a1b      	ldr	r2, [pc, #108]	@ (8002058 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001fea:	fba2 2303 	umull	r2, r3, r2, r3
 8001fee:	0c9b      	lsrs	r3, r3, #18
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ff4:	e002      	b.n	8001ffc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ffc:	4b14      	ldr	r3, [pc, #80]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002004:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002008:	d102      	bne.n	8002010 <HAL_PWREx_ControlVoltageScaling+0x60>
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f2      	bne.n	8001ff6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002010:	4b0f      	ldr	r3, [pc, #60]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002018:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800201c:	d110      	bne.n	8002040 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e00f      	b.n	8002042 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002022:	4b0b      	ldr	r3, [pc, #44]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800202a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800202e:	d007      	beq.n	8002040 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002030:	4b07      	ldr	r3, [pc, #28]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002038:	4a05      	ldr	r2, [pc, #20]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800203a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800203e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40007000 	.word	0x40007000
 8002054:	20000000 	.word	0x20000000
 8002058:	431bde83 	.word	0x431bde83

0800205c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b088      	sub	sp, #32
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d102      	bne.n	8002070 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	f000 bc02 	b.w	8002874 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002070:	4b96      	ldr	r3, [pc, #600]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 030c 	and.w	r3, r3, #12
 8002078:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800207a:	4b94      	ldr	r3, [pc, #592]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0310 	and.w	r3, r3, #16
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 80e4 	beq.w	800225a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d007      	beq.n	80020a8 <HAL_RCC_OscConfig+0x4c>
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	2b0c      	cmp	r3, #12
 800209c:	f040 808b 	bne.w	80021b6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	f040 8087 	bne.w	80021b6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020a8:	4b88      	ldr	r3, [pc, #544]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_OscConfig+0x64>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e3d9      	b.n	8002874 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a1a      	ldr	r2, [r3, #32]
 80020c4:	4b81      	ldr	r3, [pc, #516]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0308 	and.w	r3, r3, #8
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d004      	beq.n	80020da <HAL_RCC_OscConfig+0x7e>
 80020d0:	4b7e      	ldr	r3, [pc, #504]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020d8:	e005      	b.n	80020e6 <HAL_RCC_OscConfig+0x8a>
 80020da:	4b7c      	ldr	r3, [pc, #496]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 80020dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d223      	bcs.n	8002132 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 fd8c 	bl	8002c0c <RCC_SetFlashLatencyFromMSIRange>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e3ba      	b.n	8002874 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020fe:	4b73      	ldr	r3, [pc, #460]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a72      	ldr	r2, [pc, #456]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 8002104:	f043 0308 	orr.w	r3, r3, #8
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	4b70      	ldr	r3, [pc, #448]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	496d      	ldr	r1, [pc, #436]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 8002118:	4313      	orrs	r3, r2
 800211a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800211c:	4b6b      	ldr	r3, [pc, #428]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	021b      	lsls	r3, r3, #8
 800212a:	4968      	ldr	r1, [pc, #416]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 800212c:	4313      	orrs	r3, r2
 800212e:	604b      	str	r3, [r1, #4]
 8002130:	e025      	b.n	800217e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002132:	4b66      	ldr	r3, [pc, #408]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a65      	ldr	r2, [pc, #404]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 8002138:	f043 0308 	orr.w	r3, r3, #8
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	4b63      	ldr	r3, [pc, #396]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	4960      	ldr	r1, [pc, #384]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 800214c:	4313      	orrs	r3, r2
 800214e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002150:	4b5e      	ldr	r3, [pc, #376]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	021b      	lsls	r3, r3, #8
 800215e:	495b      	ldr	r1, [pc, #364]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 8002160:	4313      	orrs	r3, r2
 8002162:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d109      	bne.n	800217e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	4618      	mov	r0, r3
 8002170:	f000 fd4c 	bl	8002c0c <RCC_SetFlashLatencyFromMSIRange>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e37a      	b.n	8002874 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800217e:	f000 fc81 	bl	8002a84 <HAL_RCC_GetSysClockFreq>
 8002182:	4602      	mov	r2, r0
 8002184:	4b51      	ldr	r3, [pc, #324]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	091b      	lsrs	r3, r3, #4
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	4950      	ldr	r1, [pc, #320]	@ (80022d0 <HAL_RCC_OscConfig+0x274>)
 8002190:	5ccb      	ldrb	r3, [r1, r3]
 8002192:	f003 031f 	and.w	r3, r3, #31
 8002196:	fa22 f303 	lsr.w	r3, r2, r3
 800219a:	4a4e      	ldr	r2, [pc, #312]	@ (80022d4 <HAL_RCC_OscConfig+0x278>)
 800219c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800219e:	4b4e      	ldr	r3, [pc, #312]	@ (80022d8 <HAL_RCC_OscConfig+0x27c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe fd56 	bl	8000c54 <HAL_InitTick>
 80021a8:	4603      	mov	r3, r0
 80021aa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d052      	beq.n	8002258 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	e35e      	b.n	8002874 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d032      	beq.n	8002224 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021be:	4b43      	ldr	r3, [pc, #268]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a42      	ldr	r2, [pc, #264]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021ca:	f7fe fd93 	bl	8000cf4 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021d2:	f7fe fd8f 	bl	8000cf4 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e347      	b.n	8002874 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021e4:	4b39      	ldr	r3, [pc, #228]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f0      	beq.n	80021d2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021f0:	4b36      	ldr	r3, [pc, #216]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a35      	ldr	r2, [pc, #212]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 80021f6:	f043 0308 	orr.w	r3, r3, #8
 80021fa:	6013      	str	r3, [r2, #0]
 80021fc:	4b33      	ldr	r3, [pc, #204]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	4930      	ldr	r1, [pc, #192]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 800220a:	4313      	orrs	r3, r2
 800220c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800220e:	4b2f      	ldr	r3, [pc, #188]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	021b      	lsls	r3, r3, #8
 800221c:	492b      	ldr	r1, [pc, #172]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 800221e:	4313      	orrs	r3, r2
 8002220:	604b      	str	r3, [r1, #4]
 8002222:	e01a      	b.n	800225a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002224:	4b29      	ldr	r3, [pc, #164]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a28      	ldr	r2, [pc, #160]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 800222a:	f023 0301 	bic.w	r3, r3, #1
 800222e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002230:	f7fe fd60 	bl	8000cf4 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002238:	f7fe fd5c 	bl	8000cf4 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e314      	b.n	8002874 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800224a:	4b20      	ldr	r3, [pc, #128]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0x1dc>
 8002256:	e000      	b.n	800225a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002258:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d073      	beq.n	800234e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	2b08      	cmp	r3, #8
 800226a:	d005      	beq.n	8002278 <HAL_RCC_OscConfig+0x21c>
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	2b0c      	cmp	r3, #12
 8002270:	d10e      	bne.n	8002290 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2b03      	cmp	r3, #3
 8002276:	d10b      	bne.n	8002290 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002278:	4b14      	ldr	r3, [pc, #80]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d063      	beq.n	800234c <HAL_RCC_OscConfig+0x2f0>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d15f      	bne.n	800234c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e2f1      	b.n	8002874 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002298:	d106      	bne.n	80022a8 <HAL_RCC_OscConfig+0x24c>
 800229a:	4b0c      	ldr	r3, [pc, #48]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a0b      	ldr	r2, [pc, #44]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 80022a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	e025      	b.n	80022f4 <HAL_RCC_OscConfig+0x298>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022b0:	d114      	bne.n	80022dc <HAL_RCC_OscConfig+0x280>
 80022b2:	4b06      	ldr	r3, [pc, #24]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a05      	ldr	r2, [pc, #20]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 80022b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	4b03      	ldr	r3, [pc, #12]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a02      	ldr	r2, [pc, #8]	@ (80022cc <HAL_RCC_OscConfig+0x270>)
 80022c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	e013      	b.n	80022f4 <HAL_RCC_OscConfig+0x298>
 80022cc:	40021000 	.word	0x40021000
 80022d0:	08004ac8 	.word	0x08004ac8
 80022d4:	20000000 	.word	0x20000000
 80022d8:	20000004 	.word	0x20000004
 80022dc:	4ba0      	ldr	r3, [pc, #640]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a9f      	ldr	r2, [pc, #636]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 80022e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	4b9d      	ldr	r3, [pc, #628]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a9c      	ldr	r2, [pc, #624]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 80022ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d013      	beq.n	8002324 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7fe fcfa 	bl	8000cf4 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002304:	f7fe fcf6 	bl	8000cf4 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	@ 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e2ae      	b.n	8002874 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002316:	4b92      	ldr	r3, [pc, #584]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0x2a8>
 8002322:	e014      	b.n	800234e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002324:	f7fe fce6 	bl	8000cf4 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800232c:	f7fe fce2 	bl	8000cf4 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b64      	cmp	r3, #100	@ 0x64
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e29a      	b.n	8002874 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800233e:	4b88      	ldr	r3, [pc, #544]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x2d0>
 800234a:	e000      	b.n	800234e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d060      	beq.n	800241c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	2b04      	cmp	r3, #4
 800235e:	d005      	beq.n	800236c <HAL_RCC_OscConfig+0x310>
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	2b0c      	cmp	r3, #12
 8002364:	d119      	bne.n	800239a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2b02      	cmp	r3, #2
 800236a:	d116      	bne.n	800239a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800236c:	4b7c      	ldr	r3, [pc, #496]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <HAL_RCC_OscConfig+0x328>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e277      	b.n	8002874 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002384:	4b76      	ldr	r3, [pc, #472]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	061b      	lsls	r3, r3, #24
 8002392:	4973      	ldr	r1, [pc, #460]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 8002394:	4313      	orrs	r3, r2
 8002396:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002398:	e040      	b.n	800241c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d023      	beq.n	80023ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a2:	4b6f      	ldr	r3, [pc, #444]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a6e      	ldr	r2, [pc, #440]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 80023a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ae:	f7fe fca1 	bl	8000cf4 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b6:	f7fe fc9d 	bl	8000cf4 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e255      	b.n	8002874 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023c8:	4b65      	ldr	r3, [pc, #404]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0f0      	beq.n	80023b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d4:	4b62      	ldr	r3, [pc, #392]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	061b      	lsls	r3, r3, #24
 80023e2:	495f      	ldr	r1, [pc, #380]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	604b      	str	r3, [r1, #4]
 80023e8:	e018      	b.n	800241c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ea:	4b5d      	ldr	r3, [pc, #372]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a5c      	ldr	r2, [pc, #368]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 80023f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f6:	f7fe fc7d 	bl	8000cf4 <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023fe:	f7fe fc79 	bl	8000cf4 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e231      	b.n	8002874 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002410:	4b53      	ldr	r3, [pc, #332]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1f0      	bne.n	80023fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0308 	and.w	r3, r3, #8
 8002424:	2b00      	cmp	r3, #0
 8002426:	d03c      	beq.n	80024a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d01c      	beq.n	800246a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002430:	4b4b      	ldr	r3, [pc, #300]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 8002432:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002436:	4a4a      	ldr	r2, [pc, #296]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002440:	f7fe fc58 	bl	8000cf4 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002448:	f7fe fc54 	bl	8000cf4 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e20c      	b.n	8002874 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800245a:	4b41      	ldr	r3, [pc, #260]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 800245c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0ef      	beq.n	8002448 <HAL_RCC_OscConfig+0x3ec>
 8002468:	e01b      	b.n	80024a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800246a:	4b3d      	ldr	r3, [pc, #244]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 800246c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002470:	4a3b      	ldr	r2, [pc, #236]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 8002472:	f023 0301 	bic.w	r3, r3, #1
 8002476:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800247a:	f7fe fc3b 	bl	8000cf4 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002482:	f7fe fc37 	bl	8000cf4 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e1ef      	b.n	8002874 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002494:	4b32      	ldr	r3, [pc, #200]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 8002496:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1ef      	bne.n	8002482 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 80a6 	beq.w	80025fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024b0:	2300      	movs	r3, #0
 80024b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 80024b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10d      	bne.n	80024dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c0:	4b27      	ldr	r3, [pc, #156]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 80024c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c4:	4a26      	ldr	r2, [pc, #152]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 80024c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80024cc:	4b24      	ldr	r3, [pc, #144]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 80024ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d8:	2301      	movs	r3, #1
 80024da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024dc:	4b21      	ldr	r3, [pc, #132]	@ (8002564 <HAL_RCC_OscConfig+0x508>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d118      	bne.n	800251a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002564 <HAL_RCC_OscConfig+0x508>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002564 <HAL_RCC_OscConfig+0x508>)
 80024ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f4:	f7fe fbfe 	bl	8000cf4 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024fc:	f7fe fbfa 	bl	8000cf4 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e1b2      	b.n	8002874 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800250e:	4b15      	ldr	r3, [pc, #84]	@ (8002564 <HAL_RCC_OscConfig+0x508>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d108      	bne.n	8002534 <HAL_RCC_OscConfig+0x4d8>
 8002522:	4b0f      	ldr	r3, [pc, #60]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 8002524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002528:	4a0d      	ldr	r2, [pc, #52]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002532:	e029      	b.n	8002588 <HAL_RCC_OscConfig+0x52c>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	2b05      	cmp	r3, #5
 800253a:	d115      	bne.n	8002568 <HAL_RCC_OscConfig+0x50c>
 800253c:	4b08      	ldr	r3, [pc, #32]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 800253e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002542:	4a07      	ldr	r2, [pc, #28]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 8002544:	f043 0304 	orr.w	r3, r3, #4
 8002548:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800254c:	4b04      	ldr	r3, [pc, #16]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 800254e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002552:	4a03      	ldr	r2, [pc, #12]	@ (8002560 <HAL_RCC_OscConfig+0x504>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800255c:	e014      	b.n	8002588 <HAL_RCC_OscConfig+0x52c>
 800255e:	bf00      	nop
 8002560:	40021000 	.word	0x40021000
 8002564:	40007000 	.word	0x40007000
 8002568:	4b9a      	ldr	r3, [pc, #616]	@ (80027d4 <HAL_RCC_OscConfig+0x778>)
 800256a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800256e:	4a99      	ldr	r2, [pc, #612]	@ (80027d4 <HAL_RCC_OscConfig+0x778>)
 8002570:	f023 0301 	bic.w	r3, r3, #1
 8002574:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002578:	4b96      	ldr	r3, [pc, #600]	@ (80027d4 <HAL_RCC_OscConfig+0x778>)
 800257a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800257e:	4a95      	ldr	r2, [pc, #596]	@ (80027d4 <HAL_RCC_OscConfig+0x778>)
 8002580:	f023 0304 	bic.w	r3, r3, #4
 8002584:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d016      	beq.n	80025be <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002590:	f7fe fbb0 	bl	8000cf4 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002596:	e00a      	b.n	80025ae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002598:	f7fe fbac 	bl	8000cf4 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e162      	b.n	8002874 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ae:	4b89      	ldr	r3, [pc, #548]	@ (80027d4 <HAL_RCC_OscConfig+0x778>)
 80025b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0ed      	beq.n	8002598 <HAL_RCC_OscConfig+0x53c>
 80025bc:	e015      	b.n	80025ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025be:	f7fe fb99 	bl	8000cf4 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025c4:	e00a      	b.n	80025dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c6:	f7fe fb95 	bl	8000cf4 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e14b      	b.n	8002874 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025dc:	4b7d      	ldr	r3, [pc, #500]	@ (80027d4 <HAL_RCC_OscConfig+0x778>)
 80025de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1ed      	bne.n	80025c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025ea:	7ffb      	ldrb	r3, [r7, #31]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d105      	bne.n	80025fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f0:	4b78      	ldr	r3, [pc, #480]	@ (80027d4 <HAL_RCC_OscConfig+0x778>)
 80025f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f4:	4a77      	ldr	r2, [pc, #476]	@ (80027d4 <HAL_RCC_OscConfig+0x778>)
 80025f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025fa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0320 	and.w	r3, r3, #32
 8002604:	2b00      	cmp	r3, #0
 8002606:	d03c      	beq.n	8002682 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260c:	2b00      	cmp	r3, #0
 800260e:	d01c      	beq.n	800264a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002610:	4b70      	ldr	r3, [pc, #448]	@ (80027d4 <HAL_RCC_OscConfig+0x778>)
 8002612:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002616:	4a6f      	ldr	r2, [pc, #444]	@ (80027d4 <HAL_RCC_OscConfig+0x778>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002620:	f7fe fb68 	bl	8000cf4 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002628:	f7fe fb64 	bl	8000cf4 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e11c      	b.n	8002874 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800263a:	4b66      	ldr	r3, [pc, #408]	@ (80027d4 <HAL_RCC_OscConfig+0x778>)
 800263c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0ef      	beq.n	8002628 <HAL_RCC_OscConfig+0x5cc>
 8002648:	e01b      	b.n	8002682 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800264a:	4b62      	ldr	r3, [pc, #392]	@ (80027d4 <HAL_RCC_OscConfig+0x778>)
 800264c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002650:	4a60      	ldr	r2, [pc, #384]	@ (80027d4 <HAL_RCC_OscConfig+0x778>)
 8002652:	f023 0301 	bic.w	r3, r3, #1
 8002656:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265a:	f7fe fb4b 	bl	8000cf4 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002662:	f7fe fb47 	bl	8000cf4 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e0ff      	b.n	8002874 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002674:	4b57      	ldr	r3, [pc, #348]	@ (80027d4 <HAL_RCC_OscConfig+0x778>)
 8002676:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1ef      	bne.n	8002662 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 80f3 	beq.w	8002872 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002690:	2b02      	cmp	r3, #2
 8002692:	f040 80c9 	bne.w	8002828 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002696:	4b4f      	ldr	r3, [pc, #316]	@ (80027d4 <HAL_RCC_OscConfig+0x778>)
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f003 0203 	and.w	r2, r3, #3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d12c      	bne.n	8002704 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b4:	3b01      	subs	r3, #1
 80026b6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d123      	bne.n	8002704 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026c6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d11b      	bne.n	8002704 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026d8:	429a      	cmp	r2, r3
 80026da:	d113      	bne.n	8002704 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e6:	085b      	lsrs	r3, r3, #1
 80026e8:	3b01      	subs	r3, #1
 80026ea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d109      	bne.n	8002704 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fa:	085b      	lsrs	r3, r3, #1
 80026fc:	3b01      	subs	r3, #1
 80026fe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002700:	429a      	cmp	r2, r3
 8002702:	d06b      	beq.n	80027dc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	2b0c      	cmp	r3, #12
 8002708:	d062      	beq.n	80027d0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800270a:	4b32      	ldr	r3, [pc, #200]	@ (80027d4 <HAL_RCC_OscConfig+0x778>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e0ac      	b.n	8002874 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800271a:	4b2e      	ldr	r3, [pc, #184]	@ (80027d4 <HAL_RCC_OscConfig+0x778>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a2d      	ldr	r2, [pc, #180]	@ (80027d4 <HAL_RCC_OscConfig+0x778>)
 8002720:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002724:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002726:	f7fe fae5 	bl	8000cf4 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800272e:	f7fe fae1 	bl	8000cf4 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e099      	b.n	8002874 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002740:	4b24      	ldr	r3, [pc, #144]	@ (80027d4 <HAL_RCC_OscConfig+0x778>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1f0      	bne.n	800272e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800274c:	4b21      	ldr	r3, [pc, #132]	@ (80027d4 <HAL_RCC_OscConfig+0x778>)
 800274e:	68da      	ldr	r2, [r3, #12]
 8002750:	4b21      	ldr	r3, [pc, #132]	@ (80027d8 <HAL_RCC_OscConfig+0x77c>)
 8002752:	4013      	ands	r3, r2
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800275c:	3a01      	subs	r2, #1
 800275e:	0112      	lsls	r2, r2, #4
 8002760:	4311      	orrs	r1, r2
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002766:	0212      	lsls	r2, r2, #8
 8002768:	4311      	orrs	r1, r2
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800276e:	0852      	lsrs	r2, r2, #1
 8002770:	3a01      	subs	r2, #1
 8002772:	0552      	lsls	r2, r2, #21
 8002774:	4311      	orrs	r1, r2
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800277a:	0852      	lsrs	r2, r2, #1
 800277c:	3a01      	subs	r2, #1
 800277e:	0652      	lsls	r2, r2, #25
 8002780:	4311      	orrs	r1, r2
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002786:	06d2      	lsls	r2, r2, #27
 8002788:	430a      	orrs	r2, r1
 800278a:	4912      	ldr	r1, [pc, #72]	@ (80027d4 <HAL_RCC_OscConfig+0x778>)
 800278c:	4313      	orrs	r3, r2
 800278e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002790:	4b10      	ldr	r3, [pc, #64]	@ (80027d4 <HAL_RCC_OscConfig+0x778>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a0f      	ldr	r2, [pc, #60]	@ (80027d4 <HAL_RCC_OscConfig+0x778>)
 8002796:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800279a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800279c:	4b0d      	ldr	r3, [pc, #52]	@ (80027d4 <HAL_RCC_OscConfig+0x778>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	4a0c      	ldr	r2, [pc, #48]	@ (80027d4 <HAL_RCC_OscConfig+0x778>)
 80027a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027a8:	f7fe faa4 	bl	8000cf4 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b0:	f7fe faa0 	bl	8000cf4 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e058      	b.n	8002874 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027c2:	4b04      	ldr	r3, [pc, #16]	@ (80027d4 <HAL_RCC_OscConfig+0x778>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0f0      	beq.n	80027b0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027ce:	e050      	b.n	8002872 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e04f      	b.n	8002874 <HAL_RCC_OscConfig+0x818>
 80027d4:	40021000 	.word	0x40021000
 80027d8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027dc:	4b27      	ldr	r3, [pc, #156]	@ (800287c <HAL_RCC_OscConfig+0x820>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d144      	bne.n	8002872 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027e8:	4b24      	ldr	r3, [pc, #144]	@ (800287c <HAL_RCC_OscConfig+0x820>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a23      	ldr	r2, [pc, #140]	@ (800287c <HAL_RCC_OscConfig+0x820>)
 80027ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027f4:	4b21      	ldr	r3, [pc, #132]	@ (800287c <HAL_RCC_OscConfig+0x820>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	4a20      	ldr	r2, [pc, #128]	@ (800287c <HAL_RCC_OscConfig+0x820>)
 80027fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002800:	f7fe fa78 	bl	8000cf4 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002808:	f7fe fa74 	bl	8000cf4 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e02c      	b.n	8002874 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800281a:	4b18      	ldr	r3, [pc, #96]	@ (800287c <HAL_RCC_OscConfig+0x820>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f0      	beq.n	8002808 <HAL_RCC_OscConfig+0x7ac>
 8002826:	e024      	b.n	8002872 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	2b0c      	cmp	r3, #12
 800282c:	d01f      	beq.n	800286e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282e:	4b13      	ldr	r3, [pc, #76]	@ (800287c <HAL_RCC_OscConfig+0x820>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a12      	ldr	r2, [pc, #72]	@ (800287c <HAL_RCC_OscConfig+0x820>)
 8002834:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283a:	f7fe fa5b 	bl	8000cf4 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002842:	f7fe fa57 	bl	8000cf4 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e00f      	b.n	8002874 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002854:	4b09      	ldr	r3, [pc, #36]	@ (800287c <HAL_RCC_OscConfig+0x820>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f0      	bne.n	8002842 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002860:	4b06      	ldr	r3, [pc, #24]	@ (800287c <HAL_RCC_OscConfig+0x820>)
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	4905      	ldr	r1, [pc, #20]	@ (800287c <HAL_RCC_OscConfig+0x820>)
 8002866:	4b06      	ldr	r3, [pc, #24]	@ (8002880 <HAL_RCC_OscConfig+0x824>)
 8002868:	4013      	ands	r3, r2
 800286a:	60cb      	str	r3, [r1, #12]
 800286c:	e001      	b.n	8002872 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3720      	adds	r7, #32
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40021000 	.word	0x40021000
 8002880:	feeefffc 	.word	0xfeeefffc

08002884 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e0e7      	b.n	8002a68 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002898:	4b75      	ldr	r3, [pc, #468]	@ (8002a70 <HAL_RCC_ClockConfig+0x1ec>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d910      	bls.n	80028c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a6:	4b72      	ldr	r3, [pc, #456]	@ (8002a70 <HAL_RCC_ClockConfig+0x1ec>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f023 0207 	bic.w	r2, r3, #7
 80028ae:	4970      	ldr	r1, [pc, #448]	@ (8002a70 <HAL_RCC_ClockConfig+0x1ec>)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b6:	4b6e      	ldr	r3, [pc, #440]	@ (8002a70 <HAL_RCC_ClockConfig+0x1ec>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0cf      	b.n	8002a68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d010      	beq.n	80028f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	4b66      	ldr	r3, [pc, #408]	@ (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d908      	bls.n	80028f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e4:	4b63      	ldr	r3, [pc, #396]	@ (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	4960      	ldr	r1, [pc, #384]	@ (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d04c      	beq.n	800299c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b03      	cmp	r3, #3
 8002908:	d107      	bne.n	800291a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800290a:	4b5a      	ldr	r3, [pc, #360]	@ (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d121      	bne.n	800295a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e0a6      	b.n	8002a68 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b02      	cmp	r3, #2
 8002920:	d107      	bne.n	8002932 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002922:	4b54      	ldr	r3, [pc, #336]	@ (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d115      	bne.n	800295a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e09a      	b.n	8002a68 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d107      	bne.n	800294a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800293a:	4b4e      	ldr	r3, [pc, #312]	@ (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d109      	bne.n	800295a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e08e      	b.n	8002a68 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800294a:	4b4a      	ldr	r3, [pc, #296]	@ (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e086      	b.n	8002a68 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800295a:	4b46      	ldr	r3, [pc, #280]	@ (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f023 0203 	bic.w	r2, r3, #3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	4943      	ldr	r1, [pc, #268]	@ (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 8002968:	4313      	orrs	r3, r2
 800296a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800296c:	f7fe f9c2 	bl	8000cf4 <HAL_GetTick>
 8002970:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002972:	e00a      	b.n	800298a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002974:	f7fe f9be 	bl	8000cf4 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002982:	4293      	cmp	r3, r2
 8002984:	d901      	bls.n	800298a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e06e      	b.n	8002a68 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298a:	4b3a      	ldr	r3, [pc, #232]	@ (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 020c 	and.w	r2, r3, #12
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	429a      	cmp	r2, r3
 800299a:	d1eb      	bne.n	8002974 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d010      	beq.n	80029ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	4b31      	ldr	r3, [pc, #196]	@ (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d208      	bcs.n	80029ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	492b      	ldr	r1, [pc, #172]	@ (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029ca:	4b29      	ldr	r3, [pc, #164]	@ (8002a70 <HAL_RCC_ClockConfig+0x1ec>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d210      	bcs.n	80029fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d8:	4b25      	ldr	r3, [pc, #148]	@ (8002a70 <HAL_RCC_ClockConfig+0x1ec>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f023 0207 	bic.w	r2, r3, #7
 80029e0:	4923      	ldr	r1, [pc, #140]	@ (8002a70 <HAL_RCC_ClockConfig+0x1ec>)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e8:	4b21      	ldr	r3, [pc, #132]	@ (8002a70 <HAL_RCC_ClockConfig+0x1ec>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d001      	beq.n	80029fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e036      	b.n	8002a68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d008      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a06:	4b1b      	ldr	r3, [pc, #108]	@ (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	4918      	ldr	r1, [pc, #96]	@ (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0308 	and.w	r3, r3, #8
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d009      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a24:	4b13      	ldr	r3, [pc, #76]	@ (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	4910      	ldr	r1, [pc, #64]	@ (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a38:	f000 f824 	bl	8002a84 <HAL_RCC_GetSysClockFreq>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	091b      	lsrs	r3, r3, #4
 8002a44:	f003 030f 	and.w	r3, r3, #15
 8002a48:	490b      	ldr	r1, [pc, #44]	@ (8002a78 <HAL_RCC_ClockConfig+0x1f4>)
 8002a4a:	5ccb      	ldrb	r3, [r1, r3]
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	fa22 f303 	lsr.w	r3, r2, r3
 8002a54:	4a09      	ldr	r2, [pc, #36]	@ (8002a7c <HAL_RCC_ClockConfig+0x1f8>)
 8002a56:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a58:	4b09      	ldr	r3, [pc, #36]	@ (8002a80 <HAL_RCC_ClockConfig+0x1fc>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7fe f8f9 	bl	8000c54 <HAL_InitTick>
 8002a62:	4603      	mov	r3, r0
 8002a64:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a66:	7afb      	ldrb	r3, [r7, #11]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40022000 	.word	0x40022000
 8002a74:	40021000 	.word	0x40021000
 8002a78:	08004ac8 	.word	0x08004ac8
 8002a7c:	20000000 	.word	0x20000000
 8002a80:	20000004 	.word	0x20000004

08002a84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b089      	sub	sp, #36	@ 0x24
 8002a88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61fb      	str	r3, [r7, #28]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a92:	4b3e      	ldr	r3, [pc, #248]	@ (8002b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 030c 	and.w	r3, r3, #12
 8002a9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a9c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f003 0303 	and.w	r3, r3, #3
 8002aa4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x34>
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	2b0c      	cmp	r3, #12
 8002ab0:	d121      	bne.n	8002af6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d11e      	bne.n	8002af6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ab8:	4b34      	ldr	r3, [pc, #208]	@ (8002b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d107      	bne.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ac4:	4b31      	ldr	r3, [pc, #196]	@ (8002b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aca:	0a1b      	lsrs	r3, r3, #8
 8002acc:	f003 030f 	and.w	r3, r3, #15
 8002ad0:	61fb      	str	r3, [r7, #28]
 8002ad2:	e005      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ad4:	4b2d      	ldr	r3, [pc, #180]	@ (8002b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	091b      	lsrs	r3, r3, #4
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8002b90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10d      	bne.n	8002b0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002af4:	e00a      	b.n	8002b0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	2b04      	cmp	r3, #4
 8002afa:	d102      	bne.n	8002b02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002afc:	4b25      	ldr	r3, [pc, #148]	@ (8002b94 <HAL_RCC_GetSysClockFreq+0x110>)
 8002afe:	61bb      	str	r3, [r7, #24]
 8002b00:	e004      	b.n	8002b0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d101      	bne.n	8002b0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b08:	4b23      	ldr	r3, [pc, #140]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	2b0c      	cmp	r3, #12
 8002b10:	d134      	bne.n	8002b7c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b12:	4b1e      	ldr	r3, [pc, #120]	@ (8002b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d003      	beq.n	8002b2a <HAL_RCC_GetSysClockFreq+0xa6>
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2b03      	cmp	r3, #3
 8002b26:	d003      	beq.n	8002b30 <HAL_RCC_GetSysClockFreq+0xac>
 8002b28:	e005      	b.n	8002b36 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002b94 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b2c:	617b      	str	r3, [r7, #20]
      break;
 8002b2e:	e005      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b30:	4b19      	ldr	r3, [pc, #100]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b32:	617b      	str	r3, [r7, #20]
      break;
 8002b34:	e002      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	617b      	str	r3, [r7, #20]
      break;
 8002b3a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b3c:	4b13      	ldr	r3, [pc, #76]	@ (8002b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	091b      	lsrs	r3, r3, #4
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	3301      	adds	r3, #1
 8002b48:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b4a:	4b10      	ldr	r3, [pc, #64]	@ (8002b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	0a1b      	lsrs	r3, r3, #8
 8002b50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	fb03 f202 	mul.w	r2, r3, r2
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b60:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b62:	4b0a      	ldr	r3, [pc, #40]	@ (8002b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	0e5b      	lsrs	r3, r3, #25
 8002b68:	f003 0303 	and.w	r3, r3, #3
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b7c:	69bb      	ldr	r3, [r7, #24]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3724      	adds	r7, #36	@ 0x24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	08004ae0 	.word	0x08004ae0
 8002b94:	00f42400 	.word	0x00f42400
 8002b98:	007a1200 	.word	0x007a1200

08002b9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ba0:	4b03      	ldr	r3, [pc, #12]	@ (8002bb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	20000000 	.word	0x20000000

08002bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002bb8:	f7ff fff0 	bl	8002b9c <HAL_RCC_GetHCLKFreq>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	4b06      	ldr	r3, [pc, #24]	@ (8002bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	0a1b      	lsrs	r3, r3, #8
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	4904      	ldr	r1, [pc, #16]	@ (8002bdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bca:	5ccb      	ldrb	r3, [r1, r3]
 8002bcc:	f003 031f 	and.w	r3, r3, #31
 8002bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	08004ad8 	.word	0x08004ad8

08002be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002be4:	f7ff ffda 	bl	8002b9c <HAL_RCC_GetHCLKFreq>
 8002be8:	4602      	mov	r2, r0
 8002bea:	4b06      	ldr	r3, [pc, #24]	@ (8002c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	0adb      	lsrs	r3, r3, #11
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	4904      	ldr	r1, [pc, #16]	@ (8002c08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bf6:	5ccb      	ldrb	r3, [r1, r3]
 8002bf8:	f003 031f 	and.w	r3, r3, #31
 8002bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40021000 	.word	0x40021000
 8002c08:	08004ad8 	.word	0x08004ad8

08002c0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c14:	2300      	movs	r3, #0
 8002c16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c18:	4b2a      	ldr	r3, [pc, #168]	@ (8002cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c24:	f7ff f9b6 	bl	8001f94 <HAL_PWREx_GetVoltageRange>
 8002c28:	6178      	str	r0, [r7, #20]
 8002c2a:	e014      	b.n	8002c56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c2c:	4b25      	ldr	r3, [pc, #148]	@ (8002cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c30:	4a24      	ldr	r2, [pc, #144]	@ (8002cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c36:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c38:	4b22      	ldr	r3, [pc, #136]	@ (8002cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c44:	f7ff f9a6 	bl	8001f94 <HAL_PWREx_GetVoltageRange>
 8002c48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c4e:	4a1d      	ldr	r2, [pc, #116]	@ (8002cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c54:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c5c:	d10b      	bne.n	8002c76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b80      	cmp	r3, #128	@ 0x80
 8002c62:	d919      	bls.n	8002c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2ba0      	cmp	r3, #160	@ 0xa0
 8002c68:	d902      	bls.n	8002c70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	e013      	b.n	8002c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c70:	2301      	movs	r3, #1
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	e010      	b.n	8002c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b80      	cmp	r3, #128	@ 0x80
 8002c7a:	d902      	bls.n	8002c82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	613b      	str	r3, [r7, #16]
 8002c80:	e00a      	b.n	8002c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b80      	cmp	r3, #128	@ 0x80
 8002c86:	d102      	bne.n	8002c8e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c88:	2302      	movs	r3, #2
 8002c8a:	613b      	str	r3, [r7, #16]
 8002c8c:	e004      	b.n	8002c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b70      	cmp	r3, #112	@ 0x70
 8002c92:	d101      	bne.n	8002c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c94:	2301      	movs	r3, #1
 8002c96:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c98:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f023 0207 	bic.w	r2, r3, #7
 8002ca0:	4909      	ldr	r1, [pc, #36]	@ (8002cc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ca8:	4b07      	ldr	r3, [pc, #28]	@ (8002cc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d001      	beq.n	8002cba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40022000 	.word	0x40022000

08002ccc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cd8:	2300      	movs	r3, #0
 8002cda:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d031      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002cf0:	d01a      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002cf2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002cf6:	d814      	bhi.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d009      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002cfc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d00:	d10f      	bne.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002d02:	4b5d      	ldr	r3, [pc, #372]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	4a5c      	ldr	r2, [pc, #368]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d0c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d0e:	e00c      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3304      	adds	r3, #4
 8002d14:	2100      	movs	r1, #0
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 f9ce 	bl	80030b8 <RCCEx_PLLSAI1_Config>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d20:	e003      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	74fb      	strb	r3, [r7, #19]
      break;
 8002d26:	e000      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002d28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d2a:	7cfb      	ldrb	r3, [r7, #19]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10b      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d30:	4b51      	ldr	r3, [pc, #324]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d36:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d3e:	494e      	ldr	r1, [pc, #312]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002d46:	e001      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d48:	7cfb      	ldrb	r3, [r7, #19]
 8002d4a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 809e 	beq.w	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d5e:	4b46      	ldr	r3, [pc, #280]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002d6e:	2300      	movs	r3, #0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00d      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d74:	4b40      	ldr	r3, [pc, #256]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d78:	4a3f      	ldr	r2, [pc, #252]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d80:	4b3d      	ldr	r3, [pc, #244]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d88:	60bb      	str	r3, [r7, #8]
 8002d8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d90:	4b3a      	ldr	r3, [pc, #232]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a39      	ldr	r2, [pc, #228]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d9c:	f7fd ffaa 	bl	8000cf4 <HAL_GetTick>
 8002da0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002da2:	e009      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da4:	f7fd ffa6 	bl	8000cf4 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d902      	bls.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	74fb      	strb	r3, [r7, #19]
        break;
 8002db6:	e005      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002db8:	4b30      	ldr	r3, [pc, #192]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0ef      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002dc4:	7cfb      	ldrb	r3, [r7, #19]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d15a      	bne.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002dca:	4b2b      	ldr	r3, [pc, #172]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dd4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d01e      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d019      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002de6:	4b24      	ldr	r3, [pc, #144]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002df0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002df2:	4b21      	ldr	r3, [pc, #132]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002df8:	4a1f      	ldr	r2, [pc, #124]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dfe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e02:	4b1d      	ldr	r3, [pc, #116]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e08:	4a1b      	ldr	r2, [pc, #108]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e12:	4a19      	ldr	r2, [pc, #100]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d016      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e24:	f7fd ff66 	bl	8000cf4 <HAL_GetTick>
 8002e28:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e2a:	e00b      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e2c:	f7fd ff62 	bl	8000cf4 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d902      	bls.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	74fb      	strb	r3, [r7, #19]
            break;
 8002e42:	e006      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e44:	4b0c      	ldr	r3, [pc, #48]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0ec      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002e52:	7cfb      	ldrb	r3, [r7, #19]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10b      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e58:	4b07      	ldr	r3, [pc, #28]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e5e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e66:	4904      	ldr	r1, [pc, #16]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002e6e:	e009      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e70:	7cfb      	ldrb	r3, [r7, #19]
 8002e72:	74bb      	strb	r3, [r7, #18]
 8002e74:	e006      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002e76:	bf00      	nop
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e80:	7cfb      	ldrb	r3, [r7, #19]
 8002e82:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e84:	7c7b      	ldrb	r3, [r7, #17]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d105      	bne.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e8a:	4b8a      	ldr	r3, [pc, #552]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e8e:	4a89      	ldr	r2, [pc, #548]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e94:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00a      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ea2:	4b84      	ldr	r3, [pc, #528]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea8:	f023 0203 	bic.w	r2, r3, #3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	4980      	ldr	r1, [pc, #512]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00a      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ec4:	4b7b      	ldr	r3, [pc, #492]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eca:	f023 020c 	bic.w	r2, r3, #12
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed2:	4978      	ldr	r1, [pc, #480]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0320 	and.w	r3, r3, #32
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00a      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ee6:	4b73      	ldr	r3, [pc, #460]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eec:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef4:	496f      	ldr	r1, [pc, #444]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00a      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f08:	4b6a      	ldr	r3, [pc, #424]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f0e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f16:	4967      	ldr	r1, [pc, #412]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00a      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f2a:	4b62      	ldr	r3, [pc, #392]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f30:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f38:	495e      	ldr	r1, [pc, #376]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00a      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f4c:	4b59      	ldr	r3, [pc, #356]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f52:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f5a:	4956      	ldr	r1, [pc, #344]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00a      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f6e:	4b51      	ldr	r3, [pc, #324]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f74:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7c:	494d      	ldr	r1, [pc, #308]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d028      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f90:	4b48      	ldr	r3, [pc, #288]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f96:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9e:	4945      	ldr	r1, [pc, #276]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002faa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fae:	d106      	bne.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fb0:	4b40      	ldr	r3, [pc, #256]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	4a3f      	ldr	r2, [pc, #252]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fba:	60d3      	str	r3, [r2, #12]
 8002fbc:	e011      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002fc6:	d10c      	bne.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3304      	adds	r3, #4
 8002fcc:	2101      	movs	r1, #1
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 f872 	bl	80030b8 <RCCEx_PLLSAI1_Config>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002fd8:	7cfb      	ldrb	r3, [r7, #19]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002fde:	7cfb      	ldrb	r3, [r7, #19]
 8002fe0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d028      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fee:	4b31      	ldr	r3, [pc, #196]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ffc:	492d      	ldr	r1, [pc, #180]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003008:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800300c:	d106      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800300e:	4b29      	ldr	r3, [pc, #164]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	4a28      	ldr	r2, [pc, #160]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003014:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003018:	60d3      	str	r3, [r2, #12]
 800301a:	e011      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003020:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003024:	d10c      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3304      	adds	r3, #4
 800302a:	2101      	movs	r1, #1
 800302c:	4618      	mov	r0, r3
 800302e:	f000 f843 	bl	80030b8 <RCCEx_PLLSAI1_Config>
 8003032:	4603      	mov	r3, r0
 8003034:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003036:	7cfb      	ldrb	r3, [r7, #19]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800303c:	7cfb      	ldrb	r3, [r7, #19]
 800303e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d01c      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800304c:	4b19      	ldr	r3, [pc, #100]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800304e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003052:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800305a:	4916      	ldr	r1, [pc, #88]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003066:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800306a:	d10c      	bne.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3304      	adds	r3, #4
 8003070:	2102      	movs	r1, #2
 8003072:	4618      	mov	r0, r3
 8003074:	f000 f820 	bl	80030b8 <RCCEx_PLLSAI1_Config>
 8003078:	4603      	mov	r3, r0
 800307a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800307c:	7cfb      	ldrb	r3, [r7, #19]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003082:	7cfb      	ldrb	r3, [r7, #19]
 8003084:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00a      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003092:	4b08      	ldr	r3, [pc, #32]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003094:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003098:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a0:	4904      	ldr	r1, [pc, #16]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80030a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40021000 	.word	0x40021000

080030b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030c2:	2300      	movs	r3, #0
 80030c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030c6:	4b74      	ldr	r3, [pc, #464]	@ (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d018      	beq.n	8003104 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030d2:	4b71      	ldr	r3, [pc, #452]	@ (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	f003 0203 	and.w	r2, r3, #3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d10d      	bne.n	80030fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
       ||
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d009      	beq.n	80030fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80030ea:	4b6b      	ldr	r3, [pc, #428]	@ (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	091b      	lsrs	r3, r3, #4
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
       ||
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d047      	beq.n	800318e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	73fb      	strb	r3, [r7, #15]
 8003102:	e044      	b.n	800318e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b03      	cmp	r3, #3
 800310a:	d018      	beq.n	800313e <RCCEx_PLLSAI1_Config+0x86>
 800310c:	2b03      	cmp	r3, #3
 800310e:	d825      	bhi.n	800315c <RCCEx_PLLSAI1_Config+0xa4>
 8003110:	2b01      	cmp	r3, #1
 8003112:	d002      	beq.n	800311a <RCCEx_PLLSAI1_Config+0x62>
 8003114:	2b02      	cmp	r3, #2
 8003116:	d009      	beq.n	800312c <RCCEx_PLLSAI1_Config+0x74>
 8003118:	e020      	b.n	800315c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800311a:	4b5f      	ldr	r3, [pc, #380]	@ (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d11d      	bne.n	8003162 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800312a:	e01a      	b.n	8003162 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800312c:	4b5a      	ldr	r3, [pc, #360]	@ (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003134:	2b00      	cmp	r3, #0
 8003136:	d116      	bne.n	8003166 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800313c:	e013      	b.n	8003166 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800313e:	4b56      	ldr	r3, [pc, #344]	@ (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10f      	bne.n	800316a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800314a:	4b53      	ldr	r3, [pc, #332]	@ (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d109      	bne.n	800316a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800315a:	e006      	b.n	800316a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
      break;
 8003160:	e004      	b.n	800316c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003162:	bf00      	nop
 8003164:	e002      	b.n	800316c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003166:	bf00      	nop
 8003168:	e000      	b.n	800316c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800316a:	bf00      	nop
    }

    if(status == HAL_OK)
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10d      	bne.n	800318e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003172:	4b49      	ldr	r3, [pc, #292]	@ (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6819      	ldr	r1, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	3b01      	subs	r3, #1
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	430b      	orrs	r3, r1
 8003188:	4943      	ldr	r1, [pc, #268]	@ (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 800318a:	4313      	orrs	r3, r2
 800318c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d17c      	bne.n	800328e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003194:	4b40      	ldr	r3, [pc, #256]	@ (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a3f      	ldr	r2, [pc, #252]	@ (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 800319a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800319e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031a0:	f7fd fda8 	bl	8000cf4 <HAL_GetTick>
 80031a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031a6:	e009      	b.n	80031bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031a8:	f7fd fda4 	bl	8000cf4 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d902      	bls.n	80031bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	73fb      	strb	r3, [r7, #15]
        break;
 80031ba:	e005      	b.n	80031c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031bc:	4b36      	ldr	r3, [pc, #216]	@ (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1ef      	bne.n	80031a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d15f      	bne.n	800328e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d110      	bne.n	80031f6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031d4:	4b30      	ldr	r3, [pc, #192]	@ (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80031dc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6892      	ldr	r2, [r2, #8]
 80031e4:	0211      	lsls	r1, r2, #8
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	68d2      	ldr	r2, [r2, #12]
 80031ea:	06d2      	lsls	r2, r2, #27
 80031ec:	430a      	orrs	r2, r1
 80031ee:	492a      	ldr	r1, [pc, #168]	@ (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	610b      	str	r3, [r1, #16]
 80031f4:	e027      	b.n	8003246 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d112      	bne.n	8003222 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031fc:	4b26      	ldr	r3, [pc, #152]	@ (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003204:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6892      	ldr	r2, [r2, #8]
 800320c:	0211      	lsls	r1, r2, #8
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6912      	ldr	r2, [r2, #16]
 8003212:	0852      	lsrs	r2, r2, #1
 8003214:	3a01      	subs	r2, #1
 8003216:	0552      	lsls	r2, r2, #21
 8003218:	430a      	orrs	r2, r1
 800321a:	491f      	ldr	r1, [pc, #124]	@ (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 800321c:	4313      	orrs	r3, r2
 800321e:	610b      	str	r3, [r1, #16]
 8003220:	e011      	b.n	8003246 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003222:	4b1d      	ldr	r3, [pc, #116]	@ (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800322a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6892      	ldr	r2, [r2, #8]
 8003232:	0211      	lsls	r1, r2, #8
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6952      	ldr	r2, [r2, #20]
 8003238:	0852      	lsrs	r2, r2, #1
 800323a:	3a01      	subs	r2, #1
 800323c:	0652      	lsls	r2, r2, #25
 800323e:	430a      	orrs	r2, r1
 8003240:	4915      	ldr	r1, [pc, #84]	@ (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003242:	4313      	orrs	r3, r2
 8003244:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003246:	4b14      	ldr	r3, [pc, #80]	@ (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a13      	ldr	r2, [pc, #76]	@ (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 800324c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003250:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003252:	f7fd fd4f 	bl	8000cf4 <HAL_GetTick>
 8003256:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003258:	e009      	b.n	800326e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800325a:	f7fd fd4b 	bl	8000cf4 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d902      	bls.n	800326e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	73fb      	strb	r3, [r7, #15]
          break;
 800326c:	e005      	b.n	800327a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800326e:	4b0a      	ldr	r3, [pc, #40]	@ (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0ef      	beq.n	800325a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800327a:	7bfb      	ldrb	r3, [r7, #15]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d106      	bne.n	800328e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003280:	4b05      	ldr	r3, [pc, #20]	@ (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	4903      	ldr	r1, [pc, #12]	@ (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 800328a:	4313      	orrs	r3, r2
 800328c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800328e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40021000 	.word	0x40021000

0800329c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e049      	b.n	8003342 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d106      	bne.n	80032c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7fd fba2 	bl	8000a0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3304      	adds	r3, #4
 80032d8:	4619      	mov	r1, r3
 80032da:	4610      	mov	r0, r2
 80032dc:	f000 fbb4 	bl	8003a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b082      	sub	sp, #8
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e049      	b.n	80033f0 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	d106      	bne.n	8003376 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f841 	bl	80033f8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2202      	movs	r2, #2
 800337a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	3304      	adds	r3, #4
 8003386:	4619      	mov	r1, r3
 8003388:	4610      	mov	r0, r2
 800338a:	f000 fb5d 	bl	8003a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e049      	b.n	80034b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fd fac6 	bl	80009c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3304      	adds	r3, #4
 8003448:	4619      	mov	r1, r3
 800344a:	4610      	mov	r0, r2
 800344c:	f000 fafc 	bl	8003a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b084      	sub	sp, #16
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d020      	beq.n	800351e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d01b      	beq.n	800351e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f06f 0202 	mvn.w	r2, #2
 80034ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	f003 0303 	and.w	r3, r3, #3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 fa81 	bl	8003a0c <HAL_TIM_IC_CaptureCallback>
 800350a:	e005      	b.n	8003518 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 fa73 	bl	80039f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fa84 	bl	8003a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b00      	cmp	r3, #0
 8003526:	d020      	beq.n	800356a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f003 0304 	and.w	r3, r3, #4
 800352e:	2b00      	cmp	r3, #0
 8003530:	d01b      	beq.n	800356a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f06f 0204 	mvn.w	r2, #4
 800353a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 fa5b 	bl	8003a0c <HAL_TIM_IC_CaptureCallback>
 8003556:	e005      	b.n	8003564 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 fa4d 	bl	80039f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 fa5e 	bl	8003a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d020      	beq.n	80035b6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	2b00      	cmp	r3, #0
 800357c:	d01b      	beq.n	80035b6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f06f 0208 	mvn.w	r2, #8
 8003586:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2204      	movs	r2, #4
 800358c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	f003 0303 	and.w	r3, r3, #3
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 fa35 	bl	8003a0c <HAL_TIM_IC_CaptureCallback>
 80035a2:	e005      	b.n	80035b0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 fa27 	bl	80039f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 fa38 	bl	8003a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	f003 0310 	and.w	r3, r3, #16
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d020      	beq.n	8003602 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f003 0310 	and.w	r3, r3, #16
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d01b      	beq.n	8003602 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f06f 0210 	mvn.w	r2, #16
 80035d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2208      	movs	r2, #8
 80035d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 fa0f 	bl	8003a0c <HAL_TIM_IC_CaptureCallback>
 80035ee:	e005      	b.n	80035fc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 fa01 	bl	80039f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 fa12 	bl	8003a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00c      	beq.n	8003626 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d007      	beq.n	8003626 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f06f 0201 	mvn.w	r2, #1
 800361e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f9df 	bl	80039e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800362c:	2b00      	cmp	r3, #0
 800362e:	d104      	bne.n	800363a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00c      	beq.n	8003654 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003640:	2b00      	cmp	r3, #0
 8003642:	d007      	beq.n	8003654 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800364c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 fd58 	bl	8004104 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00c      	beq.n	8003678 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003664:	2b00      	cmp	r3, #0
 8003666:	d007      	beq.n	8003678 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 fd50 	bl	8004118 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00c      	beq.n	800369c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003688:	2b00      	cmp	r3, #0
 800368a:	d007      	beq.n	800369c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f9cc 	bl	8003a34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00c      	beq.n	80036c0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f003 0320 	and.w	r3, r3, #32
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d007      	beq.n	80036c0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f06f 0220 	mvn.w	r2, #32
 80036b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 fd18 	bl	80040f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036c0:	bf00      	nop
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036d4:	2300      	movs	r3, #0
 80036d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d101      	bne.n	80036e6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80036e2:	2302      	movs	r3, #2
 80036e4:	e066      	b.n	80037b4 <HAL_TIM_OC_ConfigChannel+0xec>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b14      	cmp	r3, #20
 80036f2:	d857      	bhi.n	80037a4 <HAL_TIM_OC_ConfigChannel+0xdc>
 80036f4:	a201      	add	r2, pc, #4	@ (adr r2, 80036fc <HAL_TIM_OC_ConfigChannel+0x34>)
 80036f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fa:	bf00      	nop
 80036fc:	08003751 	.word	0x08003751
 8003700:	080037a5 	.word	0x080037a5
 8003704:	080037a5 	.word	0x080037a5
 8003708:	080037a5 	.word	0x080037a5
 800370c:	0800375f 	.word	0x0800375f
 8003710:	080037a5 	.word	0x080037a5
 8003714:	080037a5 	.word	0x080037a5
 8003718:	080037a5 	.word	0x080037a5
 800371c:	0800376d 	.word	0x0800376d
 8003720:	080037a5 	.word	0x080037a5
 8003724:	080037a5 	.word	0x080037a5
 8003728:	080037a5 	.word	0x080037a5
 800372c:	0800377b 	.word	0x0800377b
 8003730:	080037a5 	.word	0x080037a5
 8003734:	080037a5 	.word	0x080037a5
 8003738:	080037a5 	.word	0x080037a5
 800373c:	08003789 	.word	0x08003789
 8003740:	080037a5 	.word	0x080037a5
 8003744:	080037a5 	.word	0x080037a5
 8003748:	080037a5 	.word	0x080037a5
 800374c:	08003797 	.word	0x08003797
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68b9      	ldr	r1, [r7, #8]
 8003756:	4618      	mov	r0, r3
 8003758:	f000 f9e6 	bl	8003b28 <TIM_OC1_SetConfig>
      break;
 800375c:	e025      	b.n	80037aa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68b9      	ldr	r1, [r7, #8]
 8003764:	4618      	mov	r0, r3
 8003766:	f000 fa5b 	bl	8003c20 <TIM_OC2_SetConfig>
      break;
 800376a:	e01e      	b.n	80037aa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68b9      	ldr	r1, [r7, #8]
 8003772:	4618      	mov	r0, r3
 8003774:	f000 face 	bl	8003d14 <TIM_OC3_SetConfig>
      break;
 8003778:	e017      	b.n	80037aa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68b9      	ldr	r1, [r7, #8]
 8003780:	4618      	mov	r0, r3
 8003782:	f000 fb3f 	bl	8003e04 <TIM_OC4_SetConfig>
      break;
 8003786:	e010      	b.n	80037aa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68b9      	ldr	r1, [r7, #8]
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fb96 	bl	8003ec0 <TIM_OC5_SetConfig>
      break;
 8003794:	e009      	b.n	80037aa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68b9      	ldr	r1, [r7, #8]
 800379c:	4618      	mov	r0, r3
 800379e:	f000 fbe7 	bl	8003f70 <TIM_OC6_SetConfig>
      break;
 80037a2:	e002      	b.n	80037aa <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	75fb      	strb	r3, [r7, #23]
      break;
 80037a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80037d6:	2302      	movs	r3, #2
 80037d8:	e0ff      	b.n	80039da <HAL_TIM_PWM_ConfigChannel+0x21e>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b14      	cmp	r3, #20
 80037e6:	f200 80f0 	bhi.w	80039ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80037ea:	a201      	add	r2, pc, #4	@ (adr r2, 80037f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80037ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f0:	08003845 	.word	0x08003845
 80037f4:	080039cb 	.word	0x080039cb
 80037f8:	080039cb 	.word	0x080039cb
 80037fc:	080039cb 	.word	0x080039cb
 8003800:	08003885 	.word	0x08003885
 8003804:	080039cb 	.word	0x080039cb
 8003808:	080039cb 	.word	0x080039cb
 800380c:	080039cb 	.word	0x080039cb
 8003810:	080038c7 	.word	0x080038c7
 8003814:	080039cb 	.word	0x080039cb
 8003818:	080039cb 	.word	0x080039cb
 800381c:	080039cb 	.word	0x080039cb
 8003820:	08003907 	.word	0x08003907
 8003824:	080039cb 	.word	0x080039cb
 8003828:	080039cb 	.word	0x080039cb
 800382c:	080039cb 	.word	0x080039cb
 8003830:	08003949 	.word	0x08003949
 8003834:	080039cb 	.word	0x080039cb
 8003838:	080039cb 	.word	0x080039cb
 800383c:	080039cb 	.word	0x080039cb
 8003840:	08003989 	.word	0x08003989
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68b9      	ldr	r1, [r7, #8]
 800384a:	4618      	mov	r0, r3
 800384c:	f000 f96c 	bl	8003b28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699a      	ldr	r2, [r3, #24]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0208 	orr.w	r2, r2, #8
 800385e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	699a      	ldr	r2, [r3, #24]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0204 	bic.w	r2, r2, #4
 800386e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6999      	ldr	r1, [r3, #24]
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	691a      	ldr	r2, [r3, #16]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	619a      	str	r2, [r3, #24]
      break;
 8003882:	e0a5      	b.n	80039d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68b9      	ldr	r1, [r7, #8]
 800388a:	4618      	mov	r0, r3
 800388c:	f000 f9c8 	bl	8003c20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	699a      	ldr	r2, [r3, #24]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800389e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	699a      	ldr	r2, [r3, #24]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6999      	ldr	r1, [r3, #24]
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	021a      	lsls	r2, r3, #8
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	619a      	str	r2, [r3, #24]
      break;
 80038c4:	e084      	b.n	80039d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68b9      	ldr	r1, [r7, #8]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 fa21 	bl	8003d14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	69da      	ldr	r2, [r3, #28]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f042 0208 	orr.w	r2, r2, #8
 80038e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	69da      	ldr	r2, [r3, #28]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0204 	bic.w	r2, r2, #4
 80038f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	69d9      	ldr	r1, [r3, #28]
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	61da      	str	r2, [r3, #28]
      break;
 8003904:	e064      	b.n	80039d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68b9      	ldr	r1, [r7, #8]
 800390c:	4618      	mov	r0, r3
 800390e:	f000 fa79 	bl	8003e04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	69da      	ldr	r2, [r3, #28]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003920:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	69da      	ldr	r2, [r3, #28]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003930:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	69d9      	ldr	r1, [r3, #28]
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	021a      	lsls	r2, r3, #8
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	61da      	str	r2, [r3, #28]
      break;
 8003946:	e043      	b.n	80039d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	4618      	mov	r0, r3
 8003950:	f000 fab6 	bl	8003ec0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0208 	orr.w	r2, r2, #8
 8003962:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0204 	bic.w	r2, r2, #4
 8003972:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	691a      	ldr	r2, [r3, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003986:	e023      	b.n	80039d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68b9      	ldr	r1, [r7, #8]
 800398e:	4618      	mov	r0, r3
 8003990:	f000 faee 	bl	8003f70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	021a      	lsls	r2, r3, #8
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80039c8:	e002      	b.n	80039d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	75fb      	strb	r3, [r7, #23]
      break;
 80039ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop

080039e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a30      	ldr	r2, [pc, #192]	@ (8003b1c <TIM_Base_SetConfig+0xd4>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d003      	beq.n	8003a68 <TIM_Base_SetConfig+0x20>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a66:	d108      	bne.n	8003a7a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a27      	ldr	r2, [pc, #156]	@ (8003b1c <TIM_Base_SetConfig+0xd4>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d00b      	beq.n	8003a9a <TIM_Base_SetConfig+0x52>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a88:	d007      	beq.n	8003a9a <TIM_Base_SetConfig+0x52>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a24      	ldr	r2, [pc, #144]	@ (8003b20 <TIM_Base_SetConfig+0xd8>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d003      	beq.n	8003a9a <TIM_Base_SetConfig+0x52>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a23      	ldr	r2, [pc, #140]	@ (8003b24 <TIM_Base_SetConfig+0xdc>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d108      	bne.n	8003aac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a12      	ldr	r2, [pc, #72]	@ (8003b1c <TIM_Base_SetConfig+0xd4>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d007      	beq.n	8003ae8 <TIM_Base_SetConfig+0xa0>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a11      	ldr	r2, [pc, #68]	@ (8003b20 <TIM_Base_SetConfig+0xd8>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d003      	beq.n	8003ae8 <TIM_Base_SetConfig+0xa0>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a10      	ldr	r2, [pc, #64]	@ (8003b24 <TIM_Base_SetConfig+0xdc>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d103      	bne.n	8003af0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	691a      	ldr	r2, [r3, #16]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d105      	bne.n	8003b0e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	f023 0201 	bic.w	r2, r3, #1
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	611a      	str	r2, [r3, #16]
  }
}
 8003b0e:	bf00      	nop
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	40012c00 	.word	0x40012c00
 8003b20:	40014000 	.word	0x40014000
 8003b24:	40014400 	.word	0x40014400

08003b28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	f023 0201 	bic.w	r2, r3, #1
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f023 0303 	bic.w	r3, r3, #3
 8003b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f023 0302 	bic.w	r3, r3, #2
 8003b74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a24      	ldr	r2, [pc, #144]	@ (8003c14 <TIM_OC1_SetConfig+0xec>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d007      	beq.n	8003b98 <TIM_OC1_SetConfig+0x70>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a23      	ldr	r2, [pc, #140]	@ (8003c18 <TIM_OC1_SetConfig+0xf0>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d003      	beq.n	8003b98 <TIM_OC1_SetConfig+0x70>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a22      	ldr	r2, [pc, #136]	@ (8003c1c <TIM_OC1_SetConfig+0xf4>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d10c      	bne.n	8003bb2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f023 0308 	bic.w	r3, r3, #8
 8003b9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f023 0304 	bic.w	r3, r3, #4
 8003bb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a17      	ldr	r2, [pc, #92]	@ (8003c14 <TIM_OC1_SetConfig+0xec>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d007      	beq.n	8003bca <TIM_OC1_SetConfig+0xa2>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a16      	ldr	r2, [pc, #88]	@ (8003c18 <TIM_OC1_SetConfig+0xf0>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d003      	beq.n	8003bca <TIM_OC1_SetConfig+0xa2>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a15      	ldr	r2, [pc, #84]	@ (8003c1c <TIM_OC1_SetConfig+0xf4>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d111      	bne.n	8003bee <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	621a      	str	r2, [r3, #32]
}
 8003c08:	bf00      	nop
 8003c0a:	371c      	adds	r7, #28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	40012c00 	.word	0x40012c00
 8003c18:	40014000 	.word	0x40014000
 8003c1c:	40014400 	.word	0x40014400

08003c20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b087      	sub	sp, #28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	f023 0210 	bic.w	r2, r3, #16
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	021b      	lsls	r3, r3, #8
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f023 0320 	bic.w	r3, r3, #32
 8003c6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a22      	ldr	r2, [pc, #136]	@ (8003d08 <TIM_OC2_SetConfig+0xe8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d10d      	bne.n	8003ca0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a19      	ldr	r2, [pc, #100]	@ (8003d08 <TIM_OC2_SetConfig+0xe8>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d007      	beq.n	8003cb8 <TIM_OC2_SetConfig+0x98>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a18      	ldr	r2, [pc, #96]	@ (8003d0c <TIM_OC2_SetConfig+0xec>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d003      	beq.n	8003cb8 <TIM_OC2_SetConfig+0x98>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a17      	ldr	r2, [pc, #92]	@ (8003d10 <TIM_OC2_SetConfig+0xf0>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d113      	bne.n	8003ce0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003cbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003cc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	621a      	str	r2, [r3, #32]
}
 8003cfa:	bf00      	nop
 8003cfc:	371c      	adds	r7, #28
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	40012c00 	.word	0x40012c00
 8003d0c:	40014000 	.word	0x40014000
 8003d10:	40014400 	.word	0x40014400

08003d14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b087      	sub	sp, #28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f023 0303 	bic.w	r3, r3, #3
 8003d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	021b      	lsls	r3, r3, #8
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a21      	ldr	r2, [pc, #132]	@ (8003df8 <TIM_OC3_SetConfig+0xe4>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d10d      	bne.n	8003d92 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	021b      	lsls	r3, r3, #8
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a18      	ldr	r2, [pc, #96]	@ (8003df8 <TIM_OC3_SetConfig+0xe4>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d007      	beq.n	8003daa <TIM_OC3_SetConfig+0x96>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a17      	ldr	r2, [pc, #92]	@ (8003dfc <TIM_OC3_SetConfig+0xe8>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d003      	beq.n	8003daa <TIM_OC3_SetConfig+0x96>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a16      	ldr	r2, [pc, #88]	@ (8003e00 <TIM_OC3_SetConfig+0xec>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d113      	bne.n	8003dd2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003db0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003db8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	011b      	lsls	r3, r3, #4
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	621a      	str	r2, [r3, #32]
}
 8003dec:	bf00      	nop
 8003dee:	371c      	adds	r7, #28
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	40012c00 	.word	0x40012c00
 8003dfc:	40014000 	.word	0x40014000
 8003e00:	40014400 	.word	0x40014400

08003e04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	021b      	lsls	r3, r3, #8
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	031b      	lsls	r3, r3, #12
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a14      	ldr	r2, [pc, #80]	@ (8003eb4 <TIM_OC4_SetConfig+0xb0>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d007      	beq.n	8003e78 <TIM_OC4_SetConfig+0x74>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a13      	ldr	r2, [pc, #76]	@ (8003eb8 <TIM_OC4_SetConfig+0xb4>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d003      	beq.n	8003e78 <TIM_OC4_SetConfig+0x74>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a12      	ldr	r2, [pc, #72]	@ (8003ebc <TIM_OC4_SetConfig+0xb8>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d109      	bne.n	8003e8c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	019b      	lsls	r3, r3, #6
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	621a      	str	r2, [r3, #32]
}
 8003ea6:	bf00      	nop
 8003ea8:	371c      	adds	r7, #28
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	40012c00 	.word	0x40012c00
 8003eb8:	40014000 	.word	0x40014000
 8003ebc:	40014400 	.word	0x40014400

08003ec0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003f04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	041b      	lsls	r3, r3, #16
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a13      	ldr	r2, [pc, #76]	@ (8003f64 <TIM_OC5_SetConfig+0xa4>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d007      	beq.n	8003f2a <TIM_OC5_SetConfig+0x6a>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a12      	ldr	r2, [pc, #72]	@ (8003f68 <TIM_OC5_SetConfig+0xa8>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d003      	beq.n	8003f2a <TIM_OC5_SetConfig+0x6a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a11      	ldr	r2, [pc, #68]	@ (8003f6c <TIM_OC5_SetConfig+0xac>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d109      	bne.n	8003f3e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	021b      	lsls	r3, r3, #8
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	621a      	str	r2, [r3, #32]
}
 8003f58:	bf00      	nop
 8003f5a:	371c      	adds	r7, #28
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	40012c00 	.word	0x40012c00
 8003f68:	40014000 	.word	0x40014000
 8003f6c:	40014400 	.word	0x40014400

08003f70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	021b      	lsls	r3, r3, #8
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003fb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	051b      	lsls	r3, r3, #20
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a14      	ldr	r2, [pc, #80]	@ (8004018 <TIM_OC6_SetConfig+0xa8>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d007      	beq.n	8003fdc <TIM_OC6_SetConfig+0x6c>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a13      	ldr	r2, [pc, #76]	@ (800401c <TIM_OC6_SetConfig+0xac>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d003      	beq.n	8003fdc <TIM_OC6_SetConfig+0x6c>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a12      	ldr	r2, [pc, #72]	@ (8004020 <TIM_OC6_SetConfig+0xb0>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d109      	bne.n	8003ff0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fe2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	029b      	lsls	r3, r3, #10
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	621a      	str	r2, [r3, #32]
}
 800400a:	bf00      	nop
 800400c:	371c      	adds	r7, #28
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40012c00 	.word	0x40012c00
 800401c:	40014000 	.word	0x40014000
 8004020:	40014400 	.word	0x40014400

08004024 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004038:	2302      	movs	r3, #2
 800403a:	e04f      	b.n	80040dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2202      	movs	r2, #2
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a21      	ldr	r2, [pc, #132]	@ (80040e8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d108      	bne.n	8004078 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800406c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	4313      	orrs	r3, r2
 8004076:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800407e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	4313      	orrs	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a14      	ldr	r2, [pc, #80]	@ (80040e8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d009      	beq.n	80040b0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040a4:	d004      	beq.n	80040b0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a10      	ldr	r2, [pc, #64]	@ (80040ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d10c      	bne.n	80040ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	40012c00 	.word	0x40012c00
 80040ec:	40014000 	.word	0x40014000

080040f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e040      	b.n	80041c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004142:	2b00      	cmp	r3, #0
 8004144:	d106      	bne.n	8004154 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7fc fce6 	bl	8000b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2224      	movs	r2, #36	@ 0x24
 8004158:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0201 	bic.w	r2, r2, #1
 8004168:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 fa54 	bl	8004620 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f825 	bl	80041c8 <UART_SetConfig>
 800417e:	4603      	mov	r3, r0
 8004180:	2b01      	cmp	r3, #1
 8004182:	d101      	bne.n	8004188 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e01b      	b.n	80041c0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004196:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689a      	ldr	r2, [r3, #8]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f042 0201 	orr.w	r2, r2, #1
 80041b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 fad3 	bl	8004764 <UART_CheckIdleState>
 80041be:	4603      	mov	r3, r0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3708      	adds	r7, #8
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041cc:	b08a      	sub	sp, #40	@ 0x28
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041d2:	2300      	movs	r3, #0
 80041d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	431a      	orrs	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	431a      	orrs	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	4bb4      	ldr	r3, [pc, #720]	@ (80044c8 <UART_SetConfig+0x300>)
 80041f8:	4013      	ands	r3, r2
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	6812      	ldr	r2, [r2, #0]
 80041fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004200:	430b      	orrs	r3, r1
 8004202:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4aa9      	ldr	r2, [pc, #676]	@ (80044cc <UART_SetConfig+0x304>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d004      	beq.n	8004234 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004230:	4313      	orrs	r3, r2
 8004232:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004244:	430a      	orrs	r2, r1
 8004246:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4aa0      	ldr	r2, [pc, #640]	@ (80044d0 <UART_SetConfig+0x308>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d126      	bne.n	80042a0 <UART_SetConfig+0xd8>
 8004252:	4ba0      	ldr	r3, [pc, #640]	@ (80044d4 <UART_SetConfig+0x30c>)
 8004254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004258:	f003 0303 	and.w	r3, r3, #3
 800425c:	2b03      	cmp	r3, #3
 800425e:	d81b      	bhi.n	8004298 <UART_SetConfig+0xd0>
 8004260:	a201      	add	r2, pc, #4	@ (adr r2, 8004268 <UART_SetConfig+0xa0>)
 8004262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004266:	bf00      	nop
 8004268:	08004279 	.word	0x08004279
 800426c:	08004289 	.word	0x08004289
 8004270:	08004281 	.word	0x08004281
 8004274:	08004291 	.word	0x08004291
 8004278:	2301      	movs	r3, #1
 800427a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800427e:	e080      	b.n	8004382 <UART_SetConfig+0x1ba>
 8004280:	2302      	movs	r3, #2
 8004282:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004286:	e07c      	b.n	8004382 <UART_SetConfig+0x1ba>
 8004288:	2304      	movs	r3, #4
 800428a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800428e:	e078      	b.n	8004382 <UART_SetConfig+0x1ba>
 8004290:	2308      	movs	r3, #8
 8004292:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004296:	e074      	b.n	8004382 <UART_SetConfig+0x1ba>
 8004298:	2310      	movs	r3, #16
 800429a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800429e:	e070      	b.n	8004382 <UART_SetConfig+0x1ba>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a8c      	ldr	r2, [pc, #560]	@ (80044d8 <UART_SetConfig+0x310>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d138      	bne.n	800431c <UART_SetConfig+0x154>
 80042aa:	4b8a      	ldr	r3, [pc, #552]	@ (80044d4 <UART_SetConfig+0x30c>)
 80042ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b0:	f003 030c 	and.w	r3, r3, #12
 80042b4:	2b0c      	cmp	r3, #12
 80042b6:	d82d      	bhi.n	8004314 <UART_SetConfig+0x14c>
 80042b8:	a201      	add	r2, pc, #4	@ (adr r2, 80042c0 <UART_SetConfig+0xf8>)
 80042ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042be:	bf00      	nop
 80042c0:	080042f5 	.word	0x080042f5
 80042c4:	08004315 	.word	0x08004315
 80042c8:	08004315 	.word	0x08004315
 80042cc:	08004315 	.word	0x08004315
 80042d0:	08004305 	.word	0x08004305
 80042d4:	08004315 	.word	0x08004315
 80042d8:	08004315 	.word	0x08004315
 80042dc:	08004315 	.word	0x08004315
 80042e0:	080042fd 	.word	0x080042fd
 80042e4:	08004315 	.word	0x08004315
 80042e8:	08004315 	.word	0x08004315
 80042ec:	08004315 	.word	0x08004315
 80042f0:	0800430d 	.word	0x0800430d
 80042f4:	2300      	movs	r3, #0
 80042f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042fa:	e042      	b.n	8004382 <UART_SetConfig+0x1ba>
 80042fc:	2302      	movs	r3, #2
 80042fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004302:	e03e      	b.n	8004382 <UART_SetConfig+0x1ba>
 8004304:	2304      	movs	r3, #4
 8004306:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800430a:	e03a      	b.n	8004382 <UART_SetConfig+0x1ba>
 800430c:	2308      	movs	r3, #8
 800430e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004312:	e036      	b.n	8004382 <UART_SetConfig+0x1ba>
 8004314:	2310      	movs	r3, #16
 8004316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800431a:	e032      	b.n	8004382 <UART_SetConfig+0x1ba>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a6a      	ldr	r2, [pc, #424]	@ (80044cc <UART_SetConfig+0x304>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d12a      	bne.n	800437c <UART_SetConfig+0x1b4>
 8004326:	4b6b      	ldr	r3, [pc, #428]	@ (80044d4 <UART_SetConfig+0x30c>)
 8004328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800432c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004330:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004334:	d01a      	beq.n	800436c <UART_SetConfig+0x1a4>
 8004336:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800433a:	d81b      	bhi.n	8004374 <UART_SetConfig+0x1ac>
 800433c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004340:	d00c      	beq.n	800435c <UART_SetConfig+0x194>
 8004342:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004346:	d815      	bhi.n	8004374 <UART_SetConfig+0x1ac>
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <UART_SetConfig+0x18c>
 800434c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004350:	d008      	beq.n	8004364 <UART_SetConfig+0x19c>
 8004352:	e00f      	b.n	8004374 <UART_SetConfig+0x1ac>
 8004354:	2300      	movs	r3, #0
 8004356:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800435a:	e012      	b.n	8004382 <UART_SetConfig+0x1ba>
 800435c:	2302      	movs	r3, #2
 800435e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004362:	e00e      	b.n	8004382 <UART_SetConfig+0x1ba>
 8004364:	2304      	movs	r3, #4
 8004366:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800436a:	e00a      	b.n	8004382 <UART_SetConfig+0x1ba>
 800436c:	2308      	movs	r3, #8
 800436e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004372:	e006      	b.n	8004382 <UART_SetConfig+0x1ba>
 8004374:	2310      	movs	r3, #16
 8004376:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800437a:	e002      	b.n	8004382 <UART_SetConfig+0x1ba>
 800437c:	2310      	movs	r3, #16
 800437e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a51      	ldr	r2, [pc, #324]	@ (80044cc <UART_SetConfig+0x304>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d17a      	bne.n	8004482 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800438c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004390:	2b08      	cmp	r3, #8
 8004392:	d824      	bhi.n	80043de <UART_SetConfig+0x216>
 8004394:	a201      	add	r2, pc, #4	@ (adr r2, 800439c <UART_SetConfig+0x1d4>)
 8004396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439a:	bf00      	nop
 800439c:	080043c1 	.word	0x080043c1
 80043a0:	080043df 	.word	0x080043df
 80043a4:	080043c9 	.word	0x080043c9
 80043a8:	080043df 	.word	0x080043df
 80043ac:	080043cf 	.word	0x080043cf
 80043b0:	080043df 	.word	0x080043df
 80043b4:	080043df 	.word	0x080043df
 80043b8:	080043df 	.word	0x080043df
 80043bc:	080043d7 	.word	0x080043d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043c0:	f7fe fbf8 	bl	8002bb4 <HAL_RCC_GetPCLK1Freq>
 80043c4:	61f8      	str	r0, [r7, #28]
        break;
 80043c6:	e010      	b.n	80043ea <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043c8:	4b44      	ldr	r3, [pc, #272]	@ (80044dc <UART_SetConfig+0x314>)
 80043ca:	61fb      	str	r3, [r7, #28]
        break;
 80043cc:	e00d      	b.n	80043ea <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ce:	f7fe fb59 	bl	8002a84 <HAL_RCC_GetSysClockFreq>
 80043d2:	61f8      	str	r0, [r7, #28]
        break;
 80043d4:	e009      	b.n	80043ea <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043da:	61fb      	str	r3, [r7, #28]
        break;
 80043dc:	e005      	b.n	80043ea <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80043de:	2300      	movs	r3, #0
 80043e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80043e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 8107 	beq.w	8004600 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	4613      	mov	r3, r2
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	4413      	add	r3, r2
 80043fc:	69fa      	ldr	r2, [r7, #28]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d305      	bcc.n	800440e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004408:	69fa      	ldr	r2, [r7, #28]
 800440a:	429a      	cmp	r2, r3
 800440c:	d903      	bls.n	8004416 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004414:	e0f4      	b.n	8004600 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	2200      	movs	r2, #0
 800441a:	461c      	mov	r4, r3
 800441c:	4615      	mov	r5, r2
 800441e:	f04f 0200 	mov.w	r2, #0
 8004422:	f04f 0300 	mov.w	r3, #0
 8004426:	022b      	lsls	r3, r5, #8
 8004428:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800442c:	0222      	lsls	r2, r4, #8
 800442e:	68f9      	ldr	r1, [r7, #12]
 8004430:	6849      	ldr	r1, [r1, #4]
 8004432:	0849      	lsrs	r1, r1, #1
 8004434:	2000      	movs	r0, #0
 8004436:	4688      	mov	r8, r1
 8004438:	4681      	mov	r9, r0
 800443a:	eb12 0a08 	adds.w	sl, r2, r8
 800443e:	eb43 0b09 	adc.w	fp, r3, r9
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	603b      	str	r3, [r7, #0]
 800444a:	607a      	str	r2, [r7, #4]
 800444c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004450:	4650      	mov	r0, sl
 8004452:	4659      	mov	r1, fp
 8004454:	f7fb feba 	bl	80001cc <__aeabi_uldivmod>
 8004458:	4602      	mov	r2, r0
 800445a:	460b      	mov	r3, r1
 800445c:	4613      	mov	r3, r2
 800445e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004466:	d308      	bcc.n	800447a <UART_SetConfig+0x2b2>
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800446e:	d204      	bcs.n	800447a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	60da      	str	r2, [r3, #12]
 8004478:	e0c2      	b.n	8004600 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004480:	e0be      	b.n	8004600 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800448a:	d16a      	bne.n	8004562 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800448c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004490:	2b08      	cmp	r3, #8
 8004492:	d834      	bhi.n	80044fe <UART_SetConfig+0x336>
 8004494:	a201      	add	r2, pc, #4	@ (adr r2, 800449c <UART_SetConfig+0x2d4>)
 8004496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449a:	bf00      	nop
 800449c:	080044c1 	.word	0x080044c1
 80044a0:	080044e1 	.word	0x080044e1
 80044a4:	080044e9 	.word	0x080044e9
 80044a8:	080044ff 	.word	0x080044ff
 80044ac:	080044ef 	.word	0x080044ef
 80044b0:	080044ff 	.word	0x080044ff
 80044b4:	080044ff 	.word	0x080044ff
 80044b8:	080044ff 	.word	0x080044ff
 80044bc:	080044f7 	.word	0x080044f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044c0:	f7fe fb78 	bl	8002bb4 <HAL_RCC_GetPCLK1Freq>
 80044c4:	61f8      	str	r0, [r7, #28]
        break;
 80044c6:	e020      	b.n	800450a <UART_SetConfig+0x342>
 80044c8:	efff69f3 	.word	0xefff69f3
 80044cc:	40008000 	.word	0x40008000
 80044d0:	40013800 	.word	0x40013800
 80044d4:	40021000 	.word	0x40021000
 80044d8:	40004400 	.word	0x40004400
 80044dc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044e0:	f7fe fb7e 	bl	8002be0 <HAL_RCC_GetPCLK2Freq>
 80044e4:	61f8      	str	r0, [r7, #28]
        break;
 80044e6:	e010      	b.n	800450a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044e8:	4b4c      	ldr	r3, [pc, #304]	@ (800461c <UART_SetConfig+0x454>)
 80044ea:	61fb      	str	r3, [r7, #28]
        break;
 80044ec:	e00d      	b.n	800450a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ee:	f7fe fac9 	bl	8002a84 <HAL_RCC_GetSysClockFreq>
 80044f2:	61f8      	str	r0, [r7, #28]
        break;
 80044f4:	e009      	b.n	800450a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044fa:	61fb      	str	r3, [r7, #28]
        break;
 80044fc:	e005      	b.n	800450a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80044fe:	2300      	movs	r3, #0
 8004500:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004508:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d077      	beq.n	8004600 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	005a      	lsls	r2, r3, #1
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	085b      	lsrs	r3, r3, #1
 800451a:	441a      	add	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	fbb2 f3f3 	udiv	r3, r2, r3
 8004524:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	2b0f      	cmp	r3, #15
 800452a:	d916      	bls.n	800455a <UART_SetConfig+0x392>
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004532:	d212      	bcs.n	800455a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	b29b      	uxth	r3, r3
 8004538:	f023 030f 	bic.w	r3, r3, #15
 800453c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	085b      	lsrs	r3, r3, #1
 8004542:	b29b      	uxth	r3, r3
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	b29a      	uxth	r2, r3
 800454a:	8afb      	ldrh	r3, [r7, #22]
 800454c:	4313      	orrs	r3, r2
 800454e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	8afa      	ldrh	r2, [r7, #22]
 8004556:	60da      	str	r2, [r3, #12]
 8004558:	e052      	b.n	8004600 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004560:	e04e      	b.n	8004600 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004562:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004566:	2b08      	cmp	r3, #8
 8004568:	d827      	bhi.n	80045ba <UART_SetConfig+0x3f2>
 800456a:	a201      	add	r2, pc, #4	@ (adr r2, 8004570 <UART_SetConfig+0x3a8>)
 800456c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004570:	08004595 	.word	0x08004595
 8004574:	0800459d 	.word	0x0800459d
 8004578:	080045a5 	.word	0x080045a5
 800457c:	080045bb 	.word	0x080045bb
 8004580:	080045ab 	.word	0x080045ab
 8004584:	080045bb 	.word	0x080045bb
 8004588:	080045bb 	.word	0x080045bb
 800458c:	080045bb 	.word	0x080045bb
 8004590:	080045b3 	.word	0x080045b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004594:	f7fe fb0e 	bl	8002bb4 <HAL_RCC_GetPCLK1Freq>
 8004598:	61f8      	str	r0, [r7, #28]
        break;
 800459a:	e014      	b.n	80045c6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800459c:	f7fe fb20 	bl	8002be0 <HAL_RCC_GetPCLK2Freq>
 80045a0:	61f8      	str	r0, [r7, #28]
        break;
 80045a2:	e010      	b.n	80045c6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045a4:	4b1d      	ldr	r3, [pc, #116]	@ (800461c <UART_SetConfig+0x454>)
 80045a6:	61fb      	str	r3, [r7, #28]
        break;
 80045a8:	e00d      	b.n	80045c6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045aa:	f7fe fa6b 	bl	8002a84 <HAL_RCC_GetSysClockFreq>
 80045ae:	61f8      	str	r0, [r7, #28]
        break;
 80045b0:	e009      	b.n	80045c6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045b6:	61fb      	str	r3, [r7, #28]
        break;
 80045b8:	e005      	b.n	80045c6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80045ba:	2300      	movs	r3, #0
 80045bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80045c4:	bf00      	nop
    }

    if (pclk != 0U)
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d019      	beq.n	8004600 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	085a      	lsrs	r2, r3, #1
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	441a      	add	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	fbb2 f3f3 	udiv	r3, r2, r3
 80045de:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	2b0f      	cmp	r3, #15
 80045e4:	d909      	bls.n	80045fa <UART_SetConfig+0x432>
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045ec:	d205      	bcs.n	80045fa <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	60da      	str	r2, [r3, #12]
 80045f8:	e002      	b.n	8004600 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800460c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004610:	4618      	mov	r0, r3
 8004612:	3728      	adds	r7, #40	@ 0x28
 8004614:	46bd      	mov	sp, r7
 8004616:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800461a:	bf00      	nop
 800461c:	00f42400 	.word	0x00f42400

08004620 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462c:	f003 0308 	and.w	r3, r3, #8
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00a      	beq.n	800464a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	430a      	orrs	r2, r1
 800466a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00a      	beq.n	800468e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004692:	f003 0304 	and.w	r3, r3, #4
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b4:	f003 0310 	and.w	r3, r3, #16
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00a      	beq.n	80046d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d6:	f003 0320 	and.w	r3, r3, #32
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00a      	beq.n	80046f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01a      	beq.n	8004736 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800471e:	d10a      	bne.n	8004736 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00a      	beq.n	8004758 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	605a      	str	r2, [r3, #4]
  }
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b098      	sub	sp, #96	@ 0x60
 8004768:	af02      	add	r7, sp, #8
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004774:	f7fc fabe 	bl	8000cf4 <HAL_GetTick>
 8004778:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0308 	and.w	r3, r3, #8
 8004784:	2b08      	cmp	r3, #8
 8004786:	d12e      	bne.n	80047e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004788:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004790:	2200      	movs	r2, #0
 8004792:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f88c 	bl	80048b4 <UART_WaitOnFlagUntilTimeout>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d021      	beq.n	80047e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047aa:	e853 3f00 	ldrex	r3, [r3]
 80047ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80047b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	461a      	mov	r2, r3
 80047be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80047c2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047c8:	e841 2300 	strex	r3, r2, [r1]
 80047cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1e6      	bne.n	80047a2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2220      	movs	r2, #32
 80047d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e062      	b.n	80048ac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0304 	and.w	r3, r3, #4
 80047f0:	2b04      	cmp	r3, #4
 80047f2:	d149      	bne.n	8004888 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047fc:	2200      	movs	r2, #0
 80047fe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f856 	bl	80048b4 <UART_WaitOnFlagUntilTimeout>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d03c      	beq.n	8004888 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004816:	e853 3f00 	ldrex	r3, [r3]
 800481a:	623b      	str	r3, [r7, #32]
   return(result);
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004822:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	461a      	mov	r2, r3
 800482a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800482c:	633b      	str	r3, [r7, #48]	@ 0x30
 800482e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004830:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004832:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004834:	e841 2300 	strex	r3, r2, [r1]
 8004838:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800483a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1e6      	bne.n	800480e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3308      	adds	r3, #8
 8004846:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	e853 3f00 	ldrex	r3, [r3]
 800484e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f023 0301 	bic.w	r3, r3, #1
 8004856:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	3308      	adds	r3, #8
 800485e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004860:	61fa      	str	r2, [r7, #28]
 8004862:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004864:	69b9      	ldr	r1, [r7, #24]
 8004866:	69fa      	ldr	r2, [r7, #28]
 8004868:	e841 2300 	strex	r3, r2, [r1]
 800486c:	617b      	str	r3, [r7, #20]
   return(result);
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1e5      	bne.n	8004840 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2220      	movs	r2, #32
 8004878:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e011      	b.n	80048ac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2220      	movs	r2, #32
 800488c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2220      	movs	r2, #32
 8004892:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3758      	adds	r7, #88	@ 0x58
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	603b      	str	r3, [r7, #0]
 80048c0:	4613      	mov	r3, r2
 80048c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048c4:	e04f      	b.n	8004966 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048cc:	d04b      	beq.n	8004966 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ce:	f7fc fa11 	bl	8000cf4 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d302      	bcc.n	80048e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e04e      	b.n	8004986 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0304 	and.w	r3, r3, #4
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d037      	beq.n	8004966 <UART_WaitOnFlagUntilTimeout+0xb2>
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	2b80      	cmp	r3, #128	@ 0x80
 80048fa:	d034      	beq.n	8004966 <UART_WaitOnFlagUntilTimeout+0xb2>
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	2b40      	cmp	r3, #64	@ 0x40
 8004900:	d031      	beq.n	8004966 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	69db      	ldr	r3, [r3, #28]
 8004908:	f003 0308 	and.w	r3, r3, #8
 800490c:	2b08      	cmp	r3, #8
 800490e:	d110      	bne.n	8004932 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2208      	movs	r2, #8
 8004916:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 f838 	bl	800498e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2208      	movs	r2, #8
 8004922:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e029      	b.n	8004986 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	69db      	ldr	r3, [r3, #28]
 8004938:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800493c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004940:	d111      	bne.n	8004966 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800494a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 f81e 	bl	800498e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2220      	movs	r2, #32
 8004956:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e00f      	b.n	8004986 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	69da      	ldr	r2, [r3, #28]
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	4013      	ands	r3, r2
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	429a      	cmp	r2, r3
 8004974:	bf0c      	ite	eq
 8004976:	2301      	moveq	r3, #1
 8004978:	2300      	movne	r3, #0
 800497a:	b2db      	uxtb	r3, r3
 800497c:	461a      	mov	r2, r3
 800497e:	79fb      	ldrb	r3, [r7, #7]
 8004980:	429a      	cmp	r2, r3
 8004982:	d0a0      	beq.n	80048c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800498e:	b480      	push	{r7}
 8004990:	b095      	sub	sp, #84	@ 0x54
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800499e:	e853 3f00 	ldrex	r3, [r3]
 80049a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	461a      	mov	r2, r3
 80049b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80049b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049bc:	e841 2300 	strex	r3, r2, [r1]
 80049c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1e6      	bne.n	8004996 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3308      	adds	r3, #8
 80049ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d0:	6a3b      	ldr	r3, [r7, #32]
 80049d2:	e853 3f00 	ldrex	r3, [r3]
 80049d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	f023 0301 	bic.w	r3, r3, #1
 80049de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	3308      	adds	r3, #8
 80049e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049f0:	e841 2300 	strex	r3, r2, [r1]
 80049f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80049f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1e5      	bne.n	80049c8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d118      	bne.n	8004a36 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	e853 3f00 	ldrex	r3, [r3]
 8004a10:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	f023 0310 	bic.w	r3, r3, #16
 8004a18:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a22:	61bb      	str	r3, [r7, #24]
 8004a24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a26:	6979      	ldr	r1, [r7, #20]
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	e841 2300 	strex	r3, r2, [r1]
 8004a2e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1e6      	bne.n	8004a04 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004a4a:	bf00      	nop
 8004a4c:	3754      	adds	r7, #84	@ 0x54
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <memset>:
 8004a56:	4402      	add	r2, r0
 8004a58:	4603      	mov	r3, r0
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d100      	bne.n	8004a60 <memset+0xa>
 8004a5e:	4770      	bx	lr
 8004a60:	f803 1b01 	strb.w	r1, [r3], #1
 8004a64:	e7f9      	b.n	8004a5a <memset+0x4>
	...

08004a68 <__libc_init_array>:
 8004a68:	b570      	push	{r4, r5, r6, lr}
 8004a6a:	4d0d      	ldr	r5, [pc, #52]	@ (8004aa0 <__libc_init_array+0x38>)
 8004a6c:	4c0d      	ldr	r4, [pc, #52]	@ (8004aa4 <__libc_init_array+0x3c>)
 8004a6e:	1b64      	subs	r4, r4, r5
 8004a70:	10a4      	asrs	r4, r4, #2
 8004a72:	2600      	movs	r6, #0
 8004a74:	42a6      	cmp	r6, r4
 8004a76:	d109      	bne.n	8004a8c <__libc_init_array+0x24>
 8004a78:	4d0b      	ldr	r5, [pc, #44]	@ (8004aa8 <__libc_init_array+0x40>)
 8004a7a:	4c0c      	ldr	r4, [pc, #48]	@ (8004aac <__libc_init_array+0x44>)
 8004a7c:	f000 f818 	bl	8004ab0 <_init>
 8004a80:	1b64      	subs	r4, r4, r5
 8004a82:	10a4      	asrs	r4, r4, #2
 8004a84:	2600      	movs	r6, #0
 8004a86:	42a6      	cmp	r6, r4
 8004a88:	d105      	bne.n	8004a96 <__libc_init_array+0x2e>
 8004a8a:	bd70      	pop	{r4, r5, r6, pc}
 8004a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a90:	4798      	blx	r3
 8004a92:	3601      	adds	r6, #1
 8004a94:	e7ee      	b.n	8004a74 <__libc_init_array+0xc>
 8004a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a9a:	4798      	blx	r3
 8004a9c:	3601      	adds	r6, #1
 8004a9e:	e7f2      	b.n	8004a86 <__libc_init_array+0x1e>
 8004aa0:	08004b18 	.word	0x08004b18
 8004aa4:	08004b18 	.word	0x08004b18
 8004aa8:	08004b18 	.word	0x08004b18
 8004aac:	08004b1c 	.word	0x08004b1c

08004ab0 <_init>:
 8004ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab2:	bf00      	nop
 8004ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ab6:	bc08      	pop	{r3}
 8004ab8:	469e      	mov	lr, r3
 8004aba:	4770      	bx	lr

08004abc <_fini>:
 8004abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004abe:	bf00      	nop
 8004ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ac2:	bc08      	pop	{r3}
 8004ac4:	469e      	mov	lr, r3
 8004ac6:	4770      	bx	lr
